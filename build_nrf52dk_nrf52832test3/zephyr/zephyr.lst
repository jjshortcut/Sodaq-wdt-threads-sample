
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	forced_pm_state = state;
#endif
}

enum power_states _sys_suspend(int32_t ticks)
{
   0:	20002880 	.word	0x20002880
	bool deep_sleep;
#if CONFIG_DEVICE_POWER_MANAGEMENT
	bool low_power = false;
#endif

	pm_state = (forced_pm_state == SYS_POWER_STATE_AUTO) ?
   4:	00001fad 	.word	0x00001fad
		   sys_pm_policy_next_state(ticks) : forced_pm_state;
   8:	00005a3b 	.word	0x00005a3b
   c:	00001fdd 	.word	0x00001fdd
  10:	00001fdd 	.word	0x00001fdd

	if (pm_state == SYS_POWER_STATE_ACTIVE) {
  14:	00001fdd 	.word	0x00001fdd
  18:	00001fdd 	.word	0x00001fdd
	...
#endif
	}

	/* Enter power state */
	sys_pm_debug_start_timer();
	sys_set_power_state(pm_state);
  2c:	00001f09 	.word	0x00001f09
		sys_pm_resume_devices();
	}
#endif
	sys_pm_log_debug_info(pm_state);

	if (!post_ops_done) {
  30:	00001fdd 	.word	0x00001fdd
		post_ops_done = 1;
		/* clear forced_pm_state */
		forced_pm_state = SYS_POWER_STATE_AUTO;
		sys_pm_notify_power_state_exit(pm_state);
  34:	00000000 	.word	0x00000000
		post_ops_done = 1;
  38:	00001eb1 	.word	0x00001eb1
		forced_pm_state = SYS_POWER_STATE_AUTO;
  3c:	0000195d 	.word	0x0000195d

00000040 <_irq_vector_table>:
		sys_pm_notify_power_state_exit(pm_state);
  40:	00001f6d 00001f6d 00001f6d 00001f6d     m...m...m...m...
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00001f6d 00001f6d 00001f6d 00001f6d     m...m...m...m...
  60:	00001f6d 00001f6d 00001f6d 00001f6d     m...m...m...m...
  70:	00001f6d 00001f6d 00001f6d 00001f6d     m...m...m...m...
  80:	00001f6d 00001f6d 00001f6d 00001f6d     m...m...m...m...
  90:	00001f6d 00001f6d 00001f6d 00001f6d     m...m...m...m...
  a0:	00001f6d 00001f6d 00001f6d 00001f6d     m...m...m...m...
  b0:	00001f6d 00001f6d 00001f6d 00001f6d     m...m...m...m...
  c0:	00001f6d 00001f6d 00001f6d 00001f6d     m...m...m...m...
  d0:	00001f6d 00001f6d 00001f6d              m...m...m...

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b96c 	b.w	3cc <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9e08      	ldr	r6, [sp, #32]
     112:	460d      	mov	r5, r1
     114:	4604      	mov	r4, r0
     116:	468e      	mov	lr, r1
     118:	2b00      	cmp	r3, #0
     11a:	f040 8082 	bne.w	222 <CONFIG_FLASH_SIZE+0x22>
     11e:	428a      	cmp	r2, r1
     120:	4617      	mov	r7, r2
     122:	d946      	bls.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     124:	fab2 f282 	clz	r2, r2
     128:	b14a      	cbz	r2, 13e <__udivmoddi4+0x32>
     12a:	f1c2 0120 	rsb	r1, r2, #32
     12e:	fa05 f302 	lsl.w	r3, r5, r2
     132:	fa20 f101 	lsr.w	r1, r0, r1
     136:	4097      	lsls	r7, r2
     138:	ea41 0e03 	orr.w	lr, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     142:	0c23      	lsrs	r3, r4, #16
     144:	fbbe fcf8 	udiv	ip, lr, r8
     148:	b2b9      	uxth	r1, r7
     14a:	fb08 ee1c 	mls	lr, r8, ip, lr
     14e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     152:	fb0c f001 	mul.w	r0, ip, r1
     156:	4298      	cmp	r0, r3
     158:	d90a      	bls.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     15a:	18fb      	adds	r3, r7, r3
     15c:	f10c 35ff 	add.w	r5, ip, #4294967295
     160:	f080 8116 	bcs.w	390 <CONFIG_FLASH_SIZE+0x190>
     164:	4298      	cmp	r0, r3
     166:	f240 8113 	bls.w	390 <CONFIG_FLASH_SIZE+0x190>
     16a:	f1ac 0c02 	sub.w	ip, ip, #2
     16e:	443b      	add	r3, r7
     170:	1a1b      	subs	r3, r3, r0
     172:	b2a4      	uxth	r4, r4
     174:	fbb3 f0f8 	udiv	r0, r3, r8
     178:	fb08 3310 	mls	r3, r8, r0, r3
     17c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     180:	fb00 f101 	mul.w	r1, r0, r1
     184:	42a1      	cmp	r1, r4
     186:	d909      	bls.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     188:	193c      	adds	r4, r7, r4
     18a:	f100 33ff 	add.w	r3, r0, #4294967295
     18e:	f080 8101 	bcs.w	394 <CONFIG_FLASH_SIZE+0x194>
     192:	42a1      	cmp	r1, r4
     194:	f240 80fe 	bls.w	394 <CONFIG_FLASH_SIZE+0x194>
     198:	3802      	subs	r0, #2
     19a:	443c      	add	r4, r7
     19c:	1a64      	subs	r4, r4, r1
     19e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a2:	2100      	movs	r1, #0
     1a4:	b11e      	cbz	r6, 1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     1a6:	40d4      	lsrs	r4, r2
     1a8:	2300      	movs	r3, #0
     1aa:	e9c6 4300 	strd	r4, r3, [r6]
     1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b2:	b902      	cbnz	r2, 1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     1b4:	deff      	udf	#255	; 0xff
     1b6:	fab2 f282 	clz	r2, r2
     1ba:	2a00      	cmp	r2, #0
     1bc:	d14f      	bne.n	25e <CONFIG_FLASH_SIZE+0x5e>
     1be:	1bcb      	subs	r3, r1, r7
     1c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c4:	fa1f f887 	uxth.w	r8, r7
     1c8:	2101      	movs	r1, #1
     1ca:	fbb3 fcfe 	udiv	ip, r3, lr
     1ce:	0c25      	lsrs	r5, r4, #16
     1d0:	fb0e 331c 	mls	r3, lr, ip, r3
     1d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1d8:	fb08 f30c 	mul.w	r3, r8, ip
     1dc:	42ab      	cmp	r3, r5
     1de:	d907      	bls.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     1e0:	197d      	adds	r5, r7, r5
     1e2:	f10c 30ff 	add.w	r0, ip, #4294967295
     1e6:	d202      	bcs.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     1e8:	42ab      	cmp	r3, r5
     1ea:	f200 80e7 	bhi.w	3bc <CONFIG_FLASH_SIZE+0x1bc>
     1ee:	4684      	mov	ip, r0
     1f0:	1aed      	subs	r5, r5, r3
     1f2:	b2a3      	uxth	r3, r4
     1f4:	fbb5 f0fe 	udiv	r0, r5, lr
     1f8:	fb0e 5510 	mls	r5, lr, r0, r5
     1fc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     200:	fb08 f800 	mul.w	r8, r8, r0
     204:	45a0      	cmp	r8, r4
     206:	d907      	bls.n	218 <CONFIG_FLASH_SIZE+0x18>
     208:	193c      	adds	r4, r7, r4
     20a:	f100 33ff 	add.w	r3, r0, #4294967295
     20e:	d202      	bcs.n	216 <CONFIG_FLASH_SIZE+0x16>
     210:	45a0      	cmp	r8, r4
     212:	f200 80d7 	bhi.w	3c4 <CONFIG_FLASH_SIZE+0x1c4>
     216:	4618      	mov	r0, r3
     218:	eba4 0408 	sub.w	r4, r4, r8
     21c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     220:	e7c0      	b.n	1a4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5a>
     222:	428b      	cmp	r3, r1
     224:	d908      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     226:	2e00      	cmp	r6, #0
     228:	f000 80af 	beq.w	38a <CONFIG_FLASH_SIZE+0x18a>
     22c:	2100      	movs	r1, #0
     22e:	e9c6 0500 	strd	r0, r5, [r6]
     232:	4608      	mov	r0, r1
     234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     238:	fab3 f183 	clz	r1, r3
     23c:	2900      	cmp	r1, #0
     23e:	d14b      	bne.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
     240:	42ab      	cmp	r3, r5
     242:	d302      	bcc.n	24a <CONFIG_FLASH_SIZE+0x4a>
     244:	4282      	cmp	r2, r0
     246:	f200 80b7 	bhi.w	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     24a:	1a84      	subs	r4, r0, r2
     24c:	eb65 0303 	sbc.w	r3, r5, r3
     250:	2001      	movs	r0, #1
     252:	469e      	mov	lr, r3
     254:	2e00      	cmp	r6, #0
     256:	d0aa      	beq.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     258:	e9c6 4e00 	strd	r4, lr, [r6]
     25c:	e7a7      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     25e:	f1c2 0c20 	rsb	ip, r2, #32
     262:	fa01 f302 	lsl.w	r3, r1, r2
     266:	4097      	lsls	r7, r2
     268:	fa20 f00c 	lsr.w	r0, r0, ip
     26c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     270:	fa21 fc0c 	lsr.w	ip, r1, ip
     274:	4318      	orrs	r0, r3
     276:	fbbc f1fe 	udiv	r1, ip, lr
     27a:	0c05      	lsrs	r5, r0, #16
     27c:	fb0e cc11 	mls	ip, lr, r1, ip
     280:	fa1f f887 	uxth.w	r8, r7
     284:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     288:	fb01 f308 	mul.w	r3, r1, r8
     28c:	42ab      	cmp	r3, r5
     28e:	fa04 f402 	lsl.w	r4, r4, r2
     292:	d909      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     294:	197d      	adds	r5, r7, r5
     296:	f101 3cff 	add.w	ip, r1, #4294967295
     29a:	f080 808b 	bcs.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     29e:	42ab      	cmp	r3, r5
     2a0:	f240 8088 	bls.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     2a4:	3902      	subs	r1, #2
     2a6:	443d      	add	r5, r7
     2a8:	1aeb      	subs	r3, r5, r3
     2aa:	b285      	uxth	r5, r0
     2ac:	fbb3 f0fe 	udiv	r0, r3, lr
     2b0:	fb0e 3310 	mls	r3, lr, r0, r3
     2b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2b8:	fb00 f308 	mul.w	r3, r0, r8
     2bc:	42ab      	cmp	r3, r5
     2be:	d907      	bls.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     2c0:	197d      	adds	r5, r7, r5
     2c2:	f100 3cff 	add.w	ip, r0, #4294967295
     2c6:	d271      	bcs.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2c8:	42ab      	cmp	r3, r5
     2ca:	d96f      	bls.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2cc:	3802      	subs	r0, #2
     2ce:	443d      	add	r5, r7
     2d0:	1aeb      	subs	r3, r5, r3
     2d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2d6:	e778      	b.n	1ca <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x80>
     2d8:	f1c1 0c20 	rsb	ip, r1, #32
     2dc:	408b      	lsls	r3, r1
     2de:	fa22 f70c 	lsr.w	r7, r2, ip
     2e2:	431f      	orrs	r7, r3
     2e4:	fa20 f40c 	lsr.w	r4, r0, ip
     2e8:	fa05 f301 	lsl.w	r3, r5, r1
     2ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f0:	fa25 f50c 	lsr.w	r5, r5, ip
     2f4:	431c      	orrs	r4, r3
     2f6:	0c23      	lsrs	r3, r4, #16
     2f8:	fbb5 f9fe 	udiv	r9, r5, lr
     2fc:	fa1f f887 	uxth.w	r8, r7
     300:	fb0e 5519 	mls	r5, lr, r9, r5
     304:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     308:	fb09 fa08 	mul.w	sl, r9, r8
     30c:	45aa      	cmp	sl, r5
     30e:	fa02 f201 	lsl.w	r2, r2, r1
     312:	fa00 f301 	lsl.w	r3, r0, r1
     316:	d908      	bls.n	32a <CONFIG_FLASH_SIZE+0x12a>
     318:	197d      	adds	r5, r7, r5
     31a:	f109 30ff 	add.w	r0, r9, #4294967295
     31e:	d247      	bcs.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     320:	45aa      	cmp	sl, r5
     322:	d945      	bls.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     324:	f1a9 0902 	sub.w	r9, r9, #2
     328:	443d      	add	r5, r7
     32a:	eba5 050a 	sub.w	r5, r5, sl
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fe 	udiv	r0, r5, lr
     334:	fb0e 5510 	mls	r5, lr, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f808 	mul.w	r8, r0, r8
     340:	45a0      	cmp	r8, r4
     342:	d907      	bls.n	354 <CONFIG_FLASH_SIZE+0x154>
     344:	193c      	adds	r4, r7, r4
     346:	f100 35ff 	add.w	r5, r0, #4294967295
     34a:	d22d      	bcs.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     34c:	45a0      	cmp	r8, r4
     34e:	d92b      	bls.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     350:	3802      	subs	r0, #2
     352:	443c      	add	r4, r7
     354:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     358:	eba4 0408 	sub.w	r4, r4, r8
     35c:	fba0 8902 	umull	r8, r9, r0, r2
     360:	454c      	cmp	r4, r9
     362:	46c6      	mov	lr, r8
     364:	464d      	mov	r5, r9
     366:	d319      	bcc.n	39c <CONFIG_FLASH_SIZE+0x19c>
     368:	d016      	beq.n	398 <CONFIG_FLASH_SIZE+0x198>
     36a:	b15e      	cbz	r6, 384 <CONFIG_FLASH_SIZE+0x184>
     36c:	ebb3 020e 	subs.w	r2, r3, lr
     370:	eb64 0405 	sbc.w	r4, r4, r5
     374:	fa04 fc0c 	lsl.w	ip, r4, ip
     378:	40ca      	lsrs	r2, r1
     37a:	ea4c 0202 	orr.w	r2, ip, r2
     37e:	40cc      	lsrs	r4, r1
     380:	e9c6 2400 	strd	r2, r4, [r6]
     384:	2100      	movs	r1, #0
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	4631      	mov	r1, r6
     38c:	4630      	mov	r0, r6
     38e:	e70e      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     390:	46ac      	mov	ip, r5
     392:	e6ed      	b.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     394:	4618      	mov	r0, r3
     396:	e701      	b.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     398:	4543      	cmp	r3, r8
     39a:	d2e6      	bcs.n	36a <CONFIG_FLASH_SIZE+0x16a>
     39c:	ebb8 0e02 	subs.w	lr, r8, r2
     3a0:	eb69 0507 	sbc.w	r5, r9, r7
     3a4:	3801      	subs	r0, #1
     3a6:	e7e0      	b.n	36a <CONFIG_FLASH_SIZE+0x16a>
     3a8:	4628      	mov	r0, r5
     3aa:	e7d3      	b.n	354 <CONFIG_FLASH_SIZE+0x154>
     3ac:	4660      	mov	r0, ip
     3ae:	e78f      	b.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     3b0:	4681      	mov	r9, r0
     3b2:	e7ba      	b.n	32a <CONFIG_FLASH_SIZE+0x12a>
     3b4:	4661      	mov	r1, ip
     3b6:	e777      	b.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     3b8:	4608      	mov	r0, r1
     3ba:	e74b      	b.n	254 <CONFIG_FLASH_SIZE+0x54>
     3bc:	f1ac 0c02 	sub.w	ip, ip, #2
     3c0:	443d      	add	r5, r7
     3c2:	e715      	b.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     3c4:	3802      	subs	r0, #2
     3c6:	443c      	add	r4, r7
     3c8:	e726      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     3ca:	bf00      	nop

000003cc <__aeabi_idiv0>:
     3cc:	4770      	bx	lr
     3ce:	bf00      	nop

000003d0 <button_pressed>:
}

/* ISR called when button is pressed */
void button_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
     3d0:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
     3d2:	f001 fbdd 	bl	1b90 <z_timer_cycle_get_32>
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
}
     3d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     3da:	4601      	mov	r1, r0
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
     3dc:	4801      	ldr	r0, [pc, #4]	; (3e4 <button_pressed+0x14>)
     3de:	f005 b980 	b.w	56e2 <printk>
     3e2:	bf00      	nop
     3e4:	00005f24 	.word	0x00005f24

000003e8 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
     3e8:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
     3ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
     3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
     3f4:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
	const struct gpio_driver_data *const data =
     3f8:	f8d0 900c 	ldr.w	r9, [r0, #12]
{
     3fc:	4605      	mov	r5, r0
     3fe:	460e      	mov	r6, r1
     400:	4614      	mov	r4, r2
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
     402:	d15f      	bne.n	4c4 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xc4>
     404:	4937      	ldr	r1, [pc, #220]	; (4e4 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xe4>)
     406:	4a38      	ldr	r2, [pc, #224]	; (4e8 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xe8>)
     408:	4838      	ldr	r0, [pc, #224]	; (4ec <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xec>)
     40a:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
     40e:	f005 f968 	bl	56e2 <printk>
     412:	4837      	ldr	r0, [pc, #220]	; (4f0 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xf0>)
     414:	f005 f965 	bl	56e2 <printk>
     418:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
     41c:	4832      	ldr	r0, [pc, #200]	; (4e8 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xe8>)
     41e:	f005 fa6b 	bl	58f8 <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
     422:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
     426:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
     42a:	d10e      	bne.n	44a <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x4a>
     42c:	4931      	ldr	r1, [pc, #196]	; (4f4 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xf4>)
     42e:	4a2e      	ldr	r2, [pc, #184]	; (4e8 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xe8>)
     430:	482e      	ldr	r0, [pc, #184]	; (4ec <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xec>)
     432:	f240 13f1 	movw	r3, #497	; 0x1f1
     436:	f005 f954 	bl	56e2 <printk>
     43a:	482f      	ldr	r0, [pc, #188]	; (4f8 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xf8>)
     43c:	f005 f951 	bl	56e2 <printk>
     440:	4829      	ldr	r0, [pc, #164]	; (4e8 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xe8>)
     442:	f240 11f1 	movw	r1, #497	; 0x1f1
     446:	f005 fa57 	bl	58f8 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
     44a:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
     44e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     452:	d10e      	bne.n	472 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x72>
     454:	4929      	ldr	r1, [pc, #164]	; (4fc <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xfc>)
     456:	4a24      	ldr	r2, [pc, #144]	; (4e8 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xe8>)
     458:	4824      	ldr	r0, [pc, #144]	; (4ec <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xec>)
     45a:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
     45e:	f005 f940 	bl	56e2 <printk>
     462:	4827      	ldr	r0, [pc, #156]	; (500 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x100>)
     464:	f005 f93d 	bl	56e2 <printk>
     468:	481f      	ldr	r0, [pc, #124]	; (4e8 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xe8>)
     46a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
     46e:	f005 fa43 	bl	58f8 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     472:	f8da 3000 	ldr.w	r3, [sl]
     476:	2701      	movs	r7, #1
     478:	40b7      	lsls	r7, r6
     47a:	421f      	tst	r7, r3
     47c:	d10e      	bne.n	49c <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x9c>
     47e:	4921      	ldr	r1, [pc, #132]	; (504 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x104>)
     480:	4a19      	ldr	r2, [pc, #100]	; (4e8 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xe8>)
     482:	481a      	ldr	r0, [pc, #104]	; (4ec <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xec>)
     484:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
     488:	f005 f92b 	bl	56e2 <printk>
     48c:	481e      	ldr	r0, [pc, #120]	; (508 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x108>)
     48e:	f005 f928 	bl	56e2 <printk>
     492:	4815      	ldr	r0, [pc, #84]	; (4e8 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xe8>)
     494:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
     498:	f005 fa2e 	bl	58f8 <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
     49c:	0423      	lsls	r3, r4, #16
     49e:	d505      	bpl.n	4ac <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xac>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     4a0:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
     4a4:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
     4a6:	bf18      	it	ne
     4a8:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
     4ac:	f8d8 7018 	ldr.w	r7, [r8, #24]
     4b0:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
     4b4:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
     4b8:	4631      	mov	r1, r6
     4ba:	4628      	mov	r0, r5
     4bc:	46bc      	mov	ip, r7
}
     4be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
     4c2:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
     4c4:	2b00      	cmp	r3, #0
     4c6:	d1ac      	bne.n	422 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x22>
     4c8:	4910      	ldr	r1, [pc, #64]	; (50c <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x10c>)
     4ca:	4a07      	ldr	r2, [pc, #28]	; (4e8 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xe8>)
     4cc:	4807      	ldr	r0, [pc, #28]	; (4ec <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xec>)
     4ce:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
     4d2:	f005 f906 	bl	56e2 <printk>
     4d6:	480e      	ldr	r0, [pc, #56]	; (510 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x110>)
     4d8:	f005 f903 	bl	56e2 <printk>
     4dc:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
     4e0:	e79c      	b.n	41c <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x1c>
     4e2:	bf00      	nop
     4e4:	00005f64 	.word	0x00005f64
     4e8:	00005f3a 	.word	0x00005f3a
     4ec:	00005fa5 	.word	0x00005fa5
     4f0:	00005fc2 	.word	0x00005fc2
     4f4:	00006043 	.word	0x00006043
     4f8:	000060c4 	.word	0x000060c4
     4fc:	00006118 	.word	0x00006118
     500:	00006162 	.word	0x00006162
     504:	000061a7 	.word	0x000061a7
     508:	000061e5 	.word	0x000061e5
     50c:	00005fee 	.word	0x00005fee
     510:	00006018 	.word	0x00006018

00000514 <gpio_pin_configure>:
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
			| GPIO_OUTPUT_INIT_LOGICAL;
	}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     514:	2301      	movs	r3, #1
{
     516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     51a:	fa03 f501 	lsl.w	r5, r3, r1
     51e:	6843      	ldr	r3, [r0, #4]
	struct gpio_driver_data *data =
     520:	68c6      	ldr	r6, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     522:	681b      	ldr	r3, [r3, #0]
     524:	421d      	tst	r5, r3
{
     526:	4604      	mov	r4, r0
     528:	4688      	mov	r8, r1
     52a:	4617      	mov	r7, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     52c:	d10e      	bne.n	54c <gpio_pin_configure+0x38>
     52e:	490f      	ldr	r1, [pc, #60]	; (56c <gpio_pin_configure+0x58>)
     530:	4a0f      	ldr	r2, [pc, #60]	; (570 <gpio_pin_configure+0x5c>)
     532:	4810      	ldr	r0, [pc, #64]	; (574 <gpio_pin_configure+0x60>)
     534:	f44f 7311 	mov.w	r3, #580	; 0x244
     538:	f005 f8d3 	bl	56e2 <printk>
     53c:	480e      	ldr	r0, [pc, #56]	; (578 <gpio_pin_configure+0x64>)
     53e:	f005 f8d0 	bl	56e2 <printk>
     542:	480b      	ldr	r0, [pc, #44]	; (570 <gpio_pin_configure+0x5c>)
     544:	f44f 7111 	mov.w	r1, #580	; 0x244
     548:	f005 f9d6 	bl	58f8 <assert_post_action>
	return api->pin_configure(port, pin, flags);
     54c:	68a3      	ldr	r3, [r4, #8]
     54e:	463a      	mov	r2, r7
     550:	681b      	ldr	r3, [r3, #0]
     552:	4641      	mov	r1, r8
     554:	4620      	mov	r0, r4
     556:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
     558:	b928      	cbnz	r0, 566 <gpio_pin_configure+0x52>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     55a:	6833      	ldr	r3, [r6, #0]
     55c:	07fa      	lsls	r2, r7, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
     55e:	bf4c      	ite	mi
     560:	432b      	orrmi	r3, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     562:	43ab      	bicpl	r3, r5
     564:	6033      	str	r3, [r6, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
     566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     56a:	bf00      	nop
     56c:	000061a7 	.word	0x000061a7
     570:	00005f3a 	.word	0x00005f3a
     574:	00005fa5 	.word	0x00005fa5
     578:	000061e5 	.word	0x000061e5

0000057c <gpio_pin_set>:
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     57c:	6843      	ldr	r3, [r0, #4]
{
     57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     582:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
     584:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     586:	2501      	movs	r5, #1
     588:	408d      	lsls	r5, r1
     58a:	421d      	tst	r5, r3
{
     58c:	4604      	mov	r4, r0
     58e:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     590:	d10e      	bne.n	5b0 <gpio_pin_set+0x34>
     592:	4919      	ldr	r1, [pc, #100]	; (5f8 <gpio_pin_set+0x7c>)
     594:	4a19      	ldr	r2, [pc, #100]	; (5fc <gpio_pin_set+0x80>)
     596:	481a      	ldr	r0, [pc, #104]	; (600 <gpio_pin_set+0x84>)
     598:	f240 33ea 	movw	r3, #1002	; 0x3ea
     59c:	f005 f8a1 	bl	56e2 <printk>
     5a0:	4818      	ldr	r0, [pc, #96]	; (604 <gpio_pin_set+0x88>)
     5a2:	f005 f89e 	bl	56e2 <printk>
     5a6:	4815      	ldr	r0, [pc, #84]	; (5fc <gpio_pin_set+0x80>)
     5a8:	f240 31ea 	movw	r1, #1002	; 0x3ea
     5ac:	f005 f9a4 	bl	58f8 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     5b0:	683b      	ldr	r3, [r7, #0]
     5b2:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     5b4:	6863      	ldr	r3, [r4, #4]
     5b6:	681b      	ldr	r3, [r3, #0]
		value = (value != 0) ? 0 : 1;
     5b8:	bf1c      	itt	ne
     5ba:	fab6 f686 	clzne	r6, r6
     5be:	0976      	lsrne	r6, r6, #5
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     5c0:	421d      	tst	r5, r3
     5c2:	d10e      	bne.n	5e2 <gpio_pin_set+0x66>
     5c4:	490c      	ldr	r1, [pc, #48]	; (5f8 <gpio_pin_set+0x7c>)
     5c6:	4a0d      	ldr	r2, [pc, #52]	; (5fc <gpio_pin_set+0x80>)
     5c8:	480d      	ldr	r0, [pc, #52]	; (600 <gpio_pin_set+0x84>)
     5ca:	f44f 7370 	mov.w	r3, #960	; 0x3c0
     5ce:	f005 f888 	bl	56e2 <printk>
     5d2:	480c      	ldr	r0, [pc, #48]	; (604 <gpio_pin_set+0x88>)
     5d4:	f005 f885 	bl	56e2 <printk>
     5d8:	4808      	ldr	r0, [pc, #32]	; (5fc <gpio_pin_set+0x80>)
     5da:	f44f 7170 	mov.w	r1, #960	; 0x3c0
     5de:	f005 f98b 	bl	58f8 <assert_post_action>
	if (value != 0)	{
     5e2:	b136      	cbz	r6, 5f2 <gpio_pin_set+0x76>
	return api->port_set_bits_raw(port, pins);
     5e4:	68a3      	ldr	r3, [r4, #8]
     5e6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     5e8:	4629      	mov	r1, r5
     5ea:	4620      	mov	r0, r4
	}

	return gpio_pin_set_raw(port, pin, value);
}
     5ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
     5f0:	4718      	bx	r3
     5f2:	68a3      	ldr	r3, [r4, #8]
     5f4:	691b      	ldr	r3, [r3, #16]
     5f6:	e7f7      	b.n	5e8 <gpio_pin_set+0x6c>
     5f8:	000061a7 	.word	0x000061a7
     5fc:	00005f3a 	.word	0x00005f3a
     600:	00005fa5 	.word	0x00005fa5
     604:	000061e5 	.word	0x000061e5

00000608 <uart_out>:
  }
}

/* Thread 3 */
void uart_out(void)
{
     608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int cnt = 1;
  printk("Serial feedback thread started\n");
     60a:	480c      	ldr	r0, [pc, #48]	; (63c <uart_out+0x34>)
  
  while (1) {
    printk("Toggle USR1 LED1: Counter = %d\n", cnt);
     60c:	4e0c      	ldr	r6, [pc, #48]	; (640 <uart_out+0x38>)
    if (cnt >= 10) {
          
            printk("Toggle USR2 LED2: Counter = %d\n", cnt);
     60e:	4f0d      	ldr	r7, [pc, #52]	; (644 <uart_out+0x3c>)
            cnt = 0;
    }
    k_msleep(100);
    cnt++;
    thread3_flag = 1;
     610:	4d0d      	ldr	r5, [pc, #52]	; (648 <uart_out+0x40>)
  printk("Serial feedback thread started\n");
     612:	f005 f866 	bl	56e2 <printk>
  int cnt = 1;
     616:	2401      	movs	r4, #1
    printk("Toggle USR1 LED1: Counter = %d\n", cnt);
     618:	4621      	mov	r1, r4
     61a:	4630      	mov	r0, r6
     61c:	f005 f861 	bl	56e2 <printk>
    if (cnt >= 10) {
     620:	2c09      	cmp	r4, #9
     622:	dd04      	ble.n	62e <uart_out+0x26>
            printk("Toggle USR2 LED2: Counter = %d\n", cnt);
     624:	4621      	mov	r1, r4
     626:	4638      	mov	r0, r7
     628:	f005 f85b 	bl	56e2 <printk>
            cnt = 0;
     62c:	2400      	movs	r4, #0
    k_msleep(100);
     62e:	2064      	movs	r0, #100	; 0x64
     630:	f005 f81e 	bl	5670 <k_msleep>
    thread3_flag = 1;
     634:	2301      	movs	r3, #1
    cnt++;
     636:	3401      	adds	r4, #1
    thread3_flag = 1;
     638:	702b      	strb	r3, [r5, #0]
    printk("Toggle USR1 LED1: Counter = %d\n", cnt);
     63a:	e7ed      	b.n	618 <uart_out+0x10>
     63c:	000061f7 	.word	0x000061f7
     640:	00006217 	.word	0x00006217
     644:	00006237 	.word	0x00006237
     648:	200007af 	.word	0x200007af

0000064c <wdt_callback>:
{
     64c:	b510      	push	{r4, lr}
	if (handled_event) {
     64e:	4c06      	ldr	r4, [pc, #24]	; (668 <wdt_callback+0x1c>)
     650:	7822      	ldrb	r2, [r4, #0]
     652:	b93a      	cbnz	r2, 664 <wdt_callback+0x18>
static inline int z_impl_wdt_feed(const struct device *dev, int channel_id)
{
	const struct wdt_driver_api *api =
		(const struct wdt_driver_api *)dev->api;

	return api->feed(dev, channel_id);
     654:	6883      	ldr	r3, [r0, #8]
     656:	68db      	ldr	r3, [r3, #12]
     658:	4798      	blx	r3
	printk("Handled things..ready to reset using watchdog\n");
     65a:	4804      	ldr	r0, [pc, #16]	; (66c <wdt_callback+0x20>)
     65c:	f005 f841 	bl	56e2 <printk>
	handled_event = true;
     660:	2301      	movs	r3, #1
     662:	7023      	strb	r3, [r4, #0]
}
     664:	bd10      	pop	{r4, pc}
     666:	bf00      	nop
     668:	200007ac 	.word	0x200007ac
     66c:	00006257 	.word	0x00006257

00000670 <button_read>:
  }
}

/* Thread 4 */
void button_read(void)
{
     670:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     674:	4836      	ldr	r0, [pc, #216]	; (750 <button_read+0xe0>)
     676:	f003 f90b 	bl	3890 <z_impl_device_get_binding>
  int ret;
  static bool thread_is_running=1;

  const struct device *button;
  button = device_get_binding(SW0_GPIO_LABEL);
  if (button == NULL) {
     67a:	4604      	mov	r4, r0
     67c:	b930      	cbnz	r0, 68c <button_read+0x1c>
          printk("Error: didn't find %s device\n", SW0_GPIO_LABEL);
     67e:	4934      	ldr	r1, [pc, #208]	; (750 <button_read+0xe0>)
     680:	4834      	ldr	r0, [pc, #208]	; (754 <button_read+0xe4>)
     682:	f005 f82e 	bl	56e2 <printk>
      }
      k_msleep(250); // debounce
    }
    k_msleep(50);
  }
}
     686:	b002      	add	sp, #8
     688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ret = gpio_pin_configure(button, SW0_GPIO_PIN, SW0_GPIO_FLAGS);
     68c:	210d      	movs	r1, #13
     68e:	f240 1211 	movw	r2, #273	; 0x111
     692:	f7ff ff3f 	bl	514 <gpio_pin_configure>
  if (ret != 0) {
     696:	4601      	mov	r1, r0
     698:	b128      	cbz	r0, 6a6 <button_read+0x36>
          printk("Error %d: failed to configure %s pin %d\n",
     69a:	4a2d      	ldr	r2, [pc, #180]	; (750 <button_read+0xe0>)
     69c:	482e      	ldr	r0, [pc, #184]	; (758 <button_read+0xe8>)
     69e:	230d      	movs	r3, #13
    printk("Error %d: failed to configure interrupt on %s pin %d\n",
     6a0:	f005 f81f 	bl	56e2 <printk>
    return;
     6a4:	e7ef      	b.n	686 <button_read+0x16>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
     6a6:	210d      	movs	r1, #13
     6a8:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
     6ac:	4620      	mov	r0, r4
     6ae:	f7ff fe9b 	bl	3e8 <z_impl_gpio_pin_interrupt_configure>
  if (ret != 0) {
     6b2:	4601      	mov	r1, r0
     6b4:	b118      	cbz	r0, 6be <button_read+0x4e>
    printk("Error %d: failed to configure interrupt on %s pin %d\n",
     6b6:	4a26      	ldr	r2, [pc, #152]	; (750 <button_read+0xe0>)
     6b8:	4828      	ldr	r0, [pc, #160]	; (75c <button_read+0xec>)
     6ba:	230d      	movs	r3, #13
     6bc:	e7f0      	b.n	6a0 <button_read+0x30>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     6be:	4928      	ldr	r1, [pc, #160]	; (760 <button_read+0xf0>)
     6c0:	4b28      	ldr	r3, [pc, #160]	; (764 <button_read+0xf4>)
     6c2:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     6c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     6c8:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     6ca:	68a3      	ldr	r3, [r4, #8]
     6cc:	69db      	ldr	r3, [r3, #28]
     6ce:	b113      	cbz	r3, 6d6 <button_read+0x66>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     6d0:	2201      	movs	r2, #1
     6d2:	4620      	mov	r0, r4
     6d4:	4798      	blx	r3
  printk("Button thread running\n");
     6d6:	4824      	ldr	r0, [pc, #144]	; (768 <button_read+0xf8>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     6d8:	4d24      	ldr	r5, [pc, #144]	; (76c <button_read+0xfc>)
     6da:	4e25      	ldr	r6, [pc, #148]	; (770 <button_read+0x100>)
     6dc:	4f25      	ldr	r7, [pc, #148]	; (774 <button_read+0x104>)
     6de:	f005 f800 	bl	56e2 <printk>
     6e2:	6863      	ldr	r3, [r4, #4]
     6e4:	681b      	ldr	r3, [r3, #0]
     6e6:	049a      	lsls	r2, r3, #18
     6e8:	d40e      	bmi.n	708 <button_read+0x98>
     6ea:	4631      	mov	r1, r6
     6ec:	f240 339e 	movw	r3, #926	; 0x39e
     6f0:	462a      	mov	r2, r5
     6f2:	4638      	mov	r0, r7
     6f4:	f004 fff5 	bl	56e2 <printk>
     6f8:	481f      	ldr	r0, [pc, #124]	; (778 <button_read+0x108>)
     6fa:	f004 fff2 	bl	56e2 <printk>
     6fe:	f240 319e 	movw	r1, #926	; 0x39e
     702:	4628      	mov	r0, r5
     704:	f005 f8f8 	bl	58f8 <assert_post_action>
	const struct gpio_driver_data *const data =
     708:	f8d4 800c 	ldr.w	r8, [r4, #12]
	return api->port_get_raw(port, value);
     70c:	68a3      	ldr	r3, [r4, #8]
     70e:	a901      	add	r1, sp, #4
     710:	685b      	ldr	r3, [r3, #4]
     712:	4620      	mov	r0, r4
     714:	4798      	blx	r3
	if (ret == 0) {
     716:	b928      	cbnz	r0, 724 <button_read+0xb4>
		*value ^= data->invert;
     718:	f8d8 2000 	ldr.w	r2, [r8]
     71c:	9b01      	ldr	r3, [sp, #4]
     71e:	4053      	eors	r3, r2
    if(val) // if button is pressed; suspend or resume thread
     720:	049b      	lsls	r3, r3, #18
     722:	d50c      	bpl.n	73e <button_read+0xce>
      if(thread_is_running) {
     724:	4b15      	ldr	r3, [pc, #84]	; (77c <button_read+0x10c>)
     726:	4916      	ldr	r1, [pc, #88]	; (780 <button_read+0x110>)
     728:	781a      	ldrb	r2, [r3, #0]
     72a:	b162      	cbz	r2, 746 <button_read+0xd6>
        button_flag=0;
     72c:	2200      	movs	r2, #0
       printk("Stopped thread\n");
     72e:	4815      	ldr	r0, [pc, #84]	; (784 <button_read+0x114>)
        button_flag=0;
     730:	700a      	strb	r2, [r1, #0]
        thread_is_running=0;
     732:	701a      	strb	r2, [r3, #0]
        printk("Resumed thread\n");
     734:	f004 ffd5 	bl	56e2 <printk>
      k_msleep(250); // debounce
     738:	20fa      	movs	r0, #250	; 0xfa
     73a:	f004 ff99 	bl	5670 <k_msleep>
    k_msleep(50);
     73e:	2032      	movs	r0, #50	; 0x32
     740:	f004 ff96 	bl	5670 <k_msleep>
  while(1){
     744:	e7cd      	b.n	6e2 <button_read+0x72>
        button_flag=1;
     746:	2201      	movs	r2, #1
        printk("Resumed thread\n");
     748:	480f      	ldr	r0, [pc, #60]	; (788 <button_read+0x118>)
        button_flag=1;
     74a:	700a      	strb	r2, [r1, #0]
        thread_is_running=1;
     74c:	701a      	strb	r2, [r3, #0]
        printk("Resumed thread\n");
     74e:	e7f1      	b.n	734 <button_read+0xc4>
     750:	00006286 	.word	0x00006286
     754:	0000628d 	.word	0x0000628d
     758:	000062ab 	.word	0x000062ab
     75c:	000062d4 	.word	0x000062d4
     760:	200005d0 	.word	0x200005d0
     764:	000003d1 	.word	0x000003d1
     768:	0000630a 	.word	0x0000630a
     76c:	00005f3a 	.word	0x00005f3a
     770:	000061a7 	.word	0x000061a7
     774:	00005fa5 	.word	0x00005fa5
     778:	000061e5 	.word	0x000061e5
     77c:	2000001d 	.word	0x2000001d
     780:	2000001c 	.word	0x2000001c
     784:	00006321 	.word	0x00006321
     788:	00006331 	.word	0x00006331

0000078c <blink0>:
{
     78c:	b570      	push	{r4, r5, r6, lr}
     78e:	480e      	ldr	r0, [pc, #56]	; (7c8 <blink0+0x3c>)
    thread1_flag = 1;
     790:	4e0e      	ldr	r6, [pc, #56]	; (7cc <blink0+0x40>)
     792:	f003 f87d 	bl	3890 <z_impl_device_get_binding>
  gpio_pin_configure(gpio_dev, led0.gpio_pin, led0.gpio_flags);
     796:	f240 2201 	movw	r2, #513	; 0x201
     79a:	2111      	movs	r1, #17
     79c:	4605      	mov	r5, r0
     79e:	f7ff feb9 	bl	514 <gpio_pin_configure>
  printk("Blink0 thread started\n");
     7a2:	480b      	ldr	r0, [pc, #44]	; (7d0 <blink0+0x44>)
     7a4:	f004 ff9d 	bl	56e2 <printk>
  int cnt = 0;
     7a8:	2400      	movs	r4, #0
    gpio_pin_set(gpio_dev, led0.gpio_pin, (cnt + 1) % 2);
     7aa:	3401      	adds	r4, #1
     7ac:	f004 0201 	and.w	r2, r4, #1
     7b0:	bf48      	it	mi
     7b2:	4252      	negmi	r2, r2
     7b4:	2111      	movs	r1, #17
     7b6:	4628      	mov	r0, r5
     7b8:	f7ff fee0 	bl	57c <gpio_pin_set>
    k_msleep(100);
     7bc:	2064      	movs	r0, #100	; 0x64
     7be:	f004 ff57 	bl	5670 <k_msleep>
    thread1_flag = 1;
     7c2:	2301      	movs	r3, #1
     7c4:	7033      	strb	r3, [r6, #0]
  while (1) {
     7c6:	e7f0      	b.n	7aa <blink0+0x1e>
     7c8:	00006286 	.word	0x00006286
     7cc:	200007ad 	.word	0x200007ad
     7d0:	00006341 	.word	0x00006341

000007d4 <blink1>:
{
     7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     7d8:	4814      	ldr	r0, [pc, #80]	; (82c <CONFIG_ISR_STACK_SIZE+0x2c>)
    if(button_flag)   // if button is pressed disable/enable thread running (led and thread flag)
     7da:	4f15      	ldr	r7, [pc, #84]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
      thread2_flag = 1;}
     7dc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 838 <CONFIG_ISR_STACK_SIZE+0x38>
     7e0:	f003 f856 	bl	3890 <z_impl_device_get_binding>
  gpio_pin_configure(gpio_dev, led1.gpio_pin, led1.gpio_flags);
     7e4:	f240 2201 	movw	r2, #513	; 0x201
     7e8:	2112      	movs	r1, #18
     7ea:	4605      	mov	r5, r0
     7ec:	f7ff fe92 	bl	514 <gpio_pin_configure>
  printk("Blink1 thread started\n");
     7f0:	4810      	ldr	r0, [pc, #64]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     7f2:	f004 ff76 	bl	56e2 <printk>
  int cnt = 0;
     7f6:	2400      	movs	r4, #0
    if(button_flag)   // if button is pressed disable/enable thread running (led and thread flag)
     7f8:	783b      	ldrb	r3, [r7, #0]
     7fa:	b193      	cbz	r3, 822 <CONFIG_ISR_STACK_SIZE+0x22>
      gpio_pin_set(gpio_dev, led1.gpio_pin, (cnt + 1) % 2);
     7fc:	3401      	adds	r4, #1
     7fe:	f004 0201 	and.w	r2, r4, #1
     802:	bf48      	it	mi
     804:	4252      	negmi	r2, r2
     806:	2112      	movs	r1, #18
     808:	4628      	mov	r0, r5
     80a:	f7ff feb7 	bl	57c <gpio_pin_set>
     80e:	2608      	movs	r6, #8
      thread2_flag = 1;}
     810:	f04f 0901 	mov.w	r9, #1
      {k_msleep(100);
     814:	2064      	movs	r0, #100	; 0x64
     816:	f004 ff2b 	bl	5670 <k_msleep>
      for(int i=0; i<8; i++)
     81a:	3e01      	subs	r6, #1
      thread2_flag = 1;}
     81c:	f888 9000 	strb.w	r9, [r8]
      for(int i=0; i<8; i++)
     820:	d1f8      	bne.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
    k_msleep(100);
     822:	2064      	movs	r0, #100	; 0x64
     824:	f004 ff24 	bl	5670 <k_msleep>
    if(button_flag)   // if button is pressed disable/enable thread running (led and thread flag)
     828:	e7e6      	b.n	7f8 <blink1+0x24>
     82a:	bf00      	nop
     82c:	00006286 	.word	0x00006286
     830:	2000001c 	.word	0x2000001c
     834:	00006358 	.word	0x00006358
     838:	200007ae 	.word	0x200007ae

0000083c <watchdog>:

/* Thread 5 */
void watchdog(void)
{
     83c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint32_t rr = NRF_POWER->RESETREAS; // Read reset reason
     840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    printk("Reset reasons:");
     844:	4839      	ldr	r0, [pc, #228]	; (92c <watchdog+0xf0>)
    uint32_t rr = NRF_POWER->RESETREAS; // Read reset reason
     846:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    printk("Reset reasons:");
     84a:	f004 ff4a 	bl	56e2 <printk>
    if (0 == rr)
     84e:	b99c      	cbnz	r4, 878 <watchdog+0x3c>
        printk("- NONE\n");
     850:	4837      	ldr	r0, [pc, #220]	; (930 <watchdog+0xf4>)
        printk("- Reset from powerup\n");
     852:	f004 ff46 	bl	56e2 <printk>
    NRF_POWER->RESETREAS = 0xffffffff;  // Clear the flag
     856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     85a:	f04f 32ff 	mov.w	r2, #4294967295
     85e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
     862:	4834      	ldr	r0, [pc, #208]	; (934 <watchdog+0xf8>)
     864:	f003 f814 	bl	3890 <z_impl_device_get_binding>
  struct wdt_timeout_cfg wdt_config;

  print_reset_reason(); // read RESETREAS and print cause

  wdt = device_get_binding(WDT_DEV_NAME);
  if (!wdt) {
     868:	4604      	mov	r4, r0
     86a:	b9b0      	cbnz	r0, 89a <watchdog+0x5e>
          printk("Cannot get WDT device\n");
     86c:	4832      	ldr	r0, [pc, #200]	; (938 <watchdog+0xfc>)
    return;
  }

  err = wdt_setup(wdt, 0);
  if (err < 0) {
    printk("Watchdog setup error\n");
     86e:	f004 ff38 	bl	56e2 <printk>
       thread1_flag = 0;  // Reset run flags
       thread2_flag = 0;
       thread3_flag = 0;
    }
  }
}
     872:	b004      	add	sp, #16
     874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (0 != (rr & NRF_POWER_RESETREAS_RESETPIN_MASK))
     878:	07e1      	lsls	r1, r4, #31
     87a:	d502      	bpl.n	882 <watchdog+0x46>
        printk("- Reset from pin\n");
     87c:	482f      	ldr	r0, [pc, #188]	; (93c <watchdog+0x100>)
     87e:	f004 ff30 	bl	56e2 <printk>
    if (0 != (rr & NRF_POWER_RESETREAS_DOG_MASK     ))
     882:	07a2      	lsls	r2, r4, #30
     884:	d502      	bpl.n	88c <watchdog+0x50>
        printk("- Reset from pin WDT\n");
     886:	482e      	ldr	r0, [pc, #184]	; (940 <watchdog+0x104>)
     888:	f004 ff2b 	bl	56e2 <printk>
    if (0 != (rr & NRF_POWER_RESETREAS_SREQ_MASK    ))
     88c:	0763      	lsls	r3, r4, #29
     88e:	d5e2      	bpl.n	856 <watchdog+0x1a>
        printk("- Reset from software\n");
     890:	482c      	ldr	r0, [pc, #176]	; (944 <watchdog+0x108>)
     892:	f004 ff26 	bl	56e2 <printk>
        printk("- Reset from powerup\n");
     896:	482c      	ldr	r0, [pc, #176]	; (948 <watchdog+0x10c>)
     898:	e7db      	b.n	852 <watchdog+0x16>
  wdt_config.flags = WDT_FLAG_RESET_SOC;
     89a:	2302      	movs	r3, #2
  wdt_config.window.max = 500U;
     89c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  printk("WDT timeout = %dms\n", wdt_config.window.max);
     8a0:	482a      	ldr	r0, [pc, #168]	; (94c <watchdog+0x110>)
  wdt_config.flags = WDT_FLAG_RESET_SOC;
     8a2:	f88d 300c 	strb.w	r3, [sp, #12]
  wdt_config.window.max = 500U;
     8a6:	2600      	movs	r6, #0
     8a8:	e9cd 6100 	strd	r6, r1, [sp]
  printk("WDT timeout = %dms\n", wdt_config.window.max);
     8ac:	f004 ff19 	bl	56e2 <printk>
  wdt_config.callback = wdt_callback;
     8b0:	4b27      	ldr	r3, [pc, #156]	; (950 <watchdog+0x114>)
     8b2:	9302      	str	r3, [sp, #8]
	return api->install_timeout(dev, cfg);
     8b4:	68a3      	ldr	r3, [r4, #8]
     8b6:	4669      	mov	r1, sp
     8b8:	689b      	ldr	r3, [r3, #8]
     8ba:	4620      	mov	r0, r4
     8bc:	4798      	blx	r3
  if (wdt_channel_id == -ENOTSUP) {
     8be:	f110 0f23 	cmn.w	r0, #35	; 0x23
     8c2:	4605      	mov	r5, r0
     8c4:	d106      	bne.n	8d4 <watchdog+0x98>
     8c6:	68a3      	ldr	r3, [r4, #8]
    wdt_config.callback = NULL;
     8c8:	9602      	str	r6, [sp, #8]
     8ca:	689b      	ldr	r3, [r3, #8]
     8cc:	4669      	mov	r1, sp
     8ce:	4620      	mov	r0, r4
     8d0:	4798      	blx	r3
     8d2:	4605      	mov	r5, r0
  if (wdt_channel_id < 0) {
     8d4:	2d00      	cmp	r5, #0
     8d6:	da01      	bge.n	8dc <watchdog+0xa0>
    printk("Watchdog install error\n");
     8d8:	481e      	ldr	r0, [pc, #120]	; (954 <watchdog+0x118>)
     8da:	e7c8      	b.n	86e <watchdog+0x32>
	return api->setup(dev, options);
     8dc:	68a3      	ldr	r3, [r4, #8]
     8de:	2100      	movs	r1, #0
     8e0:	681b      	ldr	r3, [r3, #0]
     8e2:	4620      	mov	r0, r4
     8e4:	4798      	blx	r3
  if (err < 0) {
     8e6:	2800      	cmp	r0, #0
     8e8:	da01      	bge.n	8ee <watchdog+0xb2>
    printk("Watchdog setup error\n");
     8ea:	481b      	ldr	r0, [pc, #108]	; (958 <watchdog+0x11c>)
     8ec:	e7bf      	b.n	86e <watchdog+0x32>
  printk("Watchdog thread started\n");
     8ee:	481b      	ldr	r0, [pc, #108]	; (95c <watchdog+0x120>)
    if(thread1_flag && thread2_flag && thread3_flag) // Check run flags
     8f0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 968 <watchdog+0x12c>
     8f4:	4f1a      	ldr	r7, [pc, #104]	; (960 <watchdog+0x124>)
     8f6:	4e1b      	ldr	r6, [pc, #108]	; (964 <watchdog+0x128>)
  printk("Watchdog thread started\n");
     8f8:	f004 fef3 	bl	56e2 <printk>
    k_msleep(50);
     8fc:	2032      	movs	r0, #50	; 0x32
     8fe:	f004 feb7 	bl	5670 <k_msleep>
    if(thread1_flag && thread2_flag && thread3_flag) // Check run flags
     902:	f898 3000 	ldrb.w	r3, [r8]
     906:	2b00      	cmp	r3, #0
     908:	d0f8      	beq.n	8fc <watchdog+0xc0>
     90a:	783b      	ldrb	r3, [r7, #0]
     90c:	2b00      	cmp	r3, #0
     90e:	d0f5      	beq.n	8fc <watchdog+0xc0>
     910:	7833      	ldrb	r3, [r6, #0]
     912:	2b00      	cmp	r3, #0
     914:	d0f2      	beq.n	8fc <watchdog+0xc0>
	return api->feed(dev, channel_id);
     916:	68a3      	ldr	r3, [r4, #8]
     918:	4629      	mov	r1, r5
     91a:	68db      	ldr	r3, [r3, #12]
     91c:	4620      	mov	r0, r4
     91e:	4798      	blx	r3
       thread1_flag = 0;  // Reset run flags
     920:	2300      	movs	r3, #0
     922:	f888 3000 	strb.w	r3, [r8]
       thread2_flag = 0;
     926:	703b      	strb	r3, [r7, #0]
       thread3_flag = 0;
     928:	7033      	strb	r3, [r6, #0]
     92a:	e7e7      	b.n	8fc <watchdog+0xc0>
     92c:	0000636f 	.word	0x0000636f
     930:	0000637e 	.word	0x0000637e
     934:	000063db 	.word	0x000063db
     938:	000063df 	.word	0x000063df
     93c:	00006386 	.word	0x00006386
     940:	00006398 	.word	0x00006398
     944:	000063ae 	.word	0x000063ae
     948:	000063c5 	.word	0x000063c5
     94c:	000063f6 	.word	0x000063f6
     950:	0000064d 	.word	0x0000064d
     954:	0000640a 	.word	0x0000640a
     958:	00006422 	.word	0x00006422
     95c:	00006438 	.word	0x00006438
     960:	200007ae 	.word	0x200007ae
     964:	200007af 	.word	0x200007af
     968:	200007ad 	.word	0x200007ad

0000096c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     96c:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     96e:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     970:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
     972:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
     976:	2c03      	cmp	r4, #3
{
     978:	4605      	mov	r5, r0
	switch (method) {
     97a:	d002      	beq.n	982 <sys_notify_finalize+0x16>
     97c:	b12c      	cbz	r4, 98a <sys_notify_finalize+0x1e>
     97e:	2000      	movs	r0, #0
     980:	e000      	b.n	984 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     982:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     984:	2300      	movs	r3, #0
     986:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     988:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
     98a:	4a05      	ldr	r2, [pc, #20]	; (9a0 <sys_notify_finalize+0x34>)
     98c:	4905      	ldr	r1, [pc, #20]	; (9a4 <sys_notify_finalize+0x38>)
     98e:	4806      	ldr	r0, [pc, #24]	; (9a8 <sys_notify_finalize+0x3c>)
     990:	2345      	movs	r3, #69	; 0x45
     992:	f004 fea6 	bl	56e2 <printk>
     996:	4802      	ldr	r0, [pc, #8]	; (9a0 <sys_notify_finalize+0x34>)
     998:	2145      	movs	r1, #69	; 0x45
     99a:	f004 ffad 	bl	58f8 <assert_post_action>
     99e:	e7ee      	b.n	97e <sys_notify_finalize+0x12>
     9a0:	0000648c 	.word	0x0000648c
     9a4:	0000747a 	.word	0x0000747a
     9a8:	00005fa5 	.word	0x00005fa5

000009ac <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
     9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9b0:	b087      	sub	sp, #28
     9b2:	460f      	mov	r7, r1
     9b4:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
     9b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
     9b8:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
     9bc:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
     9c0:	4c1f      	ldr	r4, [pc, #124]	; (a40 <print_digits+0x94>)
{
     9c2:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     9c4:	2514      	movs	r5, #20
{
     9c6:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
     9c8:	4698      	mov	r8, r3
     9ca:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     9ce:	ea50 0301 	orrs.w	r3, r0, r1
     9d2:	d119      	bne.n	a08 <print_digits+0x5c>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
     9d4:	2d14      	cmp	r5, #20
		buf[i] = '0';
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     9d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
     9d8:	bf14      	ite	ne
     9da:	3501      	addne	r5, #1
		buf[i] = '0';
     9dc:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     9de:	442c      	add	r4, r5
		buf[i] = '0';
     9e0:	bf08      	it	eq
     9e2:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     9e6:	2c15      	cmp	r4, #21
     9e8:	d01b      	beq.n	a22 <print_digits+0x76>
     9ea:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
     9ec:	2c00      	cmp	r4, #0
     9ee:	dc1a      	bgt.n	a26 <print_digits+0x7a>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
     9f0:	f81d 0005 	ldrb.w	r0, [sp, r5]
     9f4:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
     9f6:	3501      	adds	r5, #1
		out(buf[i], ctx);
     9f8:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
     9fa:	2d15      	cmp	r5, #21
     9fc:	d1f8      	bne.n	9f0 <print_digits+0x44>
	}
	for (/**/; pad > 0; pad--) {
     9fe:	2c00      	cmp	r4, #0
     a00:	dc19      	bgt.n	a36 <print_digits+0x8a>
		out(pad_char, ctx);
	}
}
     a02:	b007      	add	sp, #28
     a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
     a08:	4642      	mov	r2, r8
     a0a:	464b      	mov	r3, r9
     a0c:	f7ff fb66 	bl	dc <__aeabi_uldivmod>
     a10:	5ca2      	ldrb	r2, [r4, r2]
     a12:	f80d 2005 	strb.w	r2, [sp, r5]
     a16:	4684      	mov	ip, r0
     a18:	460b      	mov	r3, r1
		num /= base;
     a1a:	4660      	mov	r0, ip
     a1c:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     a1e:	3d01      	subs	r5, #1
     a20:	e7d5      	b.n	9ce <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     a22:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
     a24:	e7e4      	b.n	9f0 <print_digits+0x44>
	for (/**/; pad > 0 && pad_before; pad--) {
     a26:	f1bb 0f00 	cmp.w	fp, #0
     a2a:	d0e1      	beq.n	9f0 <print_digits+0x44>
		out(pad_char, ctx);
     a2c:	4639      	mov	r1, r7
     a2e:	4650      	mov	r0, sl
     a30:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
     a32:	3c01      	subs	r4, #1
     a34:	e7da      	b.n	9ec <print_digits+0x40>
		out(pad_char, ctx);
     a36:	4639      	mov	r1, r7
     a38:	4650      	mov	r0, sl
     a3a:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
     a3c:	3c01      	subs	r4, #1
     a3e:	e7de      	b.n	9fe <print_digits+0x52>
     a40:	000064af 	.word	0x000064af

00000a44 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     a44:	680b      	ldr	r3, [r1, #0]
     a46:	3301      	adds	r3, #1
     a48:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     a4a:	4b01      	ldr	r3, [pc, #4]	; (a50 <char_out+0xc>)
     a4c:	681b      	ldr	r3, [r3, #0]
     a4e:	4718      	bx	r3
     a50:	20000000 	.word	0x20000000

00000a54 <__printk_hook_install>:
	_char_out = fn;
     a54:	4b01      	ldr	r3, [pc, #4]	; (a5c <__printk_hook_install+0x8>)
     a56:	6018      	str	r0, [r3, #0]
}
     a58:	4770      	bx	lr
     a5a:	bf00      	nop
     a5c:	20000000 	.word	0x20000000

00000a60 <z_vprintk>:
{
     a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
     a64:	2600      	movs	r6, #0
{
     a66:	b087      	sub	sp, #28
     a68:	4605      	mov	r5, r0
     a6a:	468b      	mov	fp, r1
     a6c:	461c      	mov	r4, r3
	while (*fmt) {
     a6e:	f102 3aff 	add.w	sl, r2, #4294967295
	int min_width = -1;
     a72:	f04f 38ff 	mov.w	r8, #4294967295
	enum pad_type padding = PAD_NONE;
     a76:	4637      	mov	r7, r6
			might_format = 0;
     a78:	f04f 0900 	mov.w	r9, #0
					break;
     a7c:	e007      	b.n	a8e <z_vprintk+0x2e>
		if (!might_format) {
     a7e:	f1b9 0f00 	cmp.w	r9, #0
     a82:	d10b      	bne.n	a9c <z_vprintk+0x3c>
			if (*fmt != '%') {
     a84:	2825      	cmp	r0, #37	; 0x25
     a86:	f000 810a 	beq.w	c9e <z_vprintk+0x23e>
				out((int)*fmt, ctx);
     a8a:	4659      	mov	r1, fp
     a8c:	47a8      	blx	r5
	while (*fmt) {
     a8e:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
     a92:	2800      	cmp	r0, #0
     a94:	d1f3      	bne.n	a7e <z_vprintk+0x1e>
}
     a96:	b007      	add	sp, #28
     a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     a9c:	287a      	cmp	r0, #122	; 0x7a
     a9e:	d80a      	bhi.n	ab6 <z_vprintk+0x56>
     aa0:	2862      	cmp	r0, #98	; 0x62
     aa2:	d810      	bhi.n	ac6 <z_vprintk+0x66>
     aa4:	2830      	cmp	r0, #48	; 0x30
     aa6:	d051      	beq.n	b4c <z_vprintk+0xec>
     aa8:	d844      	bhi.n	b34 <z_vprintk+0xd4>
     aaa:	2825      	cmp	r0, #37	; 0x25
     aac:	f000 80f5 	beq.w	c9a <z_vprintk+0x23a>
     ab0:	282d      	cmp	r0, #45	; 0x2d
     ab2:	f000 80fb 	beq.w	cac <z_vprintk+0x24c>
					out((int)'%', ctx);
     ab6:	4659      	mov	r1, fp
     ab8:	2025      	movs	r0, #37	; 0x25
     aba:	47a8      	blx	r5
					out((int)*fmt, ctx);
     abc:	f89a 0000 	ldrb.w	r0, [sl]
     ac0:	4659      	mov	r1, fp
     ac2:	47a8      	blx	r5
     ac4:	e7d8      	b.n	a78 <z_vprintk+0x18>
     ac6:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
     aca:	2b17      	cmp	r3, #23
     acc:	d8f3      	bhi.n	ab6 <z_vprintk+0x56>
     ace:	a201      	add	r2, pc, #4	; (adr r2, ad4 <z_vprintk+0x74>)
     ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ad4:	00000c93 	.word	0x00000c93
     ad8:	00000b95 	.word	0x00000b95
     adc:	00000ab7 	.word	0x00000ab7
     ae0:	00000ab7 	.word	0x00000ab7
     ae4:	00000ab7 	.word	0x00000ab7
     ae8:	00000b77 	.word	0x00000b77
     aec:	00000b95 	.word	0x00000b95
     af0:	00000ab7 	.word	0x00000ab7
     af4:	00000ab7 	.word	0x00000ab7
     af8:	00000b77 	.word	0x00000b77
     afc:	00000ab7 	.word	0x00000ab7
     b00:	00000ab7 	.word	0x00000ab7
     b04:	00000ab7 	.word	0x00000ab7
     b08:	00000c0f 	.word	0x00000c0f
     b0c:	00000ab7 	.word	0x00000ab7
     b10:	00000ab7 	.word	0x00000ab7
     b14:	00000c5b 	.word	0x00000c5b
     b18:	00000ab7 	.word	0x00000ab7
     b1c:	00000b95 	.word	0x00000b95
     b20:	00000ab7 	.word	0x00000ab7
     b24:	00000ab7 	.word	0x00000ab7
     b28:	00000b3d 	.word	0x00000b3d
     b2c:	00000ab7 	.word	0x00000ab7
     b30:	00000b77 	.word	0x00000b77
			switch (*fmt) {
     b34:	2839      	cmp	r0, #57	; 0x39
     b36:	d915      	bls.n	b64 <z_vprintk+0x104>
     b38:	2858      	cmp	r0, #88	; 0x58
     b3a:	d1bc      	bne.n	ab6 <z_vprintk+0x56>
				if (*fmt == 'p') {
     b3c:	f89a 3000 	ldrb.w	r3, [sl]
     b40:	2b70      	cmp	r3, #112	; 0x70
     b42:	d16e      	bne.n	c22 <z_vprintk+0x1c2>
					x = va_arg(ap, unsigned int);
     b44:	f854 2b04 	ldr.w	r2, [r4], #4
     b48:	2300      	movs	r3, #0
     b4a:	e075      	b.n	c38 <z_vprintk+0x1d8>
				if (min_width < 0 && padding == PAD_NONE) {
     b4c:	f1b8 0f00 	cmp.w	r8, #0
     b50:	da0b      	bge.n	b6a <z_vprintk+0x10a>
     b52:	2f00      	cmp	r7, #0
     b54:	f000 80ac 	beq.w	cb0 <z_vprintk+0x250>
					min_width = *fmt - '0';
     b58:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     b5c:	2f00      	cmp	r7, #0
     b5e:	bf08      	it	eq
     b60:	2702      	moveq	r7, #2
     b62:	e794      	b.n	a8e <z_vprintk+0x2e>
				if (min_width < 0) {
     b64:	f1b8 0f00 	cmp.w	r8, #0
     b68:	dbf6      	blt.n	b58 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
     b6a:	230a      	movs	r3, #10
     b6c:	fb03 0808 	mla	r8, r3, r8, r0
     b70:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
     b74:	e7f2      	b.n	b5c <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
     b76:	2868      	cmp	r0, #104	; 0x68
     b78:	d103      	bne.n	b82 <z_vprintk+0x122>
     b7a:	2e68      	cmp	r6, #104	; 0x68
     b7c:	d106      	bne.n	b8c <z_vprintk+0x12c>
					length_mod = 'H';
     b7e:	2648      	movs	r6, #72	; 0x48
     b80:	e785      	b.n	a8e <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
     b82:	286c      	cmp	r0, #108	; 0x6c
     b84:	d102      	bne.n	b8c <z_vprintk+0x12c>
     b86:	2e6c      	cmp	r6, #108	; 0x6c
     b88:	f000 8094 	beq.w	cb4 <z_vprintk+0x254>
				} else if (length_mod == 0) {
     b8c:	2e00      	cmp	r6, #0
     b8e:	d192      	bne.n	ab6 <z_vprintk+0x56>
     b90:	4606      	mov	r6, r0
     b92:	e77c      	b.n	a8e <z_vprintk+0x2e>
				if (length_mod == 'z') {
     b94:	2e7a      	cmp	r6, #122	; 0x7a
     b96:	d106      	bne.n	ba6 <z_vprintk+0x146>
					d = va_arg(ap, long);
     b98:	46a1      	mov	r9, r4
     b9a:	f859 2b04 	ldr.w	r2, [r9], #4
     b9e:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
     ba0:	2875      	cmp	r0, #117	; 0x75
     ba2:	d123      	bne.n	bec <z_vprintk+0x18c>
     ba4:	e00f      	b.n	bc6 <z_vprintk+0x166>
				} else if (length_mod == 'l') {
     ba6:	2e6c      	cmp	r6, #108	; 0x6c
     ba8:	d0f6      	beq.n	b98 <z_vprintk+0x138>
				} else if (length_mod == 'L') {
     baa:	2e4c      	cmp	r6, #76	; 0x4c
     bac:	d105      	bne.n	bba <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
     bae:	3407      	adds	r4, #7
     bb0:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
     bb4:	e8f9 2302 	ldrd	r2, r3, [r9], #8
     bb8:	e7f2      	b.n	ba0 <z_vprintk+0x140>
				} else if (*fmt == 'u') {
     bba:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
     bbc:	6822      	ldr	r2, [r4, #0]
     bbe:	f104 0904 	add.w	r9, r4, #4
				} else if (*fmt == 'u') {
     bc2:	d112      	bne.n	bea <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
     bc4:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
     bc6:	1ef8      	subs	r0, r7, #3
     bc8:	bf18      	it	ne
     bca:	2001      	movne	r0, #1
     bcc:	2f01      	cmp	r7, #1
     bce:	bf0c      	ite	eq
     bd0:	2430      	moveq	r4, #48	; 0x30
     bd2:	2420      	movne	r4, #32
     bd4:	9001      	str	r0, [sp, #4]
     bd6:	200a      	movs	r0, #10
     bd8:	e9cd 4802 	strd	r4, r8, [sp, #8]
     bdc:	9000      	str	r0, [sp, #0]
     bde:	4659      	mov	r1, fp
     be0:	4628      	mov	r0, r5
     be2:	f7ff fee3 	bl	9ac <print_digits>
}
     be6:	464c      	mov	r4, r9
     be8:	e746      	b.n	a78 <z_vprintk+0x18>
					d = va_arg(ap, int);
     bea:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
     bec:	2a00      	cmp	r2, #0
     bee:	f173 0100 	sbcs.w	r1, r3, #0
     bf2:	dae8      	bge.n	bc6 <z_vprintk+0x166>
					out((int)'-', ctx);
     bf4:	4659      	mov	r1, fp
     bf6:	202d      	movs	r0, #45	; 0x2d
     bf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
     bfc:	47a8      	blx	r5
					d = -d;
     bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
     c02:	4252      	negs	r2, r2
     c04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
     c08:	f108 38ff 	add.w	r8, r8, #4294967295
     c0c:	e7db      	b.n	bc6 <z_vprintk+0x166>
				out('0', ctx);
     c0e:	4659      	mov	r1, fp
     c10:	2030      	movs	r0, #48	; 0x30
     c12:	47a8      	blx	r5
				out('x', ctx);
     c14:	4659      	mov	r1, fp
     c16:	2078      	movs	r0, #120	; 0x78
     c18:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
     c1a:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
     c1e:	2701      	movs	r7, #1
     c20:	e78c      	b.n	b3c <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
     c22:	2e6c      	cmp	r6, #108	; 0x6c
     c24:	d08e      	beq.n	b44 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
     c26:	2e4c      	cmp	r6, #76	; 0x4c
     c28:	d18c      	bne.n	b44 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
     c2a:	1de3      	adds	r3, r4, #7
     c2c:	f023 0307 	bic.w	r3, r3, #7
     c30:	461c      	mov	r4, r3
     c32:	685b      	ldr	r3, [r3, #4]
     c34:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
     c38:	1ef8      	subs	r0, r7, #3
     c3a:	bf18      	it	ne
     c3c:	2001      	movne	r0, #1
     c3e:	2f01      	cmp	r7, #1
     c40:	bf0c      	ite	eq
     c42:	2130      	moveq	r1, #48	; 0x30
     c44:	2120      	movne	r1, #32
     c46:	e9cd 1802 	strd	r1, r8, [sp, #8]
     c4a:	2110      	movs	r1, #16
     c4c:	9001      	str	r0, [sp, #4]
     c4e:	9100      	str	r1, [sp, #0]
     c50:	4628      	mov	r0, r5
     c52:	4659      	mov	r1, fp
     c54:	f7ff feaa 	bl	9ac <print_digits>
     c58:	e70e      	b.n	a78 <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
     c5a:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
     c5e:	4699      	mov	r9, r3
     c60:	464a      	mov	r2, r9
     c62:	f819 0b01 	ldrb.w	r0, [r9], #1
     c66:	b978      	cbnz	r0, c88 <z_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
     c68:	2f03      	cmp	r7, #3
     c6a:	d125      	bne.n	cb8 <z_vprintk+0x258>
					int remaining = min_width - (s - start);
     c6c:	eba2 0903 	sub.w	r9, r2, r3
     c70:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
     c74:	f1b9 0f00 	cmp.w	r9, #0
     c78:	f77f aefe 	ble.w	a78 <z_vprintk+0x18>
						out(' ', ctx);
     c7c:	4659      	mov	r1, fp
     c7e:	2020      	movs	r0, #32
     c80:	47a8      	blx	r5
     c82:	f109 39ff 	add.w	r9, r9, #4294967295
     c86:	e7f5      	b.n	c74 <z_vprintk+0x214>
					out((int)(*s++), ctx);
     c88:	4659      	mov	r1, fp
     c8a:	9304      	str	r3, [sp, #16]
     c8c:	47a8      	blx	r5
     c8e:	9b04      	ldr	r3, [sp, #16]
     c90:	e7e6      	b.n	c60 <z_vprintk+0x200>
				out(c, ctx);
     c92:	f854 0b04 	ldr.w	r0, [r4], #4
     c96:	4659      	mov	r1, fp
     c98:	e713      	b.n	ac2 <z_vprintk+0x62>
				out((int)'%', ctx);
     c9a:	4659      	mov	r1, fp
     c9c:	e711      	b.n	ac2 <z_vprintk+0x62>
				length_mod = 0;
     c9e:	464e      	mov	r6, r9
				padding = PAD_NONE;
     ca0:	464f      	mov	r7, r9
				min_width = -1;
     ca2:	f04f 38ff 	mov.w	r8, #4294967295
				might_format = 1;
     ca6:	f04f 0901 	mov.w	r9, #1
     caa:	e6f0      	b.n	a8e <z_vprintk+0x2e>
			switch (*fmt) {
     cac:	2703      	movs	r7, #3
     cae:	e6ee      	b.n	a8e <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
     cb0:	2701      	movs	r7, #1
     cb2:	e6ec      	b.n	a8e <z_vprintk+0x2e>
					length_mod = 'L';
     cb4:	264c      	movs	r6, #76	; 0x4c
     cb6:	e6ea      	b.n	a8e <z_vprintk+0x2e>
			might_format = 0;
     cb8:	4681      	mov	r9, r0
     cba:	e6e8      	b.n	a8e <z_vprintk+0x2e>

00000cbc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     cbc:	b507      	push	{r0, r1, r2, lr}
     cbe:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     cc0:	2100      	movs	r1, #0
{
     cc2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     cc4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
     cc6:	4803      	ldr	r0, [pc, #12]	; (cd4 <vprintk+0x18>)
     cc8:	a901      	add	r1, sp, #4
     cca:	f7ff fec9 	bl	a60 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     cce:	b003      	add	sp, #12
     cd0:	f85d fb04 	ldr.w	pc, [sp], #4
     cd4:	00000a45 	.word	0x00000a45

00000cd8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     cd8:	b530      	push	{r4, r5, lr}
     cda:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     cdc:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     ce0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     ce2:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     ce4:	4805      	ldr	r0, [pc, #20]	; (cfc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     ce6:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     ce8:	a901      	add	r1, sp, #4
     cea:	f7ff feb9 	bl	a60 <z_vprintk>

	if (ctx.count < ctx.max) {
     cee:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     cf2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     cf4:	bfb8      	it	lt
     cf6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     cf8:	b005      	add	sp, #20
     cfa:	bd30      	pop	{r4, r5, pc}
     cfc:	000056bd 	.word	0x000056bd

00000d00 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d04:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
     d08:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     d0a:	f019 0f08 	tst.w	r9, #8
{
     d0e:	4604      	mov	r4, r0
     d10:	9203      	str	r2, [sp, #12]
	if (processing) {
     d12:	d022      	beq.n	d5a <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
     d14:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     d16:	bf0c      	ite	eq
     d18:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     d1c:	f049 0920 	orrne.w	r9, r9, #32
     d20:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     d24:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     d26:	4620      	mov	r0, r4
     d28:	f004 f93c 	bl	4fa4 <z_spin_unlock_valid>
     d2c:	b968      	cbnz	r0, d4a <process_event+0x4a>
     d2e:	4a9f      	ldr	r2, [pc, #636]	; (fac <process_event+0x2ac>)
     d30:	499f      	ldr	r1, [pc, #636]	; (fb0 <process_event+0x2b0>)
     d32:	48a0      	ldr	r0, [pc, #640]	; (fb4 <process_event+0x2b4>)
     d34:	2384      	movs	r3, #132	; 0x84
     d36:	f004 fcd4 	bl	56e2 <printk>
     d3a:	489f      	ldr	r0, [pc, #636]	; (fb8 <process_event+0x2b8>)
     d3c:	4621      	mov	r1, r4
     d3e:	f004 fcd0 	bl	56e2 <printk>
     d42:	489a      	ldr	r0, [pc, #616]	; (fac <process_event+0x2ac>)
     d44:	2184      	movs	r1, #132	; 0x84
     d46:	f004 fdd7 	bl	58f8 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     d4a:	9b03      	ldr	r3, [sp, #12]
     d4c:	f383 8811 	msr	BASEPRI, r3
     d50:	f3bf 8f6f 	isb	sy
}
     d54:	b005      	add	sp, #20
     d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
     d5a:	4f98      	ldr	r7, [pc, #608]	; (fbc <process_event+0x2bc>)
     d5c:	f8df 8254 	ldr.w	r8, [pc, #596]	; fb4 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d60:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     d64:	2902      	cmp	r1, #2
     d66:	d106      	bne.n	d76 <process_event+0x76>
			evt = process_recheck(mgr);
     d68:	4620      	mov	r0, r4
     d6a:	f004 fcd4 	bl	5716 <process_recheck>
		if (evt == EVT_NOP) {
     d6e:	2800      	cmp	r0, #0
     d70:	d0d8      	beq.n	d24 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
     d72:	2801      	cmp	r0, #1
     d74:	d168      	bne.n	e48 <process_event+0x148>
			res = mgr->last_res;
     d76:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d7a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
     d7c:	f1bb 0f00 	cmp.w	fp, #0
     d80:	da0a      	bge.n	d98 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     d82:	2600      	movs	r6, #0
		*clients = mgr->clients;
     d84:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d86:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
     d8a:	e9c4 6600 	strd	r6, r6, [r4]
     d8e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     d92:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
     d94:	9601      	str	r6, [sp, #4]
     d96:	e027      	b.n	de8 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d98:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     d9c:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     d9e:	2901      	cmp	r1, #1
     da0:	d834      	bhi.n	e0c <process_event+0x10c>
	list->head = NULL;
     da2:	2100      	movs	r1, #0
     da4:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
     da8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
     daa:	6825      	ldr	r5, [r4, #0]
     dac:	b29b      	uxth	r3, r3
	list->tail = NULL;
     dae:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     db2:	d10c      	bne.n	dce <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     db4:	428d      	cmp	r5, r1
     db6:	462a      	mov	r2, r5
     db8:	bf38      	it	cc
     dba:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     dbc:	b12a      	cbz	r2, dca <process_event+0xca>
				mgr->refs += 1U;
     dbe:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     dc0:	6812      	ldr	r2, [r2, #0]
     dc2:	3101      	adds	r1, #1
     dc4:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     dc6:	2a00      	cmp	r2, #0
     dc8:	d1f8      	bne.n	dbc <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dca:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     dce:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     dd0:	4620      	mov	r0, r4
     dd2:	f004 fca0 	bl	5716 <process_recheck>
     dd6:	4606      	mov	r6, r0
     dd8:	2800      	cmp	r0, #0
     dda:	d0db      	beq.n	d94 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     ddc:	8ba3      	ldrh	r3, [r4, #28]
     dde:	f043 0320 	orr.w	r3, r3, #32
     de2:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
     de4:	2300      	movs	r3, #0
     de6:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     de8:	8ba3      	ldrh	r3, [r4, #28]
     dea:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     dee:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     df0:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
     df2:	d003      	beq.n	dfc <process_event+0xfc>
		if (do_monitors
     df4:	68a2      	ldr	r2, [r4, #8]
     df6:	2a00      	cmp	r2, #0
     df8:	f040 80f0 	bne.w	fdc <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
     dfc:	b91d      	cbnz	r5, e06 <process_event+0x106>
		    || (transit != NULL)) {
     dfe:	9a01      	ldr	r2, [sp, #4]
     e00:	2a00      	cmp	r2, #0
     e02:	f000 8136 	beq.w	1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
     e06:	f04f 0900 	mov.w	r9, #0
     e0a:	e0e9      	b.n	fe0 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
     e0c:	2a04      	cmp	r2, #4
     e0e:	d10e      	bne.n	e2e <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e10:	f023 0307 	bic.w	r3, r3, #7
     e14:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
     e16:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     e18:	4620      	mov	r0, r4
     e1a:	f004 fc7c 	bl	5716 <process_recheck>
     e1e:	4605      	mov	r5, r0
     e20:	b118      	cbz	r0, e2a <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     e22:	f042 0220 	orr.w	r2, r2, #32
     e26:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
     e28:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     e2a:	9501      	str	r5, [sp, #4]
     e2c:	e7dc      	b.n	de8 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
     e2e:	4640      	mov	r0, r8
     e30:	4963      	ldr	r1, [pc, #396]	; (fc0 <process_event+0x2c0>)
     e32:	f240 1319 	movw	r3, #281	; 0x119
     e36:	463a      	mov	r2, r7
     e38:	f004 fc53 	bl	56e2 <printk>
     e3c:	f240 1119 	movw	r1, #281	; 0x119
     e40:	4638      	mov	r0, r7
     e42:	f004 fd59 	bl	58f8 <assert_post_action>
     e46:	e7ef      	b.n	e28 <process_event+0x128>
		} else if (evt == EVT_START) {
     e48:	2803      	cmp	r0, #3
     e4a:	d135      	bne.n	eb8 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     e4c:	f1b9 0f00 	cmp.w	r9, #0
     e50:	d00b      	beq.n	e6a <process_event+0x16a>
     e52:	495c      	ldr	r1, [pc, #368]	; (fc4 <process_event+0x2c4>)
     e54:	4640      	mov	r0, r8
     e56:	f44f 73aa 	mov.w	r3, #340	; 0x154
     e5a:	463a      	mov	r2, r7
     e5c:	f004 fc41 	bl	56e2 <printk>
     e60:	f44f 71aa 	mov.w	r1, #340	; 0x154
     e64:	4638      	mov	r0, r7
     e66:	f004 fd47 	bl	58f8 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     e6a:	6823      	ldr	r3, [r4, #0]
     e6c:	b95b      	cbnz	r3, e86 <process_event+0x186>
     e6e:	4956      	ldr	r1, [pc, #344]	; (fc8 <process_event+0x2c8>)
     e70:	4640      	mov	r0, r8
     e72:	f240 1355 	movw	r3, #341	; 0x155
     e76:	463a      	mov	r2, r7
     e78:	f004 fc33 	bl	56e2 <printk>
     e7c:	f240 1155 	movw	r1, #341	; 0x155
     e80:	4638      	mov	r0, r7
     e82:	f004 fd39 	bl	58f8 <assert_post_action>
			transit = mgr->transitions->start;
     e86:	6923      	ldr	r3, [r4, #16]
     e88:	681b      	ldr	r3, [r3, #0]
     e8a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
     e8c:	b95b      	cbnz	r3, ea6 <process_event+0x1a6>
     e8e:	494f      	ldr	r1, [pc, #316]	; (fcc <process_event+0x2cc>)
     e90:	4640      	mov	r0, r8
     e92:	f44f 73ac 	mov.w	r3, #344	; 0x158
     e96:	463a      	mov	r2, r7
     e98:	f004 fc23 	bl	56e2 <printk>
     e9c:	f44f 71ac 	mov.w	r1, #344	; 0x158
     ea0:	4638      	mov	r0, r7
     ea2:	f004 fd29 	bl	58f8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ea6:	8ba3      	ldrh	r3, [r4, #28]
     ea8:	f023 0307 	bic.w	r3, r3, #7
     eac:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     eb0:	83a3      	strh	r3, [r4, #28]
}
     eb2:	2500      	movs	r5, #0
		res = 0;
     eb4:	46ab      	mov	fp, r5
}
     eb6:	e797      	b.n	de8 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
     eb8:	2804      	cmp	r0, #4
     eba:	d132      	bne.n	f22 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     ebc:	f1b9 0f02 	cmp.w	r9, #2
     ec0:	d00b      	beq.n	eda <process_event+0x1da>
     ec2:	4943      	ldr	r1, [pc, #268]	; (fd0 <process_event+0x2d0>)
     ec4:	4640      	mov	r0, r8
     ec6:	f240 135b 	movw	r3, #347	; 0x15b
     eca:	463a      	mov	r2, r7
     ecc:	f004 fc09 	bl	56e2 <printk>
     ed0:	f240 115b 	movw	r1, #347	; 0x15b
     ed4:	4638      	mov	r0, r7
     ed6:	f004 fd0f 	bl	58f8 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
     eda:	8be3      	ldrh	r3, [r4, #30]
     edc:	b15b      	cbz	r3, ef6 <process_event+0x1f6>
     ede:	493d      	ldr	r1, [pc, #244]	; (fd4 <process_event+0x2d4>)
     ee0:	4640      	mov	r0, r8
     ee2:	f44f 73ae 	mov.w	r3, #348	; 0x15c
     ee6:	463a      	mov	r2, r7
     ee8:	f004 fbfb 	bl	56e2 <printk>
     eec:	f44f 71ae 	mov.w	r1, #348	; 0x15c
     ef0:	4638      	mov	r0, r7
     ef2:	f004 fd01 	bl	58f8 <assert_post_action>
			transit = mgr->transitions->stop;
     ef6:	6923      	ldr	r3, [r4, #16]
     ef8:	685b      	ldr	r3, [r3, #4]
     efa:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
     efc:	b95b      	cbnz	r3, f16 <process_event+0x216>
     efe:	4933      	ldr	r1, [pc, #204]	; (fcc <process_event+0x2cc>)
     f00:	4640      	mov	r0, r8
     f02:	f240 135f 	movw	r3, #351	; 0x15f
     f06:	463a      	mov	r2, r7
     f08:	f004 fbeb 	bl	56e2 <printk>
     f0c:	f240 115f 	movw	r1, #351	; 0x15f
     f10:	4638      	mov	r0, r7
     f12:	f004 fcf1 	bl	58f8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f16:	8ba3      	ldrh	r3, [r4, #28]
     f18:	f023 0307 	bic.w	r3, r3, #7
     f1c:	f043 0304 	orr.w	r3, r3, #4
     f20:	e7c6      	b.n	eb0 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
     f22:	2805      	cmp	r0, #5
     f24:	d132      	bne.n	f8c <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     f26:	f1b9 0f01 	cmp.w	r9, #1
     f2a:	d00b      	beq.n	f44 <process_event+0x244>
     f2c:	492a      	ldr	r1, [pc, #168]	; (fd8 <process_event+0x2d8>)
     f2e:	4640      	mov	r0, r8
     f30:	f44f 73b1 	mov.w	r3, #354	; 0x162
     f34:	463a      	mov	r2, r7
     f36:	f004 fbd4 	bl	56e2 <printk>
     f3a:	f44f 71b1 	mov.w	r1, #354	; 0x162
     f3e:	4638      	mov	r0, r7
     f40:	f004 fcda 	bl	58f8 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     f44:	6823      	ldr	r3, [r4, #0]
     f46:	b95b      	cbnz	r3, f60 <process_event+0x260>
     f48:	491f      	ldr	r1, [pc, #124]	; (fc8 <process_event+0x2c8>)
     f4a:	4640      	mov	r0, r8
     f4c:	f240 1363 	movw	r3, #355	; 0x163
     f50:	463a      	mov	r2, r7
     f52:	f004 fbc6 	bl	56e2 <printk>
     f56:	f240 1163 	movw	r1, #355	; 0x163
     f5a:	4638      	mov	r0, r7
     f5c:	f004 fccc 	bl	58f8 <assert_post_action>
			transit = mgr->transitions->reset;
     f60:	6923      	ldr	r3, [r4, #16]
     f62:	689b      	ldr	r3, [r3, #8]
     f64:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
     f66:	b95b      	cbnz	r3, f80 <process_event+0x280>
     f68:	4918      	ldr	r1, [pc, #96]	; (fcc <process_event+0x2cc>)
     f6a:	4640      	mov	r0, r8
     f6c:	f44f 73b3 	mov.w	r3, #358	; 0x166
     f70:	463a      	mov	r2, r7
     f72:	f004 fbb6 	bl	56e2 <printk>
     f76:	f44f 71b3 	mov.w	r1, #358	; 0x166
     f7a:	4638      	mov	r0, r7
     f7c:	f004 fcbc 	bl	58f8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f80:	8ba3      	ldrh	r3, [r4, #28]
     f82:	f023 0307 	bic.w	r3, r3, #7
     f86:	f043 0305 	orr.w	r3, r3, #5
     f8a:	e791      	b.n	eb0 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
     f8c:	490c      	ldr	r1, [pc, #48]	; (fc0 <process_event+0x2c0>)
     f8e:	f240 1369 	movw	r3, #361	; 0x169
     f92:	463a      	mov	r2, r7
     f94:	4640      	mov	r0, r8
     f96:	f004 fba4 	bl	56e2 <printk>
     f9a:	2500      	movs	r5, #0
     f9c:	f240 1169 	movw	r1, #361	; 0x169
     fa0:	4638      	mov	r0, r7
     fa2:	f004 fca9 	bl	58f8 <assert_post_action>
		onoff_transition_fn transit = NULL;
     fa6:	9501      	str	r5, [sp, #4]
     fa8:	e784      	b.n	eb4 <process_event+0x1b4>
     faa:	bf00      	nop
     fac:	00006562 	.word	0x00006562
     fb0:	00006581 	.word	0x00006581
     fb4:	00005fa5 	.word	0x00005fa5
     fb8:	00006598 	.word	0x00006598
     fbc:	000064c0 	.word	0x000064c0
     fc0:	0000747a 	.word	0x0000747a
     fc4:	000064e2 	.word	0x000064e2
     fc8:	000064ed 	.word	0x000064ed
     fcc:	00006510 	.word	0x00006510
     fd0:	00006527 	.word	0x00006527
     fd4:	0000653d 	.word	0x0000653d
     fd8:	0000654c 	.word	0x0000654c
				   && !sys_slist_is_empty(&mgr->monitors);
     fdc:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     fe0:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
     fe4:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
     fe8:	83a3      	strh	r3, [r4, #28]
     fea:	4650      	mov	r0, sl
     fec:	f003 ffda 	bl	4fa4 <z_spin_unlock_valid>
     ff0:	b968      	cbnz	r0, 100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
     ff2:	4a3a      	ldr	r2, [pc, #232]	; (10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
     ff4:	493a      	ldr	r1, [pc, #232]	; (10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>)
     ff6:	2384      	movs	r3, #132	; 0x84
     ff8:	4640      	mov	r0, r8
     ffa:	f004 fb72 	bl	56e2 <printk>
     ffe:	4839      	ldr	r0, [pc, #228]	; (10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>)
    1000:	4651      	mov	r1, sl
    1002:	f004 fb6e 	bl	56e2 <printk>
    1006:	4835      	ldr	r0, [pc, #212]	; (10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
    1008:	2184      	movs	r1, #132	; 0x84
    100a:	f004 fc75 	bl	58f8 <assert_post_action>
    100e:	9b03      	ldr	r3, [sp, #12]
    1010:	f383 8811 	msr	BASEPRI, r3
    1014:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1018:	f1b9 0f00 	cmp.w	r9, #0
    101c:	d138      	bne.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
	while (!sys_slist_is_empty(list)) {
    101e:	2d00      	cmp	r5, #0
    1020:	d14b      	bne.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
			if (transit != NULL) {
    1022:	9b01      	ldr	r3, [sp, #4]
    1024:	b113      	cbz	r3, 102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
				transit(mgr, transition_complete);
    1026:	4930      	ldr	r1, [pc, #192]	; (10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
    1028:	4620      	mov	r0, r4
    102a:	4798      	blx	r3
	__asm__ volatile(
    102c:	f04f 0320 	mov.w	r3, #32
    1030:	f3ef 8b11 	mrs	fp, BASEPRI
    1034:	f383 8811 	msr	BASEPRI, r3
    1038:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    103c:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    103e:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1042:	f003 ffa1 	bl	4f88 <z_spin_lock_valid>
    1046:	b968      	cbnz	r0, 1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
    1048:	4a24      	ldr	r2, [pc, #144]	; (10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
    104a:	4928      	ldr	r1, [pc, #160]	; (10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
    104c:	235c      	movs	r3, #92	; 0x5c
    104e:	4640      	mov	r0, r8
    1050:	f004 fb47 	bl	56e2 <printk>
    1054:	4826      	ldr	r0, [pc, #152]	; (10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    1056:	4651      	mov	r1, sl
    1058:	f004 fb43 	bl	56e2 <printk>
    105c:	481f      	ldr	r0, [pc, #124]	; (10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
    105e:	215c      	movs	r1, #92	; 0x5c
    1060:	f004 fc4a 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    1064:	4650      	mov	r0, sl
    1066:	f003 ffad 	bl	4fc4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    106a:	8ba3      	ldrh	r3, [r4, #28]
    106c:	f023 0308 	bic.w	r3, r3, #8
    1070:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1072:	8ba3      	ldrh	r3, [r4, #28]
    1074:	06da      	lsls	r2, r3, #27
    1076:	d528      	bpl.n	10ca <CONFIG_FPROTECT_BLOCK_SIZE+0xca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1078:	f023 0310 	bic.w	r3, r3, #16
    107c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    107e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1080:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    1084:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1088:	2900      	cmp	r1, #0
    108a:	f47f ae6b 	bne.w	d64 <process_event+0x64>
out:
    108e:	e649      	b.n	d24 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1090:	68a1      	ldr	r1, [r4, #8]
    1092:	2900      	cmp	r1, #0
    1094:	d0c3      	beq.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
	return node->next;
    1096:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1098:	9a02      	ldr	r2, [sp, #8]
    109a:	2b00      	cmp	r3, #0
    109c:	bf38      	it	cc
    109e:	2300      	movcc	r3, #0
    10a0:	4699      	mov	r9, r3
    10a2:	684b      	ldr	r3, [r1, #4]
    10a4:	4620      	mov	r0, r4
    10a6:	461e      	mov	r6, r3
    10a8:	465b      	mov	r3, fp
    10aa:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    10ac:	f1b9 0f00 	cmp.w	r9, #0
    10b0:	d0b5      	beq.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
    10b2:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    10b6:	4649      	mov	r1, r9
    10b8:	e7ee      	b.n	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    10ba:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    10bc:	9a02      	ldr	r2, [sp, #8]
    10be:	682d      	ldr	r5, [r5, #0]
    10c0:	465b      	mov	r3, fp
    10c2:	4620      	mov	r0, r4
    10c4:	f004 fb43 	bl	574e <notify_one>
    10c8:	e7a9      	b.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    10ca:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    10ce:	bf1e      	ittt	ne
    10d0:	f023 0320 	bicne.w	r3, r3, #32
    10d4:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    10d6:	2102      	movne	r1, #2
    10d8:	e7d2      	b.n	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
    10da:	bf00      	nop
    10dc:	00006562 	.word	0x00006562
    10e0:	00006581 	.word	0x00006581
    10e4:	00006598 	.word	0x00006598
    10e8:	000010f5 	.word	0x000010f5
    10ec:	000065ad 	.word	0x000065ad
    10f0:	000065c2 	.word	0x000065c2

000010f4 <transition_complete>:
{
    10f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10f6:	4604      	mov	r4, r0
    10f8:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    10fa:	f100 0614 	add.w	r6, r0, #20
    10fe:	f04f 0320 	mov.w	r3, #32
    1102:	f3ef 8711 	mrs	r7, BASEPRI
    1106:	f383 8811 	msr	BASEPRI, r3
    110a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    110e:	4630      	mov	r0, r6
    1110:	f003 ff3a 	bl	4f88 <z_spin_lock_valid>
    1114:	b968      	cbnz	r0, 1132 <transition_complete+0x3e>
    1116:	4a0c      	ldr	r2, [pc, #48]	; (1148 <transition_complete+0x54>)
    1118:	490c      	ldr	r1, [pc, #48]	; (114c <transition_complete+0x58>)
    111a:	480d      	ldr	r0, [pc, #52]	; (1150 <transition_complete+0x5c>)
    111c:	235c      	movs	r3, #92	; 0x5c
    111e:	f004 fae0 	bl	56e2 <printk>
    1122:	480c      	ldr	r0, [pc, #48]	; (1154 <transition_complete+0x60>)
    1124:	4631      	mov	r1, r6
    1126:	f004 fadc 	bl	56e2 <printk>
    112a:	4807      	ldr	r0, [pc, #28]	; (1148 <transition_complete+0x54>)
    112c:	215c      	movs	r1, #92	; 0x5c
    112e:	f004 fbe3 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    1132:	4630      	mov	r0, r6
    1134:	f003 ff46 	bl	4fc4 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1138:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    113a:	463a      	mov	r2, r7
    113c:	4620      	mov	r0, r4
    113e:	2101      	movs	r1, #1
}
    1140:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    1144:	f7ff bddc 	b.w	d00 <process_event>
    1148:	00006562 	.word	0x00006562
    114c:	000065ad 	.word	0x000065ad
    1150:	00005fa5 	.word	0x00005fa5
    1154:	000065c2 	.word	0x000065c2

00001158 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    115c:	4604      	mov	r4, r0
    115e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1160:	f004 fb0b 	bl	577a <validate_args>

	if (rv < 0) {
    1164:	1e05      	subs	r5, r0, #0
    1166:	db5e      	blt.n	1226 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1168:	f104 0914 	add.w	r9, r4, #20
    116c:	f04f 0320 	mov.w	r3, #32
    1170:	f3ef 8a11 	mrs	sl, BASEPRI
    1174:	f383 8811 	msr	BASEPRI, r3
    1178:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    117c:	4648      	mov	r0, r9
    117e:	f003 ff03 	bl	4f88 <z_spin_lock_valid>
    1182:	b968      	cbnz	r0, 11a0 <onoff_request+0x48>
    1184:	4a38      	ldr	r2, [pc, #224]	; (1268 <onoff_request+0x110>)
    1186:	4939      	ldr	r1, [pc, #228]	; (126c <onoff_request+0x114>)
    1188:	4839      	ldr	r0, [pc, #228]	; (1270 <onoff_request+0x118>)
    118a:	235c      	movs	r3, #92	; 0x5c
    118c:	f004 faa9 	bl	56e2 <printk>
    1190:	4838      	ldr	r0, [pc, #224]	; (1274 <onoff_request+0x11c>)
    1192:	4649      	mov	r1, r9
    1194:	f004 faa5 	bl	56e2 <printk>
    1198:	4833      	ldr	r0, [pc, #204]	; (1268 <onoff_request+0x110>)
    119a:	215c      	movs	r1, #92	; 0x5c
    119c:	f004 fbac 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    11a0:	4648      	mov	r0, r9
    11a2:	f003 ff0f 	bl	4fc4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    11a6:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    11a8:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    11aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
    11ae:	428b      	cmp	r3, r1
    11b0:	f002 0607 	and.w	r6, r2, #7
    11b4:	d050      	beq.n	1258 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    11b6:	2e02      	cmp	r6, #2
    11b8:	d124      	bne.n	1204 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    11ba:	3301      	adds	r3, #1
    11bc:	83e3      	strh	r3, [r4, #30]
	rv = state;
    11be:	4635      	mov	r5, r6
		notify = true;
    11c0:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    11c4:	4648      	mov	r0, r9
    11c6:	f003 feed 	bl	4fa4 <z_spin_unlock_valid>
    11ca:	b968      	cbnz	r0, 11e8 <onoff_request+0x90>
    11cc:	4a26      	ldr	r2, [pc, #152]	; (1268 <onoff_request+0x110>)
    11ce:	492a      	ldr	r1, [pc, #168]	; (1278 <onoff_request+0x120>)
    11d0:	4827      	ldr	r0, [pc, #156]	; (1270 <onoff_request+0x118>)
    11d2:	2384      	movs	r3, #132	; 0x84
    11d4:	f004 fa85 	bl	56e2 <printk>
    11d8:	4828      	ldr	r0, [pc, #160]	; (127c <onoff_request+0x124>)
    11da:	4649      	mov	r1, r9
    11dc:	f004 fa81 	bl	56e2 <printk>
    11e0:	4821      	ldr	r0, [pc, #132]	; (1268 <onoff_request+0x110>)
    11e2:	2184      	movs	r1, #132	; 0x84
    11e4:	f004 fb88 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    11e8:	f38a 8811 	msr	BASEPRI, sl
    11ec:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    11f0:	f1b8 0f00 	cmp.w	r8, #0
    11f4:	d017      	beq.n	1226 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    11f6:	2300      	movs	r3, #0
    11f8:	4632      	mov	r2, r6
    11fa:	4639      	mov	r1, r7
    11fc:	4620      	mov	r0, r4
    11fe:	f004 faa6 	bl	574e <notify_one>
    1202:	e010      	b.n	1226 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    1204:	0793      	lsls	r3, r2, #30
    1206:	d001      	beq.n	120c <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    1208:	2e06      	cmp	r6, #6
    120a:	d10f      	bne.n	122c <onoff_request+0xd4>
	parent->next = child;
    120c:	2300      	movs	r3, #0
    120e:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    1210:	6863      	ldr	r3, [r4, #4]
    1212:	b9f3      	cbnz	r3, 1252 <onoff_request+0xfa>
	list->head = node;
    1214:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    1218:	4635      	mov	r5, r6
    121a:	b9fe      	cbnz	r6, 125c <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    121c:	4652      	mov	r2, sl
    121e:	2102      	movs	r1, #2
    1220:	4620      	mov	r0, r4
    1222:	f7ff fd6d 	bl	d00 <process_event>
		}
	}

	return rv;
}
    1226:	4628      	mov	r0, r5
    1228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    122c:	2e05      	cmp	r6, #5
    122e:	d018      	beq.n	1262 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1230:	2e01      	cmp	r6, #1
    1232:	d00b      	beq.n	124c <onoff_request+0xf4>
    1234:	4912      	ldr	r1, [pc, #72]	; (1280 <onoff_request+0x128>)
    1236:	480e      	ldr	r0, [pc, #56]	; (1270 <onoff_request+0x118>)
    1238:	4a12      	ldr	r2, [pc, #72]	; (1284 <onoff_request+0x12c>)
    123a:	f240 13c5 	movw	r3, #453	; 0x1c5
    123e:	f004 fa50 	bl	56e2 <printk>
    1242:	4810      	ldr	r0, [pc, #64]	; (1284 <onoff_request+0x12c>)
    1244:	f240 11c5 	movw	r1, #453	; 0x1c5
    1248:	f004 fb56 	bl	58f8 <assert_post_action>
		rv = -EIO;
    124c:	f06f 0504 	mvn.w	r5, #4
    1250:	e004      	b.n	125c <onoff_request+0x104>
	parent->next = child;
    1252:	601f      	str	r7, [r3, #0]
	list->tail = node;
    1254:	6067      	str	r7, [r4, #4]
}
    1256:	e7df      	b.n	1218 <onoff_request+0xc0>
		rv = -EAGAIN;
    1258:	f06f 050a 	mvn.w	r5, #10
    125c:	f04f 0800 	mov.w	r8, #0
    1260:	e7b0      	b.n	11c4 <onoff_request+0x6c>
		rv = -ENOTSUP;
    1262:	f06f 0522 	mvn.w	r5, #34	; 0x22
    1266:	e7f9      	b.n	125c <onoff_request+0x104>
    1268:	00006562 	.word	0x00006562
    126c:	000065ad 	.word	0x000065ad
    1270:	00005fa5 	.word	0x00005fa5
    1274:	000065c2 	.word	0x000065c2
    1278:	00006581 	.word	0x00006581
    127c:	00006598 	.word	0x00006598
    1280:	0000654c 	.word	0x0000654c
    1284:	000064c0 	.word	0x000064c0

00001288 <sys_heap_init>:
	return big_heap(h) ? 8 : 4;
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    1288:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    128e:	4607      	mov	r7, r0
    1290:	460d      	mov	r5, r1
    1292:	4616      	mov	r6, r2
    1294:	d212      	bcs.n	12bc <sys_heap_init+0x34>
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1296:	2a04      	cmp	r2, #4
    1298:	d80e      	bhi.n	12b8 <sys_heap_init+0x30>
    129a:	4943      	ldr	r1, [pc, #268]	; (13a8 <sys_heap_init+0x120>)
    129c:	4a43      	ldr	r2, [pc, #268]	; (13ac <sys_heap_init+0x124>)
    129e:	4844      	ldr	r0, [pc, #272]	; (13b0 <sys_heap_init+0x128>)
    12a0:	f44f 7397 	mov.w	r3, #302	; 0x12e
    12a4:	f004 fa1d 	bl	56e2 <printk>
    12a8:	4842      	ldr	r0, [pc, #264]	; (13b4 <sys_heap_init+0x12c>)
    12aa:	f004 fa1a 	bl	56e2 <printk>
    12ae:	483f      	ldr	r0, [pc, #252]	; (13ac <sys_heap_init+0x124>)
    12b0:	f44f 7197 	mov.w	r1, #302	; 0x12e
    12b4:	f004 fb20 	bl	58f8 <assert_post_action>
    12b8:	2204      	movs	r2, #4
    12ba:	e000      	b.n	12be <sys_heap_init+0x36>
    12bc:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    12be:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    12c0:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    12c2:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    12c4:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    12c8:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    12cc:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    12ce:	2d17      	cmp	r5, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    12d0:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    12d4:	d80e      	bhi.n	12f4 <sys_heap_init+0x6c>
    12d6:	4938      	ldr	r1, [pc, #224]	; (13b8 <sys_heap_init+0x130>)
    12d8:	4a34      	ldr	r2, [pc, #208]	; (13ac <sys_heap_init+0x124>)
    12da:	4835      	ldr	r0, [pc, #212]	; (13b0 <sys_heap_init+0x128>)
    12dc:	f240 1337 	movw	r3, #311	; 0x137
    12e0:	f004 f9ff 	bl	56e2 <printk>
    12e4:	4833      	ldr	r0, [pc, #204]	; (13b4 <sys_heap_init+0x12c>)
    12e6:	f004 f9fc 	bl	56e2 <printk>
    12ea:	4830      	ldr	r0, [pc, #192]	; (13ac <sys_heap_init+0x124>)
    12ec:	f240 1137 	movw	r1, #311	; 0x137
    12f0:	f004 fb02 	bl	58f8 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    12f4:	2200      	movs	r2, #0
    12f6:	2300      	movs	r3, #0
	heap->heap = h;
    12f8:	603c      	str	r4, [r7, #0]
	h->chunk0_hdr_area = 0;
    12fa:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    12fe:	2300      	movs	r3, #0
    1300:	60e3      	str	r3, [r4, #12]

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    1302:	4631      	mov	r1, r6
	h->len = buf_sz;
    1304:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    1306:	4620      	mov	r0, r4
    1308:	f004 faa5 	bl	5856 <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
    130c:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    130e:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    1310:	1c47      	adds	r7, r0, #1
    1312:	4620      	mov	r0, r4
    1314:	f004 fa95 	bl	5842 <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    1318:	351b      	adds	r5, #27
    131a:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    131c:	4428      	add	r0, r5
    131e:	42b0      	cmp	r0, r6
    1320:	d30e      	bcc.n	1340 <sys_heap_init+0xb8>
    1322:	4926      	ldr	r1, [pc, #152]	; (13bc <sys_heap_init+0x134>)
    1324:	4a21      	ldr	r2, [pc, #132]	; (13ac <sys_heap_init+0x124>)
    1326:	4822      	ldr	r0, [pc, #136]	; (13b0 <sys_heap_init+0x128>)
    1328:	f240 1343 	movw	r3, #323	; 0x143
    132c:	f004 f9d9 	bl	56e2 <printk>
    1330:	4820      	ldr	r0, [pc, #128]	; (13b4 <sys_heap_init+0x12c>)
    1332:	f004 f9d6 	bl	56e2 <printk>
    1336:	481d      	ldr	r0, [pc, #116]	; (13ac <sys_heap_init+0x124>)
    1338:	f240 1143 	movw	r1, #323	; 0x143
    133c:	f004 fadc 	bl	58f8 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    1340:	2300      	movs	r3, #0
    1342:	f104 0210 	add.w	r2, r4, #16

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    1346:	4619      	mov	r1, r3
	for (int i = 0; i < nb_buckets; i++) {
    1348:	42bb      	cmp	r3, r7
    134a:	db29      	blt.n	13a0 <sys_heap_init+0x118>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    134c:	462a      	mov	r2, r5
    134e:	4620      	mov	r0, r4
    1350:	2100      	movs	r1, #0
    1352:	f004 fa72 	bl	583a <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    1356:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
    1358:	4620      	mov	r0, r4
    135a:	2201      	movs	r2, #1
    135c:	2100      	movs	r1, #0
    135e:	f004 fa54 	bl	580a <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    1362:	463a      	mov	r2, r7
    1364:	4629      	mov	r1, r5
    1366:	f004 fa68 	bl	583a <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    136a:	462b      	mov	r3, r5
    136c:	4629      	mov	r1, r5
    136e:	4620      	mov	r0, r4
    1370:	2200      	movs	r2, #0
    1372:	f004 fa39 	bl	57e8 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    1376:	4631      	mov	r1, r6
    1378:	4620      	mov	r0, r4
    137a:	2200      	movs	r2, #0
    137c:	f004 fa5d 	bl	583a <set_chunk_size>
    1380:	463b      	mov	r3, r7
    1382:	4631      	mov	r1, r6
    1384:	4620      	mov	r0, r4
    1386:	2200      	movs	r2, #0
    1388:	f004 fa2e 	bl	57e8 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    138c:	4631      	mov	r1, r6
    138e:	4620      	mov	r0, r4
    1390:	2201      	movs	r2, #1
    1392:	f004 fa3a 	bl	580a <set_chunk_used>

	free_list_add(h, chunk0_size);
    1396:	4629      	mov	r1, r5
}
    1398:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    139c:	f004 ba67 	b.w	586e <free_list_add>
		h->buckets[i].next = 0;
    13a0:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    13a4:	3301      	adds	r3, #1
    13a6:	e7cf      	b.n	1348 <sys_heap_init+0xc0>
    13a8:	000066a6 	.word	0x000066a6
    13ac:	000065da 	.word	0x000065da
    13b0:	00005fa5 	.word	0x00005fa5
    13b4:	000066c7 	.word	0x000066c7
    13b8:	000066e0 	.word	0x000066e0
    13bc:	00006708 	.word	0x00006708

000013c0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    13c0:	b510      	push	{r4, lr}
    13c2:	4807      	ldr	r0, [pc, #28]	; (13e0 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    13c4:	4c07      	ldr	r4, [pc, #28]	; (13e4 <uart_console_init+0x24>)
    13c6:	f002 fa63 	bl	3890 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    13ca:	4b07      	ldr	r3, [pc, #28]	; (13e8 <uart_console_init+0x28>)
    13cc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    13ce:	4620      	mov	r0, r4
    13d0:	f001 f99c 	bl	270c <__stdout_hook_install>
	__printk_hook_install(console_out);
    13d4:	4620      	mov	r0, r4
    13d6:	f7ff fb3d 	bl	a54 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    13da:	2000      	movs	r0, #0
    13dc:	bd10      	pop	{r4, pc}
    13de:	bf00      	nop
    13e0:	00006737 	.word	0x00006737
    13e4:	000013ed 	.word	0x000013ed
    13e8:	200005dc 	.word	0x200005dc

000013ec <console_out>:
	if ('\n' == c) {
    13ec:	280a      	cmp	r0, #10
{
    13ee:	b538      	push	{r3, r4, r5, lr}
    13f0:	4d07      	ldr	r5, [pc, #28]	; (1410 <console_out+0x24>)
    13f2:	4604      	mov	r4, r0
	if ('\n' == c) {
    13f4:	d104      	bne.n	1400 <console_out+0x14>
    13f6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    13f8:	6883      	ldr	r3, [r0, #8]
    13fa:	210d      	movs	r1, #13
    13fc:	685b      	ldr	r3, [r3, #4]
    13fe:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    1400:	6828      	ldr	r0, [r5, #0]
    1402:	6883      	ldr	r3, [r0, #8]
    1404:	b2e1      	uxtb	r1, r4
    1406:	685b      	ldr	r3, [r3, #4]
    1408:	4798      	blx	r3
}
    140a:	4620      	mov	r0, r4
    140c:	bd38      	pop	{r3, r4, r5, pc}
    140e:	bf00      	nop
    1410:	200005dc 	.word	0x200005dc

00001414 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1418:	4c0e      	ldr	r4, [pc, #56]	; (1454 <onoff_start+0x40>)
    141a:	1b05      	subs	r5, r0, r4
    141c:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    1420:	250c      	movs	r5, #12
    1422:	435d      	muls	r5, r3
{
    1424:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    1426:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
    142a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    142c:	4420      	add	r0, r4
    142e:	2140      	movs	r1, #64	; 0x40
    1430:	f004 fa6a 	bl	5908 <set_starting_state>
	if (err < 0) {
    1434:	1e01      	subs	r1, r0, #0
    1436:	db08      	blt.n	144a <onoff_start+0x36>
	subdata->cb = data->cb;
    1438:	4b07      	ldr	r3, [pc, #28]	; (1458 <onoff_start+0x44>)
    143a:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
    143c:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    1440:	4b06      	ldr	r3, [pc, #24]	; (145c <onoff_start+0x48>)
    1442:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    1444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    1448:	4718      	bx	r3
		notify(mgr, err);
    144a:	4638      	mov	r0, r7
    144c:	4633      	mov	r3, r6
}
    144e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    1452:	4718      	bx	r3
    1454:	200005f0 	.word	0x200005f0
    1458:	0000596b 	.word	0x0000596b
    145c:	00005e4c 	.word	0x00005e4c

00001460 <get_status>:
{
    1460:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    1462:	b2cc      	uxtb	r4, r1
    1464:	2c01      	cmp	r4, #1
{
    1466:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    1468:	d909      	bls.n	147e <get_status+0x1e>
    146a:	4909      	ldr	r1, [pc, #36]	; (1490 <get_status+0x30>)
    146c:	4809      	ldr	r0, [pc, #36]	; (1494 <get_status+0x34>)
    146e:	4a0a      	ldr	r2, [pc, #40]	; (1498 <get_status+0x38>)
    1470:	237d      	movs	r3, #125	; 0x7d
    1472:	f004 f936 	bl	56e2 <printk>
    1476:	4808      	ldr	r0, [pc, #32]	; (1498 <get_status+0x38>)
    1478:	217d      	movs	r1, #125	; 0x7d
    147a:	f004 fa3d 	bl	58f8 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    147e:	68eb      	ldr	r3, [r5, #12]
    1480:	210c      	movs	r1, #12
    1482:	fb04 3401 	mla	r4, r4, r1, r3
    1486:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    1488:	f000 0007 	and.w	r0, r0, #7
    148c:	bd38      	pop	{r3, r4, r5, pc}
    148e:	bf00      	nop
    1490:	0000677b 	.word	0x0000677b
    1494:	00005fa5 	.word	0x00005fa5
    1498:	0000673e 	.word	0x0000673e

0000149c <stop>:
{
    149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    149e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    14a0:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    14a2:	68c7      	ldr	r7, [r0, #12]
{
    14a4:	4605      	mov	r5, r0
    14a6:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    14a8:	d90b      	bls.n	14c2 <stop+0x26>
    14aa:	4919      	ldr	r1, [pc, #100]	; (1510 <stop+0x74>)
    14ac:	4819      	ldr	r0, [pc, #100]	; (1514 <stop+0x78>)
    14ae:	4a1a      	ldr	r2, [pc, #104]	; (1518 <stop+0x7c>)
    14b0:	f240 1345 	movw	r3, #325	; 0x145
    14b4:	f004 f915 	bl	56e2 <printk>
    14b8:	4817      	ldr	r0, [pc, #92]	; (1518 <stop+0x7c>)
    14ba:	f240 1145 	movw	r1, #325	; 0x145
    14be:	f004 fa1b 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    14c2:	f04f 0320 	mov.w	r3, #32
    14c6:	f3ef 8211 	mrs	r2, BASEPRI
    14ca:	f383 8811 	msr	BASEPRI, r3
    14ce:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    14d2:	230c      	movs	r3, #12
    14d4:	fb03 7104 	mla	r1, r3, r4, r7
    14d8:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    14da:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    14de:	d001      	beq.n	14e4 <stop+0x48>
    14e0:	428e      	cmp	r6, r1
    14e2:	d111      	bne.n	1508 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    14e4:	fb03 7304 	mla	r3, r3, r4, r7
    14e8:	2101      	movs	r1, #1
    14ea:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    14ec:	2000      	movs	r0, #0
	__asm__ volatile(
    14ee:	f382 8811 	msr	BASEPRI, r2
    14f2:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    14f6:	b930      	cbnz	r0, 1506 <stop+0x6a>
	get_sub_config(dev, type)->stop();
    14f8:	6869      	ldr	r1, [r5, #4]
    14fa:	230c      	movs	r3, #12
    14fc:	fb03 1404 	mla	r4, r3, r4, r1
    1500:	6863      	ldr	r3, [r4, #4]
    1502:	4798      	blx	r3
	return 0;
    1504:	2000      	movs	r0, #0
}
    1506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    1508:	f04f 30ff 	mov.w	r0, #4294967295
    150c:	e7ef      	b.n	14ee <stop+0x52>
    150e:	bf00      	nop
    1510:	0000677b 	.word	0x0000677b
    1514:	00005fa5 	.word	0x00005fa5
    1518:	0000673e 	.word	0x0000673e

0000151c <onoff_stop>:
{
    151c:	b570      	push	{r4, r5, r6, lr}
    151e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    1520:	4906      	ldr	r1, [pc, #24]	; (153c <onoff_stop+0x20>)
    1522:	1a41      	subs	r1, r0, r1
{
    1524:	4604      	mov	r4, r0
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
    1526:	1149      	asrs	r1, r1, #5
    1528:	4805      	ldr	r0, [pc, #20]	; (1540 <onoff_stop+0x24>)
    152a:	2240      	movs	r2, #64	; 0x40
    152c:	f7ff ffb6 	bl	149c <stop>
	notify(mgr, res);
    1530:	462b      	mov	r3, r5
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
    1532:	4601      	mov	r1, r0
	notify(mgr, res);
    1534:	4620      	mov	r0, r4
}
    1536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    153a:	4718      	bx	r3
    153c:	200005f0 	.word	0x200005f0
    1540:	20000020 	.word	0x20000020

00001544 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1544:	2200      	movs	r2, #0
{
    1546:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1548:	2101      	movs	r1, #1
{
    154a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    154c:	4610      	mov	r0, r2
    154e:	f000 fbdb 	bl	1d08 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1552:	2000      	movs	r0, #0
    1554:	f000 fbba 	bl	1ccc <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
    1558:	480f      	ldr	r0, [pc, #60]	; (1598 <clk_init+0x54>)
    155a:	f001 fefb 	bl	3354 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    155e:	4b0f      	ldr	r3, [pc, #60]	; (159c <clk_init+0x58>)
    1560:	4298      	cmp	r0, r3
    1562:	d115      	bne.n	1590 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1564:	f001 ff1a 	bl	339c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1568:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    156a:	490d      	ldr	r1, [pc, #52]	; (15a0 <clk_init+0x5c>)
    156c:	4630      	mov	r0, r6
    156e:	f004 f913 	bl	5798 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1572:	2800      	cmp	r0, #0
    1574:	db0b      	blt.n	158e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1576:	2501      	movs	r5, #1
    1578:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    157a:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    157c:	4908      	ldr	r1, [pc, #32]	; (15a0 <clk_init+0x5c>)
    157e:	f104 0020 	add.w	r0, r4, #32
    1582:	f004 f909 	bl	5798 <onoff_manager_init>
		if (err < 0) {
    1586:	2800      	cmp	r0, #0
    1588:	db01      	blt.n	158e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    158a:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    158c:	2000      	movs	r0, #0
}
    158e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1590:	f06f 0004 	mvn.w	r0, #4
    1594:	e7fb      	b.n	158e <clk_init+0x4a>
    1596:	bf00      	nop
    1598:	000015d9 	.word	0x000015d9
    159c:	0bad0000 	.word	0x0bad0000
    15a0:	00005e64 	.word	0x00005e64

000015a4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    15a4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    15a6:	230c      	movs	r3, #12
    15a8:	4809      	ldr	r0, [pc, #36]	; (15d0 <clkstarted_handle.constprop.0+0x2c>)
    15aa:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    15ac:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    15ae:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    15b0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    15b4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    15b6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    15b8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    15ba:	4418      	add	r0, r3
    15bc:	f004 f9c2 	bl	5944 <set_on_state>
	if (callback) {
    15c0:	b12d      	cbz	r5, 15ce <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    15c2:	4632      	mov	r2, r6
    15c4:	462b      	mov	r3, r5
    15c6:	4803      	ldr	r0, [pc, #12]	; (15d4 <clkstarted_handle.constprop.0+0x30>)
}
    15c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    15cc:	4718      	bx	r3
}
    15ce:	bd70      	pop	{r4, r5, r6, pc}
    15d0:	200005f0 	.word	0x200005f0
    15d4:	20000020 	.word	0x20000020

000015d8 <clock_event_handler>:
	switch (event) {
    15d8:	2801      	cmp	r0, #1
{
    15da:	b508      	push	{r3, lr}
	switch (event) {
    15dc:	d006      	beq.n	15ec <clock_event_handler+0x14>
    15de:	2803      	cmp	r0, #3
    15e0:	d008      	beq.n	15f4 <clock_event_handler+0x1c>
    15e2:	b9a8      	cbnz	r0, 1610 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    15e4:	4b10      	ldr	r3, [pc, #64]	; (1628 <clock_event_handler+0x50>)
    15e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    15e8:	075b      	lsls	r3, r3, #29
    15ea:	d11b      	bne.n	1624 <clock_event_handler+0x4c>
}
    15ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    15f0:	f7ff bfd8 	b.w	15a4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    15f4:	490d      	ldr	r1, [pc, #52]	; (162c <clock_event_handler+0x54>)
    15f6:	4a0e      	ldr	r2, [pc, #56]	; (1630 <clock_event_handler+0x58>)
    15f8:	480e      	ldr	r0, [pc, #56]	; (1634 <clock_event_handler+0x5c>)
    15fa:	f240 2356 	movw	r3, #598	; 0x256
    15fe:	f004 f870 	bl	56e2 <printk>
    1602:	f240 2156 	movw	r1, #598	; 0x256
}
    1606:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    160a:	4809      	ldr	r0, [pc, #36]	; (1630 <clock_event_handler+0x58>)
    160c:	f004 b974 	b.w	58f8 <assert_post_action>
    1610:	4906      	ldr	r1, [pc, #24]	; (162c <clock_event_handler+0x54>)
    1612:	4a07      	ldr	r2, [pc, #28]	; (1630 <clock_event_handler+0x58>)
    1614:	4807      	ldr	r0, [pc, #28]	; (1634 <clock_event_handler+0x5c>)
    1616:	f240 235a 	movw	r3, #602	; 0x25a
    161a:	f004 f862 	bl	56e2 <printk>
    161e:	f240 215a 	movw	r1, #602	; 0x25a
    1622:	e7f0      	b.n	1606 <clock_event_handler+0x2e>
}
    1624:	bd08      	pop	{r3, pc}
    1626:	bf00      	nop
    1628:	200005f0 	.word	0x200005f0
    162c:	0000747a 	.word	0x0000747a
    1630:	0000673e 	.word	0x0000673e
    1634:	00005fa5 	.word	0x00005fa5

00001638 <generic_hfclk_start>:
{
    1638:	b508      	push	{r3, lr}
	__asm__ volatile(
    163a:	f04f 0320 	mov.w	r3, #32
    163e:	f3ef 8111 	mrs	r1, BASEPRI
    1642:	f383 8811 	msr	BASEPRI, r3
    1646:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    164a:	4a12      	ldr	r2, [pc, #72]	; (1694 <generic_hfclk_start+0x5c>)
    164c:	6813      	ldr	r3, [r2, #0]
    164e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1652:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1656:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1658:	d00c      	beq.n	1674 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    165a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    165e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1662:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1666:	f013 0301 	ands.w	r3, r3, #1
    166a:	d003      	beq.n	1674 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    166c:	480a      	ldr	r0, [pc, #40]	; (1698 <generic_hfclk_start+0x60>)
    166e:	f004 f969 	bl	5944 <set_on_state>
			already_started = true;
    1672:	2301      	movs	r3, #1
	__asm__ volatile(
    1674:	f381 8811 	msr	BASEPRI, r1
    1678:	f3bf 8f6f 	isb	sy
	if (already_started) {
    167c:	b123      	cbz	r3, 1688 <generic_hfclk_start+0x50>
}
    167e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    1682:	2000      	movs	r0, #0
    1684:	f7ff bf8e 	b.w	15a4 <clkstarted_handle.constprop.0>
}
    1688:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    168c:	2001      	movs	r0, #1
    168e:	f001 bea5 	b.w	33dc <nrfx_clock_start>
    1692:	bf00      	nop
    1694:	20000648 	.word	0x20000648
    1698:	20000638 	.word	0x20000638

0000169c <lfclk_start>:
{
    169c:	b510      	push	{r4, lr}
	if (!once) {
    169e:	4c07      	ldr	r4, [pc, #28]	; (16bc <lfclk_start+0x20>)
    16a0:	7823      	ldrb	r3, [r4, #0]
    16a2:	b92b      	cbnz	r3, 16b0 <lfclk_start+0x14>
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    16a4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    16a8:	f004 fad1 	bl	5c4e <z_impl_k_busy_wait>
		once = true;
    16ac:	2301      	movs	r3, #1
    16ae:	7023      	strb	r3, [r4, #0]
}
    16b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    16b4:	2000      	movs	r0, #0
    16b6:	f001 be91 	b.w	33dc <nrfx_clock_start>
    16ba:	bf00      	nop
    16bc:	200007b0 	.word	0x200007b0

000016c0 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    16c0:	4b09      	ldr	r3, [pc, #36]	; (16e8 <generic_hfclk_stop+0x28>)
    16c2:	f3bf 8f5b 	dmb	ish
    16c6:	e853 2f00 	ldrex	r2, [r3]
    16ca:	f022 0102 	bic.w	r1, r2, #2
    16ce:	e843 1000 	strex	r0, r1, [r3]
    16d2:	2800      	cmp	r0, #0
    16d4:	d1f7      	bne.n	16c6 <generic_hfclk_stop+0x6>
    16d6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    16da:	07d3      	lsls	r3, r2, #31
    16dc:	d402      	bmi.n	16e4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    16de:	2001      	movs	r0, #1
    16e0:	f001 beea 	b.w	34b8 <nrfx_clock_stop>
}
    16e4:	4770      	bx	lr
    16e6:	bf00      	nop
    16e8:	20000648 	.word	0x20000648

000016ec <api_blocking_start>:
{
    16ec:	b510      	push	{r4, lr}
    16ee:	b088      	sub	sp, #32
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    16f0:	2300      	movs	r3, #0
    16f2:	2201      	movs	r2, #1
    16f4:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
    16f8:	9301      	str	r3, [sp, #4]
    16fa:	4b09      	ldr	r3, [pc, #36]	; (1720 <api_blocking_start+0x34>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    16fc:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
    16fe:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1700:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
    1704:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
    1708:	f004 f93e 	bl	5988 <api_start>
	if (err < 0) {
    170c:	2800      	cmp	r0, #0
    170e:	db05      	blt.n	171c <api_blocking_start+0x30>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1710:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1714:	2300      	movs	r3, #0
    1716:	4620      	mov	r0, r4
    1718:	f003 faaa 	bl	4c70 <z_impl_k_sem_take>
}
    171c:	b008      	add	sp, #32
    171e:	bd10      	pop	{r4, pc}
    1720:	0000597d 	.word	0x0000597d

00001724 <z_nrf_clock_control_lf_on>:
{
    1724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1728:	4949      	ldr	r1, [pc, #292]	; (1850 <z_nrf_clock_control_lf_on+0x12c>)
    172a:	f3bf 8f5b 	dmb	ish
    172e:	4605      	mov	r5, r0
    1730:	2201      	movs	r2, #1
    1732:	e851 3f00 	ldrex	r3, [r1]
    1736:	e841 2000 	strex	r0, r2, [r1]
    173a:	2800      	cmp	r0, #0
    173c:	d1f9      	bne.n	1732 <z_nrf_clock_control_lf_on+0xe>
    173e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1742:	b9a3      	cbnz	r3, 176e <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1744:	4943      	ldr	r1, [pc, #268]	; (1854 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    1746:	4844      	ldr	r0, [pc, #272]	; (1858 <z_nrf_clock_control_lf_on+0x134>)
    1748:	604b      	str	r3, [r1, #4]
    174a:	60cb      	str	r3, [r1, #12]
    174c:	608a      	str	r2, [r1, #8]
    174e:	f7ff fd03 	bl	1158 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    1752:	2800      	cmp	r0, #0
    1754:	da0b      	bge.n	176e <z_nrf_clock_control_lf_on+0x4a>
    1756:	4941      	ldr	r1, [pc, #260]	; (185c <z_nrf_clock_control_lf_on+0x138>)
    1758:	4841      	ldr	r0, [pc, #260]	; (1860 <z_nrf_clock_control_lf_on+0x13c>)
    175a:	4a42      	ldr	r2, [pc, #264]	; (1864 <z_nrf_clock_control_lf_on+0x140>)
    175c:	f240 2321 	movw	r3, #545	; 0x221
    1760:	f003 ffbf 	bl	56e2 <printk>
    1764:	483f      	ldr	r0, [pc, #252]	; (1864 <z_nrf_clock_control_lf_on+0x140>)
    1766:	f240 2121 	movw	r1, #545	; 0x221
    176a:	f004 f8c5 	bl	58f8 <assert_post_action>
	switch (start_mode) {
    176e:	b3ad      	cbz	r5, 17dc <z_nrf_clock_control_lf_on+0xb8>
    1770:	1e6b      	subs	r3, r5, #1
    1772:	2b01      	cmp	r3, #1
    1774:	d856      	bhi.n	1824 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1776:	2d01      	cmp	r5, #1
    1778:	d107      	bne.n	178a <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    177a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    177e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1782:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1786:	2b01      	cmp	r3, #1
    1788:	d028      	beq.n	17dc <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    178a:	f004 fa5a 	bl	5c42 <k_is_in_isr>
    178e:	4604      	mov	r4, r0
    1790:	b918      	cbnz	r0, 179a <z_nrf_clock_control_lf_on+0x76>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1792:	4b35      	ldr	r3, [pc, #212]	; (1868 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    1794:	781b      	ldrb	r3, [r3, #0]
    1796:	2b00      	cmp	r3, #0
    1798:	d152      	bne.n	1840 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    179a:	f04f 0320 	mov.w	r3, #32
    179e:	f3ef 8611 	mrs	r6, BASEPRI
    17a2:	f383 8811 	msr	BASEPRI, r3
    17a6:	f3bf 8f6f 	isb	sy
    17aa:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    17ac:	4f2f      	ldr	r7, [pc, #188]	; (186c <z_nrf_clock_control_lf_on+0x148>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17ae:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1874 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    17b2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 1878 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    17b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    17ba:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    17be:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    17c2:	03d2      	lsls	r2, r2, #15
    17c4:	d50c      	bpl.n	17e0 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    17c6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    17ca:	2b01      	cmp	r3, #1
    17cc:	d001      	beq.n	17d2 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    17ce:	2d01      	cmp	r5, #1
    17d0:	d106      	bne.n	17e0 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    17d2:	b30c      	cbz	r4, 1818 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    17d4:	f386 8811 	msr	BASEPRI, r6
    17d8:	f3bf 8f6f 	isb	sy
}
    17dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    17e0:	b1ac      	cbz	r4, 180e <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    17e2:	4630      	mov	r0, r6
    17e4:	f000 fbb4 	bl	1f50 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    17e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    17ec:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    17f0:	2b00      	cmp	r3, #0
    17f2:	d1e0      	bne.n	17b6 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    17f4:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    17f6:	2900      	cmp	r1, #0
    17f8:	d0dd      	beq.n	17b6 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    17fa:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    17fc:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    17fe:	2301      	movs	r3, #1
    1800:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    1804:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1808:	f8c9 3000 	str.w	r3, [r9]
}
    180c:	e7d3      	b.n	17b6 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    180e:	2100      	movs	r1, #0
    1810:	2021      	movs	r0, #33	; 0x21
    1812:	f003 f9b1 	bl	4b78 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1816:	e7e7      	b.n	17e8 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    1818:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    181c:	2202      	movs	r2, #2
    181e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1822:	e7db      	b.n	17dc <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    1824:	4912      	ldr	r1, [pc, #72]	; (1870 <z_nrf_clock_control_lf_on+0x14c>)
    1826:	480e      	ldr	r0, [pc, #56]	; (1860 <z_nrf_clock_control_lf_on+0x13c>)
    1828:	4a0e      	ldr	r2, [pc, #56]	; (1864 <z_nrf_clock_control_lf_on+0x140>)
    182a:	f240 2333 	movw	r3, #563	; 0x233
    182e:	f003 ff58 	bl	56e2 <printk>
}
    1832:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    1836:	480b      	ldr	r0, [pc, #44]	; (1864 <z_nrf_clock_control_lf_on+0x140>)
    1838:	f240 2133 	movw	r1, #563	; 0x233
    183c:	f004 b85c 	b.w	58f8 <assert_post_action>
    p_reg->INTENCLR = mask;
    1840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1844:	2202      	movs	r2, #2
    1846:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    184a:	4606      	mov	r6, r0
}
    184c:	e7ae      	b.n	17ac <z_nrf_clock_control_lf_on+0x88>
    184e:	bf00      	nop
    1850:	2000064c 	.word	0x2000064c
    1854:	200005e0 	.word	0x200005e0
    1858:	20000610 	.word	0x20000610
    185c:	0000679f 	.word	0x0000679f
    1860:	00005fa5 	.word	0x00005fa5
    1864:	0000673e 	.word	0x0000673e
    1868:	20000bc3 	.word	0x20000bc3
    186c:	40000104 	.word	0x40000104
    1870:	0000747a 	.word	0x0000747a
    1874:	e000e100 	.word	0xe000e100
    1878:	40000008 	.word	0x40000008

0000187c <wdt_nrf_install_timeout>:
	return -EPERM;
}

static int wdt_nrf_install_timeout(const struct device *dev,
				   const struct wdt_timeout_cfg *cfg)
{
    187c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrfx_err_t err_code;
	nrfx_wdt_channel_id channel_id;

	if (cfg->flags != WDT_FLAG_RESET_SOC) {
    187e:	7b0b      	ldrb	r3, [r1, #12]
    1880:	2b02      	cmp	r3, #2
{
    1882:	4604      	mov	r4, r0
    1884:	460d      	mov	r5, r1
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
    1886:	d128      	bne.n	18da <wdt_nrf_install_timeout+0x5e>
		return -ENOTSUP;
	}

	if (cfg->window.min != 0U) {
    1888:	680b      	ldr	r3, [r1, #0]
    188a:	bb1b      	cbnz	r3, 18d4 <wdt_nrf_install_timeout+0x58>
		return -EINVAL;
	}

	if (get_dev_data(dev)->m_allocated_channels == 0U) {
    188c:	68c2      	ldr	r2, [r0, #12]
	return dev->data;
    188e:	684b      	ldr	r3, [r1, #4]
	if (get_dev_data(dev)->m_allocated_channels == 0U) {
    1890:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
    1894:	b9d9      	cbnz	r1, 18ce <wdt_nrf_install_timeout+0x52>
		 * in all nRF chips can use reload values (determining
		 * the timeout) from range 0xF-0xFFFFFFFF given in 32768 Hz
		 * clock ticks. This makes the allowed range of 0x1-0x07CFFFFF
		 * in milliseconds. Check if the provided value is within
		 * this range. */
		if ((cfg->window.max == 0U) || (cfg->window.max > 0x07CFFFFF)) {
    1896:	4914      	ldr	r1, [pc, #80]	; (18e8 <wdt_nrf_install_timeout+0x6c>)
    1898:	1e58      	subs	r0, r3, #1
    189a:	4288      	cmp	r0, r1
    189c:	d81a      	bhi.n	18d4 <wdt_nrf_install_timeout+0x58>
			return -EINVAL;
		}

		/* Save timeout value from first registered watchdog channel. */
		get_dev_data(dev)->m_timeout = cfg->window.max;
    189e:	6213      	str	r3, [r2, #32]
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
		return -EINVAL;
	}

	err_code = nrfx_wdt_channel_alloc(&get_dev_config(dev)->wdt,
    18a0:	6860      	ldr	r0, [r4, #4]
    18a2:	f10d 0107 	add.w	r1, sp, #7
    18a6:	f001 ff35 	bl	3714 <nrfx_wdt_channel_alloc>
					  &channel_id);

	if (err_code == NRFX_ERROR_NO_MEM) {
    18aa:	4b10      	ldr	r3, [pc, #64]	; (18ec <wdt_nrf_install_timeout+0x70>)
    18ac:	4298      	cmp	r0, r3
    18ae:	d017      	beq.n	18e0 <wdt_nrf_install_timeout+0x64>
		return -ENOMEM;
	}

	if (cfg->callback != NULL) {
    18b0:	68ab      	ldr	r3, [r5, #8]
    18b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    18b6:	b113      	cbz	r3, 18be <wdt_nrf_install_timeout+0x42>
    18b8:	68e2      	ldr	r2, [r4, #12]
		get_dev_data(dev)->m_callbacks[channel_id] = cfg->callback;
    18ba:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}

	get_dev_data(dev)->m_allocated_channels++;
    18be:	68e2      	ldr	r2, [r4, #12]
    18c0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    18c4:	3301      	adds	r3, #1
    18c6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return channel_id;
}
    18ca:	b003      	add	sp, #12
    18cc:	bd30      	pop	{r4, r5, pc}
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
    18ce:	6a12      	ldr	r2, [r2, #32]
    18d0:	429a      	cmp	r2, r3
    18d2:	d0e5      	beq.n	18a0 <wdt_nrf_install_timeout+0x24>
		return -EINVAL;
    18d4:	f06f 0015 	mvn.w	r0, #21
    18d8:	e7f7      	b.n	18ca <wdt_nrf_install_timeout+0x4e>
		return -ENOTSUP;
    18da:	f06f 0022 	mvn.w	r0, #34	; 0x22
    18de:	e7f4      	b.n	18ca <wdt_nrf_install_timeout+0x4e>
		return -ENOMEM;
    18e0:	f06f 000b 	mvn.w	r0, #11
    18e4:	e7f1      	b.n	18ca <wdt_nrf_install_timeout+0x4e>
    18e6:	bf00      	nop
    18e8:	07cffffe 	.word	0x07cffffe
    18ec:	0bad0002 	.word	0x0bad0002

000018f0 <wdt_0_init>:
			    &wdt_##idx##z_config,			       \
			    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,  \
			    &wdt_nrfx_driver_api)

#ifdef CONFIG_NRFX_WDT0
WDT_NRFX_WDT_DEVICE(0);
    18f0:	b510      	push	{r4, lr}
    18f2:	4604      	mov	r4, r0
    18f4:	2200      	movs	r2, #0
    18f6:	2101      	movs	r1, #1
    18f8:	2010      	movs	r0, #16
    18fa:	f000 fa05 	bl	1d08 <z_arm_irq_priority_set>
    18fe:	6860      	ldr	r0, [r4, #4]
    1900:	4a05      	ldr	r2, [pc, #20]	; (1918 <wdt_0_init+0x28>)
    1902:	f100 0108 	add.w	r1, r0, #8
    1906:	f001 fe79 	bl	35fc <nrfx_wdt_init>
    190a:	4b04      	ldr	r3, [pc, #16]	; (191c <wdt_0_init+0x2c>)
    190c:	4298      	cmp	r0, r3
    190e:	bf14      	ite	ne
    1910:	f06f 000f 	mvnne.w	r0, #15
    1914:	2000      	moveq	r0, #0
    1916:	bd10      	pop	{r4, pc}
    1918:	00001921 	.word	0x00001921
    191c:	0bad0000 	.word	0x0bad0000

00001920 <wdt_0_event_handler>:
    1920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
    1922:	4d0b      	ldr	r5, [pc, #44]	; (1950 <wdt_0_event_handler+0x30>)
}

NRF_STATIC_INLINE bool nrf_wdt_request_status(NRF_WDT_Type const *  p_reg,
                                              nrf_wdt_rr_register_t rr_register)
{
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
    1924:	4e0b      	ldr	r6, [pc, #44]	; (1954 <wdt_0_event_handler+0x34>)
				get_dev_data(dev)->m_callbacks[i](dev, i);
    1926:	4f0c      	ldr	r7, [pc, #48]	; (1958 <wdt_0_event_handler+0x38>)
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
    1928:	2400      	movs	r4, #0
    192a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
    192e:	429c      	cmp	r4, r3
    1930:	db00      	blt.n	1934 <wdt_0_event_handler+0x14>
WDT_NRFX_WDT_DEVICE(0);
    1932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1934:	f8d6 3404 	ldr.w	r3, [r6, #1028]	; 0x404
    1938:	40e3      	lsrs	r3, r4
		if (nrf_wdt_request_status(get_dev_config(dev)->wdt.p_reg,
    193a:	07db      	lsls	r3, r3, #31
    193c:	d505      	bpl.n	194a <wdt_0_event_handler+0x2a>
			if (get_dev_data(dev)->m_callbacks[i]) {
    193e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    1942:	b113      	cbz	r3, 194a <wdt_0_event_handler+0x2a>
				get_dev_data(dev)->m_callbacks[i](dev, i);
    1944:	4621      	mov	r1, r4
    1946:	4638      	mov	r0, r7
    1948:	4798      	blx	r3
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
    194a:	3401      	adds	r4, #1
    194c:	e7ed      	b.n	192a <wdt_0_event_handler+0xa>
    194e:	bf00      	nop
    1950:	20000650 	.word	0x20000650
    1954:	40010000 	.word	0x40010000
    1958:	20000030 	.word	0x20000030

0000195c <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    195c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    195e:	4c06      	ldr	r4, [pc, #24]	; (1978 <z_clock_isr+0x1c>)
    1960:	4906      	ldr	r1, [pc, #24]	; (197c <z_clock_isr+0x20>)
    1962:	4807      	ldr	r0, [pc, #28]	; (1980 <z_clock_isr+0x24>)
    1964:	4622      	mov	r2, r4
    1966:	2317      	movs	r3, #23
    1968:	f003 febb 	bl	56e2 <printk>
    196c:	4620      	mov	r0, r4
    196e:	2117      	movs	r1, #23
}
    1970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    1974:	f003 bfc0 	b.w	58f8 <assert_post_action>
    1978:	000067d1 	.word	0x000067d1
    197c:	0000747a 	.word	0x0000747a
    1980:	00005fa5 	.word	0x00005fa5

00001984 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    1984:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    1986:	4b08      	ldr	r3, [pc, #32]	; (19a8 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1988:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    198c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    1990:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    1994:	4290      	cmp	r0, r2
    1996:	d100      	bne.n	199a <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    1998:	4770      	bx	lr
    199a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    199e:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    19a0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    19a4:	e7f2      	b.n	198c <handle_next_cycle_case+0x8>
    19a6:	bf00      	nop
    19a8:	40011000 	.word	0x40011000

000019ac <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    19ac:	4b07      	ldr	r3, [pc, #28]	; (19cc <rtc_nrf_isr+0x20>)
    19ae:	2200      	movs	r2, #0
    19b0:	601a      	str	r2, [r3, #0]
    19b2:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    19b4:	4a06      	ldr	r2, [pc, #24]	; (19d0 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
    19b6:	4b07      	ldr	r3, [pc, #28]	; (19d4 <rtc_nrf_isr+0x28>)
    19b8:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    19bc:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    19be:	1ac0      	subs	r0, r0, r3
    19c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    19c4:	4403      	add	r3, r0
    19c6:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    19c8:	f003 bd0a 	b.w	53e0 <z_clock_announce>
    19cc:	40011140 	.word	0x40011140
    19d0:	20000678 	.word	0x20000678
    19d4:	40011000 	.word	0x40011000

000019d8 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
    19d8:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    19da:	4d10      	ldr	r5, [pc, #64]	; (1a1c <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    19dc:	4b10      	ldr	r3, [pc, #64]	; (1a20 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
    19de:	2400      	movs	r4, #0
    19e0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    19e4:	601c      	str	r4, [r3, #0]
    19e6:	681b      	ldr	r3, [r3, #0]
    19e8:	4b0e      	ldr	r3, [pc, #56]	; (1a24 <z_clock_driver_init+0x4c>)
    19ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    19ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    19f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    19f6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    19fa:	4622      	mov	r2, r4
    19fc:	2101      	movs	r1, #1
    19fe:	2011      	movs	r0, #17
    1a00:	f000 f982 	bl	1d08 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    1a04:	2011      	movs	r0, #17
    1a06:	f000 f961 	bl	1ccc <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1a0a:	4a07      	ldr	r2, [pc, #28]	; (1a28 <z_clock_driver_init+0x50>)
    1a0c:	2301      	movs	r3, #1
    1a0e:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    1a10:	2002      	movs	r0, #2
    1a12:	602b      	str	r3, [r5, #0]
    1a14:	f7ff fe86 	bl	1724 <z_nrf_clock_control_lf_on>

	return 0;
}
    1a18:	4620      	mov	r0, r4
    1a1a:	bd38      	pop	{r3, r4, r5, pc}
    1a1c:	40011000 	.word	0x40011000
    1a20:	40011140 	.word	0x40011140
    1a24:	e000e100 	.word	0xe000e100
    1a28:	40011008 	.word	0x40011008

00001a2c <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    1a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
    1a2e:	4b2b      	ldr	r3, [pc, #172]	; (1adc <z_clock_set_timeout+0xb0>)
     return p_reg->COUNTER;
    1a30:	4c2b      	ldr	r4, [pc, #172]	; (1ae0 <z_clock_set_timeout+0xb4>)
    1a32:	6819      	ldr	r1, [r3, #0]
    1a34:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1a38:	4d2a      	ldr	r5, [pc, #168]	; (1ae4 <z_clock_set_timeout+0xb8>)
	return (a - b) & COUNTER_MAX;
    1a3a:	1a52      	subs	r2, r2, r1
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1a3c:	f1b0 3fff 	cmp.w	r0, #4294967295
    1a40:	bf08      	it	eq
    1a42:	4628      	moveq	r0, r5
	return (a - b) & COUNTER_MAX;
    1a44:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    1a48:	0212      	lsls	r2, r2, #8
    1a4a:	d436      	bmi.n	1aba <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    1a4c:	3801      	subs	r0, #1
    1a4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    1a52:	42a8      	cmp	r0, r5
    1a54:	bfa8      	it	ge
    1a56:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1a58:	3301      	adds	r3, #1
    1a5a:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    1a5c:	42a8      	cmp	r0, r5
    1a5e:	bf94      	ite	ls
    1a60:	180d      	addls	r5, r1, r0
    1a62:	194d      	addhi	r5, r1, r5
    p_reg->INTENCLR = mask;
    1a64:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1a68:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
     return p_reg->COUNTER;
    1a6c:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    1a70:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1a74:	4e1c      	ldr	r6, [pc, #112]	; (1ae8 <z_clock_set_timeout+0xbc>)
    1a76:	2700      	movs	r7, #0
	return (a - b) & COUNTER_MAX;
    1a78:	1a9b      	subs	r3, r3, r2
    1a7a:	6037      	str	r7, [r6, #0]
    1a7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1a80:	6830      	ldr	r0, [r6, #0]
	if (counter_sub(prev_val, now) == 1) {
    1a82:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1a84:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1a88:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1a8c:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
    1a90:	d104      	bne.n	1a9c <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
    1a92:	200f      	movs	r0, #15
    1a94:	f004 f8db 	bl	5c4e <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1a98:	6037      	str	r7, [r6, #0]
    1a9a:	6833      	ldr	r3, [r6, #0]
    1a9c:	4b13      	ldr	r3, [pc, #76]	; (1aec <z_clock_set_timeout+0xc0>)
    1a9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1aa2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    1aa6:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1aaa:	1a2b      	subs	r3, r5, r0
    1aac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    1ab0:	2b01      	cmp	r3, #1
    1ab2:	d104      	bne.n	1abe <z_clock_set_timeout+0x92>
		handle_next_cycle_case(t);
    1ab4:	f7ff ff66 	bl	1984 <handle_next_cycle_case>
    1ab8:	e00b      	b.n	1ad2 <z_clock_set_timeout+0xa6>
		ticks = 0;
    1aba:	2000      	movs	r0, #0
    1abc:	e7cc      	b.n	1a58 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1abe:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1ac2:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    1ac6:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1aca:	1a2d      	subs	r5, r5, r0
    1acc:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
    1ace:	022b      	lsls	r3, r5, #8
    1ad0:	d4f0      	bmi.n	1ab4 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
    1ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1ad6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    1ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1adc:	20000678 	.word	0x20000678
    1ae0:	40011000 	.word	0x40011000
    1ae4:	007fffff 	.word	0x007fffff
    1ae8:	40011140 	.word	0x40011140
    1aec:	e000e100 	.word	0xe000e100

00001af0 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
    1af0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    1af2:	f04f 0320 	mov.w	r3, #32
    1af6:	f3ef 8511 	mrs	r5, BASEPRI
    1afa:	f383 8811 	msr	BASEPRI, r3
    1afe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1b02:	481a      	ldr	r0, [pc, #104]	; (1b6c <z_clock_elapsed+0x7c>)
    1b04:	f003 fa40 	bl	4f88 <z_spin_lock_valid>
    1b08:	b968      	cbnz	r0, 1b26 <z_clock_elapsed+0x36>
    1b0a:	4a19      	ldr	r2, [pc, #100]	; (1b70 <z_clock_elapsed+0x80>)
    1b0c:	4919      	ldr	r1, [pc, #100]	; (1b74 <z_clock_elapsed+0x84>)
    1b0e:	481a      	ldr	r0, [pc, #104]	; (1b78 <z_clock_elapsed+0x88>)
    1b10:	235c      	movs	r3, #92	; 0x5c
    1b12:	f003 fde6 	bl	56e2 <printk>
    1b16:	4915      	ldr	r1, [pc, #84]	; (1b6c <z_clock_elapsed+0x7c>)
    1b18:	4818      	ldr	r0, [pc, #96]	; (1b7c <z_clock_elapsed+0x8c>)
    1b1a:	f003 fde2 	bl	56e2 <printk>
    1b1e:	4814      	ldr	r0, [pc, #80]	; (1b70 <z_clock_elapsed+0x80>)
    1b20:	215c      	movs	r1, #92	; 0x5c
    1b22:	f003 fee9 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    1b26:	4811      	ldr	r0, [pc, #68]	; (1b6c <z_clock_elapsed+0x7c>)
    1b28:	f003 fa4c 	bl	4fc4 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    1b2c:	4b14      	ldr	r3, [pc, #80]	; (1b80 <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1b2e:	480f      	ldr	r0, [pc, #60]	; (1b6c <z_clock_elapsed+0x7c>)
    1b30:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1b34:	4b13      	ldr	r3, [pc, #76]	; (1b84 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
    1b36:	681b      	ldr	r3, [r3, #0]
    1b38:	1ae4      	subs	r4, r4, r3
    1b3a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    1b3e:	f003 fa31 	bl	4fa4 <z_spin_unlock_valid>
    1b42:	b968      	cbnz	r0, 1b60 <z_clock_elapsed+0x70>
    1b44:	4a0a      	ldr	r2, [pc, #40]	; (1b70 <z_clock_elapsed+0x80>)
    1b46:	4910      	ldr	r1, [pc, #64]	; (1b88 <z_clock_elapsed+0x98>)
    1b48:	480b      	ldr	r0, [pc, #44]	; (1b78 <z_clock_elapsed+0x88>)
    1b4a:	2384      	movs	r3, #132	; 0x84
    1b4c:	f003 fdc9 	bl	56e2 <printk>
    1b50:	4906      	ldr	r1, [pc, #24]	; (1b6c <z_clock_elapsed+0x7c>)
    1b52:	480e      	ldr	r0, [pc, #56]	; (1b8c <z_clock_elapsed+0x9c>)
    1b54:	f003 fdc5 	bl	56e2 <printk>
    1b58:	4805      	ldr	r0, [pc, #20]	; (1b70 <z_clock_elapsed+0x80>)
    1b5a:	2184      	movs	r1, #132	; 0x84
    1b5c:	f003 fecc 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    1b60:	f385 8811 	msr	BASEPRI, r5
    1b64:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1b68:	4620      	mov	r0, r4
    1b6a:	bd38      	pop	{r3, r4, r5, pc}
    1b6c:	2000067c 	.word	0x2000067c
    1b70:	00006562 	.word	0x00006562
    1b74:	000065ad 	.word	0x000065ad
    1b78:	00005fa5 	.word	0x00005fa5
    1b7c:	000065c2 	.word	0x000065c2
    1b80:	40011000 	.word	0x40011000
    1b84:	20000678 	.word	0x20000678
    1b88:	00006581 	.word	0x00006581
    1b8c:	00006598 	.word	0x00006598

00001b90 <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
    1b90:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    1b92:	f04f 0320 	mov.w	r3, #32
    1b96:	f3ef 8511 	mrs	r5, BASEPRI
    1b9a:	f383 8811 	msr	BASEPRI, r3
    1b9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1ba2:	481b      	ldr	r0, [pc, #108]	; (1c10 <z_timer_cycle_get_32+0x80>)
    1ba4:	f003 f9f0 	bl	4f88 <z_spin_lock_valid>
    1ba8:	b968      	cbnz	r0, 1bc6 <z_timer_cycle_get_32+0x36>
    1baa:	4a1a      	ldr	r2, [pc, #104]	; (1c14 <z_timer_cycle_get_32+0x84>)
    1bac:	491a      	ldr	r1, [pc, #104]	; (1c18 <z_timer_cycle_get_32+0x88>)
    1bae:	481b      	ldr	r0, [pc, #108]	; (1c1c <z_timer_cycle_get_32+0x8c>)
    1bb0:	235c      	movs	r3, #92	; 0x5c
    1bb2:	f003 fd96 	bl	56e2 <printk>
    1bb6:	4916      	ldr	r1, [pc, #88]	; (1c10 <z_timer_cycle_get_32+0x80>)
    1bb8:	4819      	ldr	r0, [pc, #100]	; (1c20 <z_timer_cycle_get_32+0x90>)
    1bba:	f003 fd92 	bl	56e2 <printk>
    1bbe:	4815      	ldr	r0, [pc, #84]	; (1c14 <z_timer_cycle_get_32+0x84>)
    1bc0:	215c      	movs	r1, #92	; 0x5c
    1bc2:	f003 fe99 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    1bc6:	4812      	ldr	r0, [pc, #72]	; (1c10 <z_timer_cycle_get_32+0x80>)
    1bc8:	f003 f9fc 	bl	4fc4 <z_spin_lock_set_owner>
    1bcc:	4b15      	ldr	r3, [pc, #84]	; (1c24 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1bce:	4810      	ldr	r0, [pc, #64]	; (1c10 <z_timer_cycle_get_32+0x80>)
    1bd0:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    1bd4:	4b14      	ldr	r3, [pc, #80]	; (1c28 <z_timer_cycle_get_32+0x98>)
    1bd6:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    1bd8:	1ae4      	subs	r4, r4, r3
    1bda:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    1bde:	441c      	add	r4, r3
    1be0:	f003 f9e0 	bl	4fa4 <z_spin_unlock_valid>
    1be4:	b968      	cbnz	r0, 1c02 <z_timer_cycle_get_32+0x72>
    1be6:	4a0b      	ldr	r2, [pc, #44]	; (1c14 <z_timer_cycle_get_32+0x84>)
    1be8:	4910      	ldr	r1, [pc, #64]	; (1c2c <z_timer_cycle_get_32+0x9c>)
    1bea:	480c      	ldr	r0, [pc, #48]	; (1c1c <z_timer_cycle_get_32+0x8c>)
    1bec:	2384      	movs	r3, #132	; 0x84
    1bee:	f003 fd78 	bl	56e2 <printk>
    1bf2:	4907      	ldr	r1, [pc, #28]	; (1c10 <z_timer_cycle_get_32+0x80>)
    1bf4:	480e      	ldr	r0, [pc, #56]	; (1c30 <z_timer_cycle_get_32+0xa0>)
    1bf6:	f003 fd74 	bl	56e2 <printk>
    1bfa:	4806      	ldr	r0, [pc, #24]	; (1c14 <z_timer_cycle_get_32+0x84>)
    1bfc:	2184      	movs	r1, #132	; 0x84
    1bfe:	f003 fe7b 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    1c02:	f385 8811 	msr	BASEPRI, r5
    1c06:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1c0a:	4620      	mov	r0, r4
    1c0c:	bd38      	pop	{r3, r4, r5, pc}
    1c0e:	bf00      	nop
    1c10:	2000067c 	.word	0x2000067c
    1c14:	00006562 	.word	0x00006562
    1c18:	000065ad 	.word	0x000065ad
    1c1c:	00005fa5 	.word	0x00005fa5
    1c20:	000065c2 	.word	0x000065c2
    1c24:	40011000 	.word	0x40011000
    1c28:	20000678 	.word	0x20000678
    1c2c:	00006581 	.word	0x00006581
    1c30:	00006598 	.word	0x00006598

00001c34 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    1c34:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1c36:	4c11      	ldr	r4, [pc, #68]	; (1c7c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    1c38:	4a11      	ldr	r2, [pc, #68]	; (1c80 <_DoInit+0x4c>)
    1c3a:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1c3c:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1c3e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    1c42:	4b10      	ldr	r3, [pc, #64]	; (1c84 <_DoInit+0x50>)
    1c44:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    1c46:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    1c4c:	4a0e      	ldr	r2, [pc, #56]	; (1c88 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    1c4e:	490f      	ldr	r1, [pc, #60]	; (1c8c <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1c50:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    1c52:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    1c54:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1c56:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    1c58:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    1c5a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1c5c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1c5e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1c60:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1c62:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1c64:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1c66:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    1c68:	f003 feee 	bl	5a48 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    1c6c:	4908      	ldr	r1, [pc, #32]	; (1c90 <_DoInit+0x5c>)
    1c6e:	4620      	mov	r0, r4
    1c70:	f003 feea 	bl	5a48 <strcpy>
  p->acID[6] = ' ';
    1c74:	2320      	movs	r3, #32
    1c76:	71a3      	strb	r3, [r4, #6]
}
    1c78:	bd10      	pop	{r4, pc}
    1c7a:	bf00      	nop
    1c7c:	20000680 	.word	0x20000680
    1c80:	0000680d 	.word	0x0000680d
    1c84:	200007c1 	.word	0x200007c1
    1c88:	200007b1 	.word	0x200007b1
    1c8c:	00006816 	.word	0x00006816
    1c90:	0000681a 	.word	0x0000681a

00001c94 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1c94:	4a0a      	ldr	r2, [pc, #40]	; (1cc0 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1c96:	490b      	ldr	r1, [pc, #44]	; (1cc4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1c98:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1c9a:	6809      	ldr	r1, [r1, #0]
    1c9c:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1ca0:	4909      	ldr	r1, [pc, #36]	; (1cc8 <arch_swap+0x34>)
	_current->arch.basepri = key;
    1ca2:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1ca6:	684b      	ldr	r3, [r1, #4]
    1ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1cac:	604b      	str	r3, [r1, #4]
    1cae:	2300      	movs	r3, #0
    1cb0:	f383 8811 	msr	BASEPRI, r3
    1cb4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1cb8:	6893      	ldr	r3, [r2, #8]
}
    1cba:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    1cbe:	4770      	bx	lr
    1cc0:	20000760 	.word	0x20000760
    1cc4:	00005f0c 	.word	0x00005f0c
    1cc8:	e000ed00 	.word	0xe000ed00

00001ccc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1ccc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1cce:	2b00      	cmp	r3, #0
    1cd0:	db08      	blt.n	1ce4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cd2:	2201      	movs	r2, #1
    1cd4:	f000 001f 	and.w	r0, r0, #31
    1cd8:	fa02 f000 	lsl.w	r0, r2, r0
    1cdc:	095b      	lsrs	r3, r3, #5
    1cde:	4a02      	ldr	r2, [pc, #8]	; (1ce8 <arch_irq_enable+0x1c>)
    1ce0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1ce4:	4770      	bx	lr
    1ce6:	bf00      	nop
    1ce8:	e000e100 	.word	0xe000e100

00001cec <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1cec:	4b05      	ldr	r3, [pc, #20]	; (1d04 <arch_irq_is_enabled+0x18>)
    1cee:	0942      	lsrs	r2, r0, #5
    1cf0:	f000 001f 	and.w	r0, r0, #31
    1cf4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1cf8:	2301      	movs	r3, #1
    1cfa:	fa03 f000 	lsl.w	r0, r3, r0
}
    1cfe:	4010      	ands	r0, r2
    1d00:	4770      	bx	lr
    1d02:	bf00      	nop
    1d04:	e000e100 	.word	0xe000e100

00001d08 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1d08:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    1d0a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1d0c:	2c07      	cmp	r4, #7
{
    1d0e:	4605      	mov	r5, r0
    1d10:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1d12:	d90e      	bls.n	1d32 <z_arm_irq_priority_set+0x2a>
    1d14:	4a10      	ldr	r2, [pc, #64]	; (1d58 <z_arm_irq_priority_set+0x50>)
    1d16:	4911      	ldr	r1, [pc, #68]	; (1d5c <z_arm_irq_priority_set+0x54>)
    1d18:	4811      	ldr	r0, [pc, #68]	; (1d60 <z_arm_irq_priority_set+0x58>)
    1d1a:	235b      	movs	r3, #91	; 0x5b
    1d1c:	f003 fce1 	bl	56e2 <printk>
    1d20:	4810      	ldr	r0, [pc, #64]	; (1d64 <z_arm_irq_priority_set+0x5c>)
    1d22:	4631      	mov	r1, r6
    1d24:	2207      	movs	r2, #7
    1d26:	f003 fcdc 	bl	56e2 <printk>
    1d2a:	480b      	ldr	r0, [pc, #44]	; (1d58 <z_arm_irq_priority_set+0x50>)
    1d2c:	215b      	movs	r1, #91	; 0x5b
    1d2e:	f003 fde3 	bl	58f8 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1d32:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1d34:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d36:	bfac      	ite	ge
    1d38:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d3c:	4b0a      	ldrlt	r3, [pc, #40]	; (1d68 <z_arm_irq_priority_set+0x60>)
    1d3e:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1d42:	bfb8      	it	lt
    1d44:	f005 050f 	andlt.w	r5, r5, #15
    1d48:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d4a:	bfaa      	itet	ge
    1d4c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d50:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d52:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    1d56:	bd70      	pop	{r4, r5, r6, pc}
    1d58:	00006821 	.word	0x00006821
    1d5c:	00006857 	.word	0x00006857
    1d60:	00005fa5 	.word	0x00005fa5
    1d64:	00006872 	.word	0x00006872
    1d68:	e000ed14 	.word	0xe000ed14

00001d6c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1d6c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1d70:	9b00      	ldr	r3, [sp, #0]
    1d72:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1d76:	490a      	ldr	r1, [pc, #40]	; (1da0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1d78:	9b01      	ldr	r3, [sp, #4]
    1d7a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1d7e:	9b02      	ldr	r3, [sp, #8]
    1d80:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1d84:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1d8c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1d90:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1d94:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1d96:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1d98:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    1d9a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1d9e:	4770      	bx	lr
    1da0:	000057bf 	.word	0x000057bf

00001da4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1da4:	4a0c      	ldr	r2, [pc, #48]	; (1dd8 <z_check_thread_stack_fail+0x34>)
{
    1da6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1da8:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    1daa:	b198      	cbz	r0, 1dd4 <z_check_thread_stack_fail+0x30>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1dac:	f113 0f16 	cmn.w	r3, #22
    1db0:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    1db4:	d005      	beq.n	1dc2 <z_check_thread_stack_fail+0x1e>
    1db6:	f1a0 0220 	sub.w	r2, r0, #32
    1dba:	429a      	cmp	r2, r3
    1dbc:	d806      	bhi.n	1dcc <z_check_thread_stack_fail+0x28>
    1dbe:	4283      	cmp	r3, r0
    1dc0:	d204      	bcs.n	1dcc <z_check_thread_stack_fail+0x28>
    1dc2:	4281      	cmp	r1, r0
    1dc4:	bf2c      	ite	cs
    1dc6:	2100      	movcs	r1, #0
    1dc8:	2101      	movcc	r1, #1
    1dca:	e000      	b.n	1dce <z_check_thread_stack_fail+0x2a>
    1dcc:	2100      	movs	r1, #0
    1dce:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1dd0:	bf08      	it	eq
    1dd2:	2000      	moveq	r0, #0
}
    1dd4:	4770      	bx	lr
    1dd6:	bf00      	nop
    1dd8:	20000760 	.word	0x20000760

00001ddc <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1ddc:	b508      	push	{r3, lr}
    1dde:	4604      	mov	r4, r0
    1de0:	460e      	mov	r6, r1
    1de2:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    1de4:	f000 fb48 	bl	2478 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1de8:	4b08      	ldr	r3, [pc, #32]	; (1e0c <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1dea:	4620      	mov	r0, r4
	_current = main_thread;
    1dec:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1dee:	f000 fb5f 	bl	24b0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1df2:	4628      	mov	r0, r5
    1df4:	f386 8809 	msr	PSP, r6
    1df8:	2100      	movs	r1, #0
    1dfa:	b663      	cpsie	if
    1dfc:	f381 8811 	msr	BASEPRI, r1
    1e00:	f3bf 8f6f 	isb	sy
    1e04:	2200      	movs	r2, #0
    1e06:	2300      	movs	r3, #0
    1e08:	f003 fcd9 	bl	57be <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1e0c:	20000760 	.word	0x20000760

00001e10 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1e12:	4605      	mov	r5, r0

	if (esf != NULL) {
    1e14:	460c      	mov	r4, r1
    1e16:	b1c9      	cbz	r1, 1e4c <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1e18:	688b      	ldr	r3, [r1, #8]
    1e1a:	9300      	str	r3, [sp, #0]
    1e1c:	e9d1 2300 	ldrd	r2, r3, [r1]
    1e20:	480e      	ldr	r0, [pc, #56]	; (1e5c <z_arm_fatal_error+0x4c>)
    1e22:	2145      	movs	r1, #69	; 0x45
    1e24:	f003 fc5d 	bl	56e2 <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1e28:	6963      	ldr	r3, [r4, #20]
    1e2a:	9300      	str	r3, [sp, #0]
    1e2c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    1e30:	480b      	ldr	r0, [pc, #44]	; (1e60 <z_arm_fatal_error+0x50>)
    1e32:	2145      	movs	r1, #69	; 0x45
    1e34:	f003 fc55 	bl	56e2 <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1e38:	69e2      	ldr	r2, [r4, #28]
    1e3a:	480a      	ldr	r0, [pc, #40]	; (1e64 <z_arm_fatal_error+0x54>)
    1e3c:	2145      	movs	r1, #69	; 0x45
    1e3e:	f003 fc50 	bl	56e2 <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1e42:	69a2      	ldr	r2, [r4, #24]
    1e44:	4808      	ldr	r0, [pc, #32]	; (1e68 <z_arm_fatal_error+0x58>)
    1e46:	2145      	movs	r1, #69	; 0x45
    1e48:	f003 fc4b 	bl	56e2 <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1e4c:	4621      	mov	r1, r4
    1e4e:	4628      	mov	r0, r5
}
    1e50:	b003      	add	sp, #12
    1e52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    1e56:	f001 bd4f 	b.w	38f8 <z_fatal_error>
    1e5a:	bf00      	nop
    1e5c:	000068a7 	.word	0x000068a7
    1e60:	000068db 	.word	0x000068db
    1e64:	0000690f 	.word	0x0000690f
    1e68:	00006923 	.word	0x00006923

00001e6c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1e6c:	4a0e      	ldr	r2, [pc, #56]	; (1ea8 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1e6e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1e70:	4b0e      	ldr	r3, [pc, #56]	; (1eac <z_arm_prep_c+0x40>)
    1e72:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1e76:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1e78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e7c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1e80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1e84:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1e8c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1e90:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1e94:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1e98:	f001 fda4 	bl	39e4 <z_bss_zero>
	z_data_copy();
    1e9c:	f001 fdac 	bl	39f8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1ea0:	f000 fab2 	bl	2408 <z_arm_interrupt_init>
	z_cstart();
    1ea4:	f001 fdda 	bl	3a5c <z_cstart>
    1ea8:	00000000 	.word	0x00000000
    1eac:	e000ed00 	.word	0xe000ed00

00001eb0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1eb0:	4913      	ldr	r1, [pc, #76]	; (1f00 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1eb2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1eb4:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    1eb8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1eba:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1ebe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1ec2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ec4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1ec8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1ecc:	4f0d      	ldr	r7, [pc, #52]	; (1f04 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1ece:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1ed2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1ed4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1ed6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1ed8:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    movs r3, #0
    1edc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1ede:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1ee2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1ee6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1ee8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1eea:	f000 fae1 	bl	24b0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1eee:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1ef2:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    1ef6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1efa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    1efe:	4770      	bx	lr
    ldr r1, =_kernel
    1f00:	20000760 	.word	0x20000760
    ldr v4, =_SCS_ICSR
    1f04:	e000ed04 	.word	0xe000ed04

00001f08 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    1f08:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1f0c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1f0e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1f12:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1f16:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1f18:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1f1c:	2902      	cmp	r1, #2
    beq _oops
    1f1e:	d0ff      	beq.n	1f20 <_oops>

00001f20 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1f20:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1f22:	f003 fd86 	bl	5a32 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1f26:	bd01      	pop	{r0, pc}

00001f28 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1f28:	4901      	ldr	r1, [pc, #4]	; (1f30 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1f2a:	2210      	movs	r2, #16
	str	r2, [r1]
    1f2c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1f2e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1f30:	e000ed10 	.word	0xe000ed10

00001f34 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1f34:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1f36:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1f38:	f380 8811 	msr	BASEPRI, r0
	isb
    1f3c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1f40:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1f44:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1f46:	b662      	cpsie	i
	isb
    1f48:	f3bf 8f6f 	isb	sy

	bx	lr
    1f4c:	4770      	bx	lr
    1f4e:	bf00      	nop

00001f50 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1f50:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1f52:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1f54:	f381 8811 	msr	BASEPRI, r1

	wfe
    1f58:	bf20      	wfe

	msr	BASEPRI, r0
    1f5a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1f5e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1f60:	4770      	bx	lr
    1f62:	bf00      	nop

00001f64 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1f64:	bf30      	wfi
    b z_SysNmiOnReset
    1f66:	f7ff bffd 	b.w	1f64 <z_SysNmiOnReset>
    1f6a:	bf00      	nop

00001f6c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1f6c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1f6e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1f70:	4a0b      	ldr	r2, [pc, #44]	; (1fa0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1f72:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1f74:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1f76:	bf1e      	ittt	ne
	movne	r1, #0
    1f78:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1f7a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1f7c:	f003 fe30 	blne	5be0 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1f80:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1f82:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1f86:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1f8a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1f8e:	4905      	ldr	r1, [pc, #20]	; (1fa4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1f90:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1f92:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1f94:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1f96:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1f9a:	4903      	ldr	r1, [pc, #12]	; (1fa8 <_isr_wrapper+0x3c>)
	bx r1
    1f9c:	4708      	bx	r1
    1f9e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1fa0:	20000760 	.word	0x20000760
	ldr r1, =_sw_isr_table
    1fa4:	00005cc8 	.word	0x00005cc8
	ldr r1, =z_arm_int_exit
    1fa8:	00001ff1 	.word	0x00001ff1

00001fac <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1fac:	f003 fdc6 	bl	5b3c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1fb0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1fb2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1fb6:	4808      	ldr	r0, [pc, #32]	; (1fd8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1fb8:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1fbc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1fbe:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1fc2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1fc6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1fc8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1fca:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1fce:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1fd2:	f7ff ff4b 	bl	1e6c <z_arm_prep_c>
    1fd6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    1fd8:	20002a00 	.word	0x20002a00

00001fdc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1fdc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1fe0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1fe4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1fe6:	4672      	mov	r2, lr
	bl z_arm_fault
    1fe8:	f000 f93c 	bl	2264 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1fec:	bd01      	pop	{r0, pc}
    1fee:	bf00      	nop

00001ff0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1ff0:	4b04      	ldr	r3, [pc, #16]	; (2004 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1ff2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1ff4:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    1ff6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1ff8:	d003      	beq.n	2002 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1ffa:	4903      	ldr	r1, [pc, #12]	; (2008 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2000:	600a      	str	r2, [r1, #0]

00002002 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2002:	4770      	bx	lr
	ldr r3, =_kernel
    2004:	20000760 	.word	0x20000760
	ldr r1, =_SCS_ICSR
    2008:	e000ed04 	.word	0xe000ed04

0000200c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    200c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2010:	4c35      	ldr	r4, [pc, #212]	; (20e8 <mem_manage_fault+0xdc>)
{
    2012:	4606      	mov	r6, r0
    2014:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2016:	4835      	ldr	r0, [pc, #212]	; (20ec <mem_manage_fault+0xe0>)
    2018:	2145      	movs	r1, #69	; 0x45
{
    201a:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    201c:	f003 fb61 	bl	56e2 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2020:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2022:	06d7      	lsls	r7, r2, #27
    2024:	d503      	bpl.n	202e <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2026:	4832      	ldr	r0, [pc, #200]	; (20f0 <mem_manage_fault+0xe4>)
    2028:	2145      	movs	r1, #69	; 0x45
    202a:	f003 fb5a 	bl	56e2 <printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    202e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2030:	071c      	lsls	r4, r3, #28
    2032:	d503      	bpl.n	203c <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
    2034:	482f      	ldr	r0, [pc, #188]	; (20f4 <mem_manage_fault+0xe8>)
    2036:	2145      	movs	r1, #69	; 0x45
    2038:	f003 fb53 	bl	56e2 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    203c:	4c2a      	ldr	r4, [pc, #168]	; (20e8 <mem_manage_fault+0xdc>)
    203e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2040:	0798      	lsls	r0, r3, #30
    2042:	d53e      	bpl.n	20c2 <mem_manage_fault+0xb6>
		PR_FAULT_INFO("  Data Access Violation");
    2044:	2145      	movs	r1, #69	; 0x45
    2046:	482c      	ldr	r0, [pc, #176]	; (20f8 <mem_manage_fault+0xec>)
    2048:	f003 fb4b 	bl	56e2 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    204c:	6b67      	ldr	r7, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    204e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2050:	0619      	lsls	r1, r3, #24
    2052:	d50b      	bpl.n	206c <mem_manage_fault+0x60>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2054:	4829      	ldr	r0, [pc, #164]	; (20fc <mem_manage_fault+0xf0>)
    2056:	463a      	mov	r2, r7
    2058:	2145      	movs	r1, #69	; 0x45
    205a:	f003 fb42 	bl	56e2 <printk>
			if (from_hard_fault) {
    205e:	f1b8 0f00 	cmp.w	r8, #0
    2062:	d003      	beq.n	206c <mem_manage_fault+0x60>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2064:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    206a:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    206c:	4c1e      	ldr	r4, [pc, #120]	; (20e8 <mem_manage_fault+0xdc>)
    206e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2070:	07d2      	lsls	r2, r2, #31
    2072:	d503      	bpl.n	207c <mem_manage_fault+0x70>
		PR_FAULT_INFO("  Instruction Access Violation");
    2074:	4822      	ldr	r0, [pc, #136]	; (2100 <mem_manage_fault+0xf4>)
    2076:	2145      	movs	r1, #69	; 0x45
    2078:	f003 fb33 	bl	56e2 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    207c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    207e:	069b      	lsls	r3, r3, #26
    2080:	d503      	bpl.n	208a <mem_manage_fault+0x7e>
		PR_FAULT_INFO(
    2082:	4820      	ldr	r0, [pc, #128]	; (2104 <mem_manage_fault+0xf8>)
    2084:	2145      	movs	r1, #69	; 0x45
    2086:	f003 fb2c 	bl	56e2 <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    208a:	4b17      	ldr	r3, [pc, #92]	; (20e8 <mem_manage_fault+0xdc>)
    208c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    208e:	f014 0410 	ands.w	r4, r4, #16
    2092:	d00c      	beq.n	20ae <mem_manage_fault+0xa2>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2094:	685c      	ldr	r4, [r3, #4]
    2096:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    209a:	d008      	beq.n	20ae <mem_manage_fault+0xa2>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    209c:	4631      	mov	r1, r6
    209e:	4638      	mov	r0, r7
    20a0:	f7ff fe80 	bl	1da4 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
    20a4:	4604      	mov	r4, r0
    20a6:	b178      	cbz	r0, 20c8 <mem_manage_fault+0xbc>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    20a8:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    20ac:	2402      	movs	r4, #2
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    20ae:	4a0e      	ldr	r2, [pc, #56]	; (20e8 <mem_manage_fault+0xdc>)
    20b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    20b2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    20b6:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    20b8:	2300      	movs	r3, #0
    20ba:	702b      	strb	r3, [r5, #0]

	return reason;
}
    20bc:	4620      	mov	r0, r4
    20be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t mmfar = -EINVAL;
    20c2:	f06f 0715 	mvn.w	r7, #21
    20c6:	e7d1      	b.n	206c <mem_manage_fault+0x60>
				__ASSERT(0,
    20c8:	4a0f      	ldr	r2, [pc, #60]	; (2108 <mem_manage_fault+0xfc>)
    20ca:	4910      	ldr	r1, [pc, #64]	; (210c <mem_manage_fault+0x100>)
    20cc:	4810      	ldr	r0, [pc, #64]	; (2110 <mem_manage_fault+0x104>)
    20ce:	f44f 739c 	mov.w	r3, #312	; 0x138
    20d2:	f003 fb06 	bl	56e2 <printk>
    20d6:	480f      	ldr	r0, [pc, #60]	; (2114 <mem_manage_fault+0x108>)
    20d8:	f003 fb03 	bl	56e2 <printk>
    20dc:	480a      	ldr	r0, [pc, #40]	; (2108 <mem_manage_fault+0xfc>)
    20de:	f44f 719c 	mov.w	r1, #312	; 0x138
    20e2:	f003 fc09 	bl	58f8 <assert_post_action>
    20e6:	e7e2      	b.n	20ae <mem_manage_fault+0xa2>
    20e8:	e000ed00 	.word	0xe000ed00
    20ec:	00006956 	.word	0x00006956
    20f0:	00006971 	.word	0x00006971
    20f4:	000069a9 	.word	0x000069a9
    20f8:	000069c1 	.word	0x000069c1
    20fc:	000069de 	.word	0x000069de
    2100:	000069f9 	.word	0x000069f9
    2104:	00006a1d 	.word	0x00006a1d
    2108:	00006a51 	.word	0x00006a51
    210c:	0000747a 	.word	0x0000747a
    2110:	00005fa5 	.word	0x00005fa5
    2114:	00006a8b 	.word	0x00006a8b

00002118 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2118:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    211a:	4c23      	ldr	r4, [pc, #140]	; (21a8 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    211c:	4606      	mov	r6, r0
    211e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2120:	4822      	ldr	r0, [pc, #136]	; (21ac <bus_fault.isra.0+0x94>)
    2122:	2145      	movs	r1, #69	; 0x45
    2124:	f003 fadd 	bl	56e2 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2128:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    212a:	04d1      	lsls	r1, r2, #19
    212c:	d503      	bpl.n	2136 <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    212e:	4820      	ldr	r0, [pc, #128]	; (21b0 <bus_fault.isra.0+0x98>)
    2130:	2145      	movs	r1, #69	; 0x45
    2132:	f003 fad6 	bl	56e2 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2136:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2138:	051a      	lsls	r2, r3, #20
    213a:	d503      	bpl.n	2144 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    213c:	481d      	ldr	r0, [pc, #116]	; (21b4 <bus_fault.isra.0+0x9c>)
    213e:	2145      	movs	r1, #69	; 0x45
    2140:	f003 facf 	bl	56e2 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2144:	4c18      	ldr	r4, [pc, #96]	; (21a8 <bus_fault.isra.0+0x90>)
    2146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2148:	059b      	lsls	r3, r3, #22
    214a:	d510      	bpl.n	216e <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    214c:	481a      	ldr	r0, [pc, #104]	; (21b8 <bus_fault.isra.0+0xa0>)
    214e:	2145      	movs	r1, #69	; 0x45
    2150:	f003 fac7 	bl	56e2 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2154:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2156:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2158:	0418      	lsls	r0, r3, #16
    215a:	d508      	bpl.n	216e <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    215c:	4817      	ldr	r0, [pc, #92]	; (21bc <bus_fault.isra.0+0xa4>)
    215e:	2145      	movs	r1, #69	; 0x45
    2160:	f003 fabf 	bl	56e2 <printk>
			if (from_hard_fault) {
    2164:	b11e      	cbz	r6, 216e <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2166:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2168:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    216c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    216e:	4c0e      	ldr	r4, [pc, #56]	; (21a8 <bus_fault.isra.0+0x90>)
    2170:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2172:	0559      	lsls	r1, r3, #21
    2174:	d503      	bpl.n	217e <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    2176:	4812      	ldr	r0, [pc, #72]	; (21c0 <bus_fault.isra.0+0xa8>)
    2178:	2145      	movs	r1, #69	; 0x45
    217a:	f003 fab2 	bl	56e2 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    217e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2180:	05da      	lsls	r2, r3, #23
    2182:	d50b      	bpl.n	219c <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    2184:	480f      	ldr	r0, [pc, #60]	; (21c4 <bus_fault.isra.0+0xac>)
    2186:	2145      	movs	r1, #69	; 0x45
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2188:	f003 faab 	bl	56e2 <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    218c:	4a06      	ldr	r2, [pc, #24]	; (21a8 <bus_fault.isra.0+0x90>)
    218e:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    2190:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2192:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2196:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    2198:	7028      	strb	r0, [r5, #0]

	return reason;
}
    219a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    219c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    219e:	049b      	lsls	r3, r3, #18
    21a0:	d5f4      	bpl.n	218c <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    21a2:	4809      	ldr	r0, [pc, #36]	; (21c8 <bus_fault.isra.0+0xb0>)
    21a4:	2145      	movs	r1, #69	; 0x45
    21a6:	e7ef      	b.n	2188 <bus_fault.isra.0+0x70>
    21a8:	e000ed00 	.word	0xe000ed00
    21ac:	00006aae 	.word	0x00006aae
    21b0:	00006ac9 	.word	0x00006ac9
    21b4:	000069a9 	.word	0x000069a9
    21b8:	00006adf 	.word	0x00006adf
    21bc:	00006afd 	.word	0x00006afd
    21c0:	00006b17 	.word	0x00006b17
    21c4:	00006b37 	.word	0x00006b37
    21c8:	00006a1d 	.word	0x00006a1d

000021cc <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    21cc:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    21ce:	4c1d      	ldr	r4, [pc, #116]	; (2244 <usage_fault.isra.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    21d0:	481d      	ldr	r0, [pc, #116]	; (2248 <usage_fault.isra.0+0x7c>)
    21d2:	2145      	movs	r1, #69	; 0x45
    21d4:	f003 fa85 	bl	56e2 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    21d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    21da:	0193      	lsls	r3, r2, #6
    21dc:	d503      	bpl.n	21e6 <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    21de:	481b      	ldr	r0, [pc, #108]	; (224c <usage_fault.isra.0+0x80>)
    21e0:	2145      	movs	r1, #69	; 0x45
    21e2:	f003 fa7e 	bl	56e2 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    21e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    21e8:	01dc      	lsls	r4, r3, #7
    21ea:	d503      	bpl.n	21f4 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    21ec:	4818      	ldr	r0, [pc, #96]	; (2250 <usage_fault.isra.0+0x84>)
    21ee:	2145      	movs	r1, #69	; 0x45
    21f0:	f003 fa77 	bl	56e2 <printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    21f4:	4c13      	ldr	r4, [pc, #76]	; (2244 <usage_fault.isra.0+0x78>)
    21f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    21f8:	0310      	lsls	r0, r2, #12
    21fa:	d503      	bpl.n	2204 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
    21fc:	4815      	ldr	r0, [pc, #84]	; (2254 <usage_fault.isra.0+0x88>)
    21fe:	2145      	movs	r1, #69	; 0x45
    2200:	f003 fa6f 	bl	56e2 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2204:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2206:	0359      	lsls	r1, r3, #13
    2208:	d503      	bpl.n	2212 <usage_fault.isra.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    220a:	4813      	ldr	r0, [pc, #76]	; (2258 <usage_fault.isra.0+0x8c>)
    220c:	2145      	movs	r1, #69	; 0x45
    220e:	f003 fa68 	bl	56e2 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2212:	4c0c      	ldr	r4, [pc, #48]	; (2244 <usage_fault.isra.0+0x78>)
    2214:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2216:	0392      	lsls	r2, r2, #14
    2218:	d503      	bpl.n	2222 <usage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    221a:	4810      	ldr	r0, [pc, #64]	; (225c <usage_fault.isra.0+0x90>)
    221c:	2145      	movs	r1, #69	; 0x45
    221e:	f003 fa60 	bl	56e2 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2222:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2224:	03db      	lsls	r3, r3, #15
    2226:	d503      	bpl.n	2230 <usage_fault.isra.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2228:	480d      	ldr	r0, [pc, #52]	; (2260 <usage_fault.isra.0+0x94>)
    222a:	2145      	movs	r1, #69	; 0x45
    222c:	f003 fa59 	bl	56e2 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2230:	4a04      	ldr	r2, [pc, #16]	; (2244 <usage_fault.isra.0+0x78>)
    2232:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2234:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2238:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    223c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    223e:	2000      	movs	r0, #0
    2240:	bd10      	pop	{r4, pc}
    2242:	bf00      	nop
    2244:	e000ed00 	.word	0xe000ed00
    2248:	00006b54 	.word	0x00006b54
    224c:	00006b71 	.word	0x00006b71
    2250:	00006b89 	.word	0x00006b89
    2254:	00006ba8 	.word	0x00006ba8
    2258:	00006bcb 	.word	0x00006bcb
    225c:	00006bf5 	.word	0x00006bf5
    2260:	00006c14 	.word	0x00006c14

00002264 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2268:	4b53      	ldr	r3, [pc, #332]	; (23b8 <z_arm_fault+0x154>)
    226a:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    226e:	b08a      	sub	sp, #40	; 0x28
    2270:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2272:	f3c8 0708 	ubfx	r7, r8, #0, #9
    2276:	2600      	movs	r6, #0
    2278:	f386 8811 	msr	BASEPRI, r6
    227c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2280:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2284:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2288:	d107      	bne.n	229a <z_arm_fault+0x36>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    228a:	f002 030c 	and.w	r3, r2, #12
    228e:	2b08      	cmp	r3, #8
    2290:	d114      	bne.n	22bc <z_arm_fault+0x58>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2292:	484a      	ldr	r0, [pc, #296]	; (23bc <z_arm_fault+0x158>)
    2294:	2145      	movs	r1, #69	; 0x45
    2296:	f003 fa24 	bl	56e2 <printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    229a:	4a49      	ldr	r2, [pc, #292]	; (23c0 <z_arm_fault+0x15c>)
    229c:	4949      	ldr	r1, [pc, #292]	; (23c4 <z_arm_fault+0x160>)
    229e:	484a      	ldr	r0, [pc, #296]	; (23c8 <z_arm_fault+0x164>)
    22a0:	f240 33bb 	movw	r3, #955	; 0x3bb
    22a4:	f003 fa1d 	bl	56e2 <printk>
    22a8:	4848      	ldr	r0, [pc, #288]	; (23cc <z_arm_fault+0x168>)
    22aa:	f003 fa1a 	bl	56e2 <printk>
    22ae:	4844      	ldr	r0, [pc, #272]	; (23c0 <z_arm_fault+0x15c>)
    22b0:	f240 31bb 	movw	r1, #955	; 0x3bb
    22b4:	f003 fb20 	bl	58f8 <assert_post_action>
    22b8:	2500      	movs	r5, #0
    22ba:	e005      	b.n	22c8 <z_arm_fault+0x64>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    22bc:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    22be:	bf5c      	itt	pl
    22c0:	4605      	movpl	r5, r0
			*nested_exc = true;
    22c2:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
    22c4:	2d00      	cmp	r5, #0
    22c6:	d0e8      	beq.n	229a <z_arm_fault+0x36>
	*recoverable = false;
    22c8:	2300      	movs	r3, #0
    22ca:	1efa      	subs	r2, r7, #3
    22cc:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    22d0:	461c      	mov	r4, r3
    22d2:	4613      	mov	r3, r2
    22d4:	2b09      	cmp	r3, #9
    22d6:	d85c      	bhi.n	2392 <z_arm_fault+0x12e>
    22d8:	e8df f003 	tbb	[pc, r3]
    22dc:	34545005 	.word	0x34545005
    22e0:	5b5b5b5b 	.word	0x5b5b5b5b
    22e4:	585b      	.short	0x585b
	PR_FAULT_INFO("***** HARD FAULT *****");
    22e6:	483a      	ldr	r0, [pc, #232]	; (23d0 <z_arm_fault+0x16c>)
    22e8:	2145      	movs	r1, #69	; 0x45
    22ea:	f003 f9fa 	bl	56e2 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    22ee:	4b32      	ldr	r3, [pc, #200]	; (23b8 <z_arm_fault+0x154>)
	*recoverable = false;
    22f0:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    22f4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    22f6:	f014 0402 	ands.w	r4, r4, #2
    22fa:	d005      	beq.n	2308 <z_arm_fault+0xa4>
		PR_EXC("  Bus fault on vector table read");
    22fc:	4835      	ldr	r0, [pc, #212]	; (23d4 <z_arm_fault+0x170>)
    22fe:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
    2300:	f003 f9ef 	bl	56e2 <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2304:	2400      	movs	r4, #0
}
    2306:	e020      	b.n	234a <z_arm_fault+0xe6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    230a:	005b      	lsls	r3, r3, #1
    230c:	d51d      	bpl.n	234a <z_arm_fault+0xe6>
		PR_EXC("  Fault escalation (see below)");
    230e:	4832      	ldr	r0, [pc, #200]	; (23d8 <z_arm_fault+0x174>)
    2310:	2145      	movs	r1, #69	; 0x45
    2312:	f003 f9e6 	bl	56e2 <printk>
		if (SCB_MMFSR != 0) {
    2316:	4b31      	ldr	r3, [pc, #196]	; (23dc <z_arm_fault+0x178>)
    2318:	781b      	ldrb	r3, [r3, #0]
    231a:	b133      	cbz	r3, 232a <z_arm_fault+0xc6>
			reason = mem_manage_fault(esf, 1, recoverable);
    231c:	f10d 0207 	add.w	r2, sp, #7
    2320:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2322:	4628      	mov	r0, r5
    2324:	f7ff fe72 	bl	200c <mem_manage_fault>
    2328:	e00e      	b.n	2348 <z_arm_fault+0xe4>
		} else if (SCB_BFSR != 0) {
    232a:	4b2d      	ldr	r3, [pc, #180]	; (23e0 <z_arm_fault+0x17c>)
    232c:	781b      	ldrb	r3, [r3, #0]
    232e:	b12b      	cbz	r3, 233c <z_arm_fault+0xd8>
			reason = bus_fault(esf, 1, recoverable);
    2330:	f10d 0107 	add.w	r1, sp, #7
    2334:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2336:	f7ff feef 	bl	2118 <bus_fault.isra.0>
    233a:	e005      	b.n	2348 <z_arm_fault+0xe4>
		} else if (SCB_UFSR != 0) {
    233c:	4b29      	ldr	r3, [pc, #164]	; (23e4 <z_arm_fault+0x180>)
    233e:	881b      	ldrh	r3, [r3, #0]
    2340:	b29b      	uxth	r3, r3
    2342:	b113      	cbz	r3, 234a <z_arm_fault+0xe6>
			reason = usage_fault(esf);
    2344:	f7ff ff42 	bl	21cc <usage_fault.isra.0>
    2348:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    234a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    234e:	b993      	cbnz	r3, 2376 <z_arm_fault+0x112>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2350:	2220      	movs	r2, #32
    2352:	4629      	mov	r1, r5
    2354:	a802      	add	r0, sp, #8
    2356:	f003 fba0 	bl	5a9a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    235a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    235c:	b336      	cbz	r6, 23ac <z_arm_fault+0x148>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    235e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2362:	b922      	cbnz	r2, 236e <z_arm_fault+0x10a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2364:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2368:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    236c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    236e:	a902      	add	r1, sp, #8
    2370:	4620      	mov	r0, r4
    2372:	f7ff fd4d 	bl	1e10 <z_arm_fatal_error>
}
    2376:	b00a      	add	sp, #40	; 0x28
    2378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    237c:	f10d 0207 	add.w	r2, sp, #7
    2380:	2100      	movs	r1, #0
    2382:	e7ce      	b.n	2322 <z_arm_fault+0xbe>
		reason = bus_fault(esf, 0, recoverable);
    2384:	f10d 0107 	add.w	r1, sp, #7
    2388:	2000      	movs	r0, #0
    238a:	e7d4      	b.n	2336 <z_arm_fault+0xd2>
	PR_FAULT_INFO(
    238c:	4816      	ldr	r0, [pc, #88]	; (23e8 <z_arm_fault+0x184>)
    238e:	2145      	movs	r1, #69	; 0x45
    2390:	e7b6      	b.n	2300 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    2392:	4916      	ldr	r1, [pc, #88]	; (23ec <z_arm_fault+0x188>)
    2394:	4a16      	ldr	r2, [pc, #88]	; (23f0 <z_arm_fault+0x18c>)
    2396:	4817      	ldr	r0, [pc, #92]	; (23f4 <z_arm_fault+0x190>)
    2398:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    239c:	bf08      	it	eq
    239e:	460a      	moveq	r2, r1
    23a0:	f1a7 0310 	sub.w	r3, r7, #16
    23a4:	2145      	movs	r1, #69	; 0x45
    23a6:	f003 f99c 	bl	56e2 <printk>
    23aa:	e7ab      	b.n	2304 <z_arm_fault+0xa0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    23ac:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    23b0:	f023 0301 	bic.w	r3, r3, #1
    23b4:	e7da      	b.n	236c <z_arm_fault+0x108>
    23b6:	bf00      	nop
    23b8:	e000ed00 	.word	0xe000ed00
    23bc:	00006c72 	.word	0x00006c72
    23c0:	00006a51 	.word	0x00006a51
    23c4:	00006ca2 	.word	0x00006ca2
    23c8:	00005fa5 	.word	0x00005fa5
    23cc:	00006cb5 	.word	0x00006cb5
    23d0:	00006cf3 	.word	0x00006cf3
    23d4:	00006d0f 	.word	0x00006d0f
    23d8:	00006d35 	.word	0x00006d35
    23dc:	e000ed28 	.word	0xe000ed28
    23e0:	e000ed29 	.word	0xe000ed29
    23e4:	e000ed2a 	.word	0xe000ed2a
    23e8:	00006d59 	.word	0x00006d59
    23ec:	00006c44 	.word	0x00006c44
    23f0:	00006c59 	.word	0x00006c59
    23f4:	00006d94 	.word	0x00006d94

000023f8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    23f8:	4a02      	ldr	r2, [pc, #8]	; (2404 <z_arm_fault_init+0xc>)
    23fa:	6953      	ldr	r3, [r2, #20]
    23fc:	f043 0310 	orr.w	r3, r3, #16
    2400:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2402:	4770      	bx	lr
    2404:	e000ed00 	.word	0xe000ed00

00002408 <z_arm_interrupt_init>:
    2408:	4804      	ldr	r0, [pc, #16]	; (241c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    240a:	2300      	movs	r3, #0
    240c:	2120      	movs	r1, #32
    240e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2410:	3301      	adds	r3, #1
    2412:	2b27      	cmp	r3, #39	; 0x27
    2414:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2418:	d1f9      	bne.n	240e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    241a:	4770      	bx	lr
    241c:	e000e100 	.word	0xe000e100

00002420 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    2420:	b510      	push	{r4, lr}
    2422:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
    2424:	f002 f830 	bl	4488 <z_thread_single_abort>

	if (_current == thread) {
    2428:	4b11      	ldr	r3, [pc, #68]	; (2470 <z_impl_k_thread_abort+0x50>)
    242a:	689b      	ldr	r3, [r3, #8]
    242c:	42a3      	cmp	r3, r4
    242e:	d107      	bne.n	2440 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2430:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2434:	b183      	cbz	r3, 2458 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2436:	4a0f      	ldr	r2, [pc, #60]	; (2474 <z_impl_k_thread_abort+0x54>)
    2438:	6853      	ldr	r3, [r2, #4]
    243a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    243e:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
    2440:	f04f 0320 	mov.w	r3, #32
    2444:	f3ef 8011 	mrs	r0, BASEPRI
    2448:	f383 8811 	msr	BASEPRI, r3
    244c:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    2450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    2454:	f003 bbc6 	b.w	5be4 <z_reschedule_irqlock>
    2458:	f04f 0320 	mov.w	r3, #32
    245c:	f3ef 8011 	mrs	r0, BASEPRI
    2460:	f383 8811 	msr	BASEPRI, r3
    2464:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    2468:	f7ff fc14 	bl	1c94 <arch_swap>
	return ret;
    246c:	e7e8      	b.n	2440 <z_impl_k_thread_abort+0x20>
    246e:	bf00      	nop
    2470:	20000760 	.word	0x20000760
    2474:	e000ed00 	.word	0xe000ed00

00002478 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    247a:	4b08      	ldr	r3, [pc, #32]	; (249c <z_arm_configure_static_mpu_regions+0x24>)
    247c:	9301      	str	r3, [sp, #4]
    247e:	4b08      	ldr	r3, [pc, #32]	; (24a0 <z_arm_configure_static_mpu_regions+0x28>)
    2480:	9302      	str	r3, [sp, #8]
    2482:	4b08      	ldr	r3, [pc, #32]	; (24a4 <z_arm_configure_static_mpu_regions+0x2c>)
    2484:	9303      	str	r3, [sp, #12]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    2486:	ab01      	add	r3, sp, #4
    2488:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    248a:	4a07      	ldr	r2, [pc, #28]	; (24a8 <z_arm_configure_static_mpu_regions+0x30>)
    248c:	4b07      	ldr	r3, [pc, #28]	; (24ac <z_arm_configure_static_mpu_regions+0x34>)
    248e:	2101      	movs	r1, #1
    2490:	4668      	mov	r0, sp
    2492:	f000 f8e1 	bl	2658 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2496:	b005      	add	sp, #20
    2498:	f85d fb04 	ldr.w	pc, [sp], #4
    249c:	20000000 	.word	0x20000000
    24a0:	00000000 	.word	0x00000000
    24a4:	060b0000 	.word	0x060b0000
    24a8:	20000000 	.word	0x20000000
    24ac:	20010000 	.word	0x20010000

000024b0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    24b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT((uint32_t)thread->stack_obj == guard_start,
		"Guard start (0x%x) not beginning at stack object (0x%x)\n",
		guard_start, (uint32_t)thread->stack_obj);
	}
#else
	guard_start = thread->stack_info.start - guard_size;
    24b2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    24b6:	3b20      	subs	r3, #32
#endif /* CONFIG_USERSPACE */

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");
	guard = (const struct k_mem_partition)
    24b8:	9301      	str	r3, [sp, #4]
    24ba:	4b06      	ldr	r3, [pc, #24]	; (24d4 <z_arm_configure_dynamic_mpu_regions+0x24>)
    24bc:	2220      	movs	r2, #32
    24be:	e9cd 2302 	strd	r2, r3, [sp, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    24c2:	2101      	movs	r1, #1
	dynamic_regions[region_num] = &guard;
    24c4:	ab01      	add	r3, sp, #4
	arm_core_mpu_configure_dynamic_mpu_regions(
    24c6:	4668      	mov	r0, sp
	dynamic_regions[region_num] = &guard;
    24c8:	9300      	str	r3, [sp, #0]
	arm_core_mpu_configure_dynamic_mpu_regions(
    24ca:	f000 f8ed 	bl	26a8 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    24ce:	b005      	add	sp, #20
    24d0:	f85d fb04 	ldr.w	pc, [sp], #4
    24d4:	150b0000 	.word	0x150b0000

000024d8 <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    24d8:	f8df c098 	ldr.w	ip, [pc, #152]	; 2574 <mpu_configure_regions+0x9c>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    24dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24de:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    24e0:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
    24e2:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
    24e4:	428f      	cmp	r7, r1
    24e6:	da0f      	bge.n	2508 <mpu_configure_regions+0x30>
		if (regions[i]->size == 0U) {
    24e8:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
    24ec:	f8de 4004 	ldr.w	r4, [lr, #4]
    24f0:	b3d4      	cbz	r4, 2568 <mpu_configure_regions+0x90>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    24f2:	b183      	cbz	r3, 2516 <mpu_configure_regions+0x3e>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    24f4:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    24f6:	422c      	tst	r4, r5
    24f8:	d007      	beq.n	250a <mpu_configure_regions+0x32>
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    24fa:	481c      	ldr	r0, [pc, #112]	; (256c <mpu_configure_regions+0x94>)
    24fc:	463a      	mov	r2, r7
    24fe:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2500:	f003 f8ef 	bl	56e2 <printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    2504:	f06f 0015 	mvn.w	r0, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    250a:	2c1f      	cmp	r4, #31
    250c:	d9f5      	bls.n	24fa <mpu_configure_regions+0x22>
		((part->start & (part->size - 1)) == 0U);
    250e:	f8de 2000 	ldr.w	r2, [lr]
		&&
    2512:	4215      	tst	r5, r2
    2514:	d1f1      	bne.n	24fa <mpu_configure_regions+0x22>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2516:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    2518:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
    251a:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    251e:	f8de 0008 	ldr.w	r0, [lr, #8]
    2522:	d90f      	bls.n	2544 <mpu_configure_regions+0x6c>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    2524:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2528:	d80e      	bhi.n	2548 <mpu_configure_regions+0x70>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    252a:	3c01      	subs	r4, #1
    252c:	fab4 f484 	clz	r4, r4
    2530:	f1c4 041f 	rsb	r4, r4, #31
    2534:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    2536:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2538:	ea44 0400 	orr.w	r4, r4, r0
    253c:	d906      	bls.n	254c <mpu_configure_regions+0x74>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    253e:	480c      	ldr	r0, [pc, #48]	; (2570 <mpu_configure_regions+0x98>)
    2540:	2145      	movs	r1, #69	; 0x45
    2542:	e7dd      	b.n	2500 <mpu_configure_regions+0x28>
		return REGION_32B;
    2544:	2408      	movs	r4, #8
    2546:	e7f6      	b.n	2536 <mpu_configure_regions+0x5e>
		return REGION_4G;
    2548:	243e      	movs	r4, #62	; 0x3e
    254a:	e7f4      	b.n	2536 <mpu_configure_regions+0x5e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    254c:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    2550:	4315      	orrs	r5, r2
    2552:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2556:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    255a:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
    255e:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2560:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2564:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    2568:	3701      	adds	r7, #1
    256a:	e7bb      	b.n	24e4 <mpu_configure_regions+0xc>
    256c:	00006db0 	.word	0x00006db0
    2570:	00006dd8 	.word	0x00006dd8
    2574:	e000ed90 	.word	0xe000ed90

00002578 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2578:	4b03      	ldr	r3, [pc, #12]	; (2588 <arm_core_mpu_enable+0x10>)
    257a:	2205      	movs	r2, #5
    257c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    257e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2582:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2586:	4770      	bx	lr
    2588:	e000ed90 	.word	0xe000ed90

0000258c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    258c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2590:	4b01      	ldr	r3, [pc, #4]	; (2598 <arm_core_mpu_disable+0xc>)
    2592:	2200      	movs	r2, #0
    2594:	605a      	str	r2, [r3, #4]
}
    2596:	4770      	bx	lr
    2598:	e000ed90 	.word	0xe000ed90

0000259c <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    259c:	4925      	ldr	r1, [pc, #148]	; (2634 <arm_mpu_init+0x98>)
{
    259e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    25a0:	680c      	ldr	r4, [r1, #0]
    25a2:	2c08      	cmp	r4, #8
    25a4:	d913      	bls.n	25ce <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    25a6:	f44f 739d 	mov.w	r3, #314	; 0x13a
    25aa:	4a23      	ldr	r2, [pc, #140]	; (2638 <arm_mpu_init+0x9c>)
    25ac:	4923      	ldr	r1, [pc, #140]	; (263c <arm_mpu_init+0xa0>)
    25ae:	4824      	ldr	r0, [pc, #144]	; (2640 <arm_mpu_init+0xa4>)
    25b0:	f003 f897 	bl	56e2 <printk>
    25b4:	4823      	ldr	r0, [pc, #140]	; (2644 <arm_mpu_init+0xa8>)
    25b6:	2208      	movs	r2, #8
    25b8:	4621      	mov	r1, r4
    25ba:	f003 f892 	bl	56e2 <printk>
    25be:	481e      	ldr	r0, [pc, #120]	; (2638 <arm_mpu_init+0x9c>)
    25c0:	f44f 719d 	mov.w	r1, #314	; 0x13a
    25c4:	f003 f998 	bl	58f8 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    25c8:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    25cc:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    25ce:	f7ff ffdd 	bl	258c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    25d2:	6848      	ldr	r0, [r1, #4]
    25d4:	491c      	ldr	r1, [pc, #112]	; (2648 <arm_mpu_init+0xac>)
    25d6:	2200      	movs	r2, #0
    25d8:	4294      	cmp	r4, r2
    25da:	f100 000c 	add.w	r0, r0, #12
    25de:	d119      	bne.n	2614 <arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    25e0:	4b1a      	ldr	r3, [pc, #104]	; (264c <arm_mpu_init+0xb0>)
    25e2:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    25e4:	f7ff ffc8 	bl	2578 <arm_core_mpu_enable>
	__ASSERT(
    25e8:	680b      	ldr	r3, [r1, #0]
    25ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
    25ee:	2b08      	cmp	r3, #8
    25f0:	d00e      	beq.n	2610 <arm_mpu_init+0x74>
    25f2:	4917      	ldr	r1, [pc, #92]	; (2650 <arm_mpu_init+0xb4>)
    25f4:	4a10      	ldr	r2, [pc, #64]	; (2638 <arm_mpu_init+0x9c>)
    25f6:	4812      	ldr	r0, [pc, #72]	; (2640 <arm_mpu_init+0xa4>)
    25f8:	f44f 73ae 	mov.w	r3, #348	; 0x15c
    25fc:	f003 f871 	bl	56e2 <printk>
    2600:	4814      	ldr	r0, [pc, #80]	; (2654 <arm_mpu_init+0xb8>)
    2602:	f003 f86e 	bl	56e2 <printk>
    2606:	480c      	ldr	r0, [pc, #48]	; (2638 <arm_mpu_init+0x9c>)
    2608:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    260c:	f003 f974 	bl	58f8 <assert_post_action>
	return 0;
    2610:	2000      	movs	r0, #0
    2612:	e7db      	b.n	25cc <arm_mpu_init+0x30>
	MPU->RNR = index;
    2614:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2616:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    261a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    261e:	4313      	orrs	r3, r2
    2620:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2624:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2626:	f850 3c04 	ldr.w	r3, [r0, #-4]
    262a:	f043 0301 	orr.w	r3, r3, #1
    262e:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2630:	3201      	adds	r2, #1
    2632:	e7d1      	b.n	25d8 <arm_mpu_init+0x3c>
    2634:	00005e94 	.word	0x00005e94
    2638:	00006e03 	.word	0x00006e03
    263c:	0000747a 	.word	0x0000747a
    2640:	00005fa5 	.word	0x00005fa5
    2644:	00006e43 	.word	0x00006e43
    2648:	e000ed90 	.word	0xe000ed90
    264c:	20000bc1 	.word	0x20000bc1
    2650:	00006e77 	.word	0x00006e77
    2654:	00006ec7 	.word	0x00006ec7

00002658 <arm_core_mpu_configure_static_mpu_regions>:
{
    2658:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    265a:	4d0e      	ldr	r5, [pc, #56]	; (2694 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    265c:	2301      	movs	r3, #1
    265e:	782a      	ldrb	r2, [r5, #0]
    2660:	460c      	mov	r4, r1
    2662:	f7ff ff39 	bl	24d8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2666:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2668:	3016      	adds	r0, #22
    266a:	d111      	bne.n	2690 <arm_core_mpu_configure_static_mpu_regions+0x38>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    266c:	f240 1303 	movw	r3, #259	; 0x103
    2670:	4a09      	ldr	r2, [pc, #36]	; (2698 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2672:	490a      	ldr	r1, [pc, #40]	; (269c <arm_core_mpu_configure_static_mpu_regions+0x44>)
    2674:	480a      	ldr	r0, [pc, #40]	; (26a0 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    2676:	f003 f834 	bl	56e2 <printk>
    267a:	4621      	mov	r1, r4
    267c:	4809      	ldr	r0, [pc, #36]	; (26a4 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    267e:	f003 f830 	bl	56e2 <printk>
}
    2682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2686:	4804      	ldr	r0, [pc, #16]	; (2698 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2688:	f240 1103 	movw	r1, #259	; 0x103
    268c:	f003 b934 	b.w	58f8 <assert_post_action>
}
    2690:	bd38      	pop	{r3, r4, r5, pc}
    2692:	bf00      	nop
    2694:	20000bc1 	.word	0x20000bc1
    2698:	00006e03 	.word	0x00006e03
    269c:	0000747a 	.word	0x0000747a
    26a0:	00005fa5 	.word	0x00005fa5
    26a4:	00006ee8 	.word	0x00006ee8

000026a8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    26a8:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    26aa:	4a12      	ldr	r2, [pc, #72]	; (26f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    26ac:	2300      	movs	r3, #0
    26ae:	7812      	ldrb	r2, [r2, #0]
    26b0:	460c      	mov	r4, r1
    26b2:	f7ff ff11 	bl	24d8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    26b6:	f110 0f16 	cmn.w	r0, #22
    26ba:	d008      	beq.n	26ce <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    26bc:	4b0e      	ldr	r3, [pc, #56]	; (26f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    26be:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    26c0:	2807      	cmp	r0, #7
    26c2:	dd00      	ble.n	26c6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
}
    26c4:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    26c6:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    26c8:	611a      	str	r2, [r3, #16]
    26ca:	3001      	adds	r0, #1
    26cc:	e7f8      	b.n	26c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    26ce:	4a0b      	ldr	r2, [pc, #44]	; (26fc <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    26d0:	490b      	ldr	r1, [pc, #44]	; (2700 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    26d2:	480c      	ldr	r0, [pc, #48]	; (2704 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    26d4:	f44f 7391 	mov.w	r3, #290	; 0x122
    26d8:	f003 f803 	bl	56e2 <printk>
    26dc:	4621      	mov	r1, r4
    26de:	480a      	ldr	r0, [pc, #40]	; (2708 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    26e0:	f002 ffff 	bl	56e2 <printk>
}
    26e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    26e8:	4804      	ldr	r0, [pc, #16]	; (26fc <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    26ea:	f44f 7191 	mov.w	r1, #290	; 0x122
    26ee:	f003 b903 	b.w	58f8 <assert_post_action>
    26f2:	bf00      	nop
    26f4:	20000bc1 	.word	0x20000bc1
    26f8:	e000ed90 	.word	0xe000ed90
    26fc:	00006e03 	.word	0x00006e03
    2700:	0000747a 	.word	0x0000747a
    2704:	00005fa5 	.word	0x00005fa5
    2708:	00006f14 	.word	0x00006f14

0000270c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    270c:	4b01      	ldr	r3, [pc, #4]	; (2714 <__stdout_hook_install+0x8>)
    270e:	6018      	str	r0, [r3, #0]
}
    2710:	4770      	bx	lr
    2712:	bf00      	nop
    2714:	20000004 	.word	0x20000004

00002718 <nordicsemi_nrf52_init>:
    2718:	f04f 0320 	mov.w	r3, #32
    271c:	f3ef 8211 	mrs	r2, BASEPRI
    2720:	f383 8811 	msr	BASEPRI, r3
    2724:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2728:	4906      	ldr	r1, [pc, #24]	; (2744 <nordicsemi_nrf52_init+0x2c>)
    272a:	2301      	movs	r3, #1
    272c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2730:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2734:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    2738:	f382 8811 	msr	BASEPRI, r2
    273c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2740:	2000      	movs	r0, #0
    2742:	4770      	bx	lr
    2744:	4001e000 	.word	0x4001e000

00002748 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2748:	b120      	cbz	r0, 2754 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    274a:	4b03      	ldr	r3, [pc, #12]	; (2758 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    274c:	0180      	lsls	r0, r0, #6
    274e:	f043 0301 	orr.w	r3, r3, #1
    2752:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2754:	4770      	bx	lr
    2756:	bf00      	nop
    2758:	00005e30 	.word	0x00005e30

0000275c <end_report>:

	test_status = (test_status || fail) ? 1 : 0;
}

void end_report(void)
{
    275c:	b508      	push	{r3, lr}
	if (test_status) {
    275e:	4b08      	ldr	r3, [pc, #32]	; (2780 <end_report+0x24>)
		TC_END_REPORT(TC_FAIL);
    2760:	4808      	ldr	r0, [pc, #32]	; (2784 <end_report+0x28>)
	if (test_status) {
    2762:	681b      	ldr	r3, [r3, #0]
    2764:	b13b      	cbz	r3, 2776 <end_report+0x1a>
		TC_END_REPORT(TC_FAIL);
    2766:	f002 ffbc 	bl	56e2 <printk>
    276a:	4907      	ldr	r1, [pc, #28]	; (2788 <end_report+0x2c>)
	} else {
		TC_END_REPORT(TC_PASS);
    276c:	4807      	ldr	r0, [pc, #28]	; (278c <end_report+0x30>)
	}
}
    276e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		TC_END_REPORT(TC_PASS);
    2772:	f002 bfb6 	b.w	56e2 <printk>
    2776:	f002 ffb4 	bl	56e2 <printk>
    277a:	4905      	ldr	r1, [pc, #20]	; (2790 <end_report+0x34>)
    277c:	e7f6      	b.n	276c <end_report+0x10>
    277e:	bf00      	nop
    2780:	20000728 	.word	0x20000728
    2784:	00006f6b 	.word	0x00006f6b
    2788:	00007008 	.word	0x00007008
    278c:	0000700f 	.word	0x0000700f
    2790:	00007025 	.word	0x00007025

00002794 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    2794:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2796:	68c5      	ldr	r5, [r0, #12]
{
    2798:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    279a:	460c      	mov	r4, r1
    279c:	b961      	cbnz	r1, 27b8 <gpio_nrfx_manage_callback+0x24>
    279e:	4922      	ldr	r1, [pc, #136]	; (2828 <gpio_nrfx_manage_callback+0x94>)
    27a0:	4a22      	ldr	r2, [pc, #136]	; (282c <gpio_nrfx_manage_callback+0x98>)
    27a2:	4823      	ldr	r0, [pc, #140]	; (2830 <gpio_nrfx_manage_callback+0x9c>)
    27a4:	2324      	movs	r3, #36	; 0x24
    27a6:	f002 ff9c 	bl	56e2 <printk>
    27aa:	4822      	ldr	r0, [pc, #136]	; (2834 <gpio_nrfx_manage_callback+0xa0>)
    27ac:	f002 ff99 	bl	56e2 <printk>
    27b0:	481e      	ldr	r0, [pc, #120]	; (282c <gpio_nrfx_manage_callback+0x98>)
    27b2:	2124      	movs	r1, #36	; 0x24
    27b4:	f003 f8a0 	bl	58f8 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    27b8:	6863      	ldr	r3, [r4, #4]
    27ba:	b963      	cbnz	r3, 27d6 <gpio_nrfx_manage_callback+0x42>
    27bc:	491e      	ldr	r1, [pc, #120]	; (2838 <gpio_nrfx_manage_callback+0xa4>)
    27be:	4a1b      	ldr	r2, [pc, #108]	; (282c <gpio_nrfx_manage_callback+0x98>)
    27c0:	481b      	ldr	r0, [pc, #108]	; (2830 <gpio_nrfx_manage_callback+0x9c>)
    27c2:	2325      	movs	r3, #37	; 0x25
    27c4:	f002 ff8d 	bl	56e2 <printk>
    27c8:	481c      	ldr	r0, [pc, #112]	; (283c <gpio_nrfx_manage_callback+0xa8>)
    27ca:	f002 ff8a 	bl	56e2 <printk>
    27ce:	4817      	ldr	r0, [pc, #92]	; (282c <gpio_nrfx_manage_callback+0x98>)
    27d0:	2125      	movs	r1, #37	; 0x25
    27d2:	f003 f891 	bl	58f8 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    27d6:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    27d8:	b15b      	cbz	r3, 27f2 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    27da:	2200      	movs	r2, #0
    27dc:	429c      	cmp	r4, r3
    27de:	d113      	bne.n	2808 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    27e0:	6823      	ldr	r3, [r4, #0]
    27e2:	b95a      	cbnz	r2, 27fc <gpio_nrfx_manage_callback+0x68>
    27e4:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    27e6:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    27e8:	4294      	cmp	r4, r2
    27ea:	d100      	bne.n	27ee <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    27ec:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    27ee:	2300      	movs	r3, #0
    27f0:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    27f2:	b976      	cbnz	r6, 2812 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    27f4:	2000      	movs	r0, #0
				     callback, set);
}
    27f6:	bd70      	pop	{r4, r5, r6, pc}
    27f8:	460b      	mov	r3, r1
    27fa:	e7ef      	b.n	27dc <gpio_nrfx_manage_callback+0x48>
    27fc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    27fe:	68ab      	ldr	r3, [r5, #8]
    2800:	429c      	cmp	r4, r3
	list->tail = node;
    2802:	bf08      	it	eq
    2804:	60aa      	streq	r2, [r5, #8]
}
    2806:	e7f2      	b.n	27ee <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2808:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    280a:	461a      	mov	r2, r3
    280c:	2900      	cmp	r1, #0
    280e:	d1f3      	bne.n	27f8 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    2810:	b13e      	cbz	r6, 2822 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    2812:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    2814:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    2816:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    2818:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    281a:	2800      	cmp	r0, #0
    281c:	d1ea      	bne.n	27f4 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    281e:	60ac      	str	r4, [r5, #8]
}
    2820:	e7e9      	b.n	27f6 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    2822:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2826:	e7e6      	b.n	27f6 <gpio_nrfx_manage_callback+0x62>
    2828:	0000705d 	.word	0x0000705d
    282c:	00007030 	.word	0x00007030
    2830:	00005fa5 	.word	0x00005fa5
    2834:	00007066 	.word	0x00007066
    2838:	00007075 	.word	0x00007075
    283c:	00007087 	.word	0x00007087

00002840 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2840:	6803      	ldr	r3, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    2842:	095a      	lsrs	r2, r3, #5
    2844:	bf0c      	ite	eq
    2846:	f04f 32ff 	moveq.w	r2, #4294967295
    284a:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    284c:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
    2850:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2854:	07db      	lsls	r3, r3, #31
{
    2856:	b510      	push	{r4, lr}
    2858:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    285a:	d40b      	bmi.n	2874 <nrf_gpio_pin_port_decode+0x34>
    285c:	4910      	ldr	r1, [pc, #64]	; (28a0 <nrf_gpio_pin_port_decode+0x60>)
    285e:	4811      	ldr	r0, [pc, #68]	; (28a4 <nrf_gpio_pin_port_decode+0x64>)
    2860:	4a11      	ldr	r2, [pc, #68]	; (28a8 <nrf_gpio_pin_port_decode+0x68>)
    2862:	f240 231a 	movw	r3, #538	; 0x21a
    2866:	f002 ff3c 	bl	56e2 <printk>
    286a:	480f      	ldr	r0, [pc, #60]	; (28a8 <nrf_gpio_pin_port_decode+0x68>)
    286c:	f240 211a 	movw	r1, #538	; 0x21a
    2870:	f003 f842 	bl	58f8 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    2874:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    2876:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    287a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    287c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    287e:	d00b      	beq.n	2898 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
    2880:	490a      	ldr	r1, [pc, #40]	; (28ac <nrf_gpio_pin_port_decode+0x6c>)
    2882:	4808      	ldr	r0, [pc, #32]	; (28a4 <nrf_gpio_pin_port_decode+0x64>)
    2884:	4a08      	ldr	r2, [pc, #32]	; (28a8 <nrf_gpio_pin_port_decode+0x68>)
    2886:	f240 231f 	movw	r3, #543	; 0x21f
    288a:	f002 ff2a 	bl	56e2 <printk>
    288e:	4806      	ldr	r0, [pc, #24]	; (28a8 <nrf_gpio_pin_port_decode+0x68>)
    2890:	f240 211f 	movw	r1, #543	; 0x21f
    2894:	f003 f830 	bl	58f8 <assert_post_action>
}
    2898:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    289c:	bd10      	pop	{r4, pc}
    289e:	bf00      	nop
    28a0:	000070d1 	.word	0x000070d1
    28a4:	00005fa5 	.word	0x00005fa5
    28a8:	0000709e 	.word	0x0000709e
    28ac:	0000747a 	.word	0x0000747a

000028b0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    28b0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    28b2:	4b09      	ldr	r3, [pc, #36]	; (28d8 <gpio_nrfx_init+0x28>)
    28b4:	781a      	ldrb	r2, [r3, #0]
    28b6:	b96a      	cbnz	r2, 28d4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    28b8:	2101      	movs	r1, #1
    28ba:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    28bc:	2006      	movs	r0, #6
    28be:	2105      	movs	r1, #5
    28c0:	f7ff fa22 	bl	1d08 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    28c4:	2006      	movs	r0, #6
    28c6:	f7ff fa01 	bl	1ccc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    28ca:	4b04      	ldr	r3, [pc, #16]	; (28dc <gpio_nrfx_init+0x2c>)
    28cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    28d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    28d4:	2000      	movs	r0, #0
    28d6:	bd08      	pop	{r3, pc}
    28d8:	20000bc2 	.word	0x20000bc2
    28dc:	40006000 	.word	0x40006000

000028e0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    28e0:	4b2e      	ldr	r3, [pc, #184]	; (299c <gpio_nrfx_config+0xbc>)
{
    28e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    28e4:	4c2e      	ldr	r4, [pc, #184]	; (29a0 <gpio_nrfx_config+0xc0>)
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    28e6:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    28e8:	4013      	ands	r3, r2
    28ea:	42a3      	cmp	r3, r4
    28ec:	d045      	beq.n	297a <gpio_nrfx_config+0x9a>
    28ee:	d80e      	bhi.n	290e <gpio_nrfx_config+0x2e>
    28f0:	2b06      	cmp	r3, #6
    28f2:	d044      	beq.n	297e <gpio_nrfx_config+0x9e>
    28f4:	d806      	bhi.n	2904 <gpio_nrfx_config+0x24>
    28f6:	2b00      	cmp	r3, #0
    28f8:	d041      	beq.n	297e <gpio_nrfx_config+0x9e>
    28fa:	2b02      	cmp	r3, #2
    28fc:	d041      	beq.n	2982 <gpio_nrfx_config+0xa2>
    28fe:	f06f 0015 	mvn.w	r0, #21
    2902:	e038      	b.n	2976 <gpio_nrfx_config+0x96>
    2904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2908:	d1f9      	bne.n	28fe <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
    290a:	2401      	movs	r4, #1
    290c:	e009      	b.n	2922 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    290e:	4c25      	ldr	r4, [pc, #148]	; (29a4 <gpio_nrfx_config+0xc4>)
    2910:	42a3      	cmp	r3, r4
    2912:	d038      	beq.n	2986 <gpio_nrfx_config+0xa6>
    2914:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2918:	d037      	beq.n	298a <gpio_nrfx_config+0xaa>
    291a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    291e:	d1ee      	bne.n	28fe <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
    2920:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    2922:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2924:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
    2928:	bf54      	ite	pl
    292a:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    292e:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2930:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    2934:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    2936:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    293a:	d507      	bpl.n	294c <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    293c:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    293e:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2942:	d524      	bpl.n	298e <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
    2944:	2301      	movs	r3, #1
    2946:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    2948:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    294c:	7a03      	ldrb	r3, [r0, #8]
    294e:	f001 011f 	and.w	r1, r1, #31
    2952:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2956:	a801      	add	r0, sp, #4
    2958:	9101      	str	r1, [sp, #4]
    295a:	f7ff ff71 	bl	2840 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    295e:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2960:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
    2964:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2968:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    296c:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2970:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
    2974:	2000      	movs	r0, #0
}
    2976:	b003      	add	sp, #12
    2978:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    297a:	2407      	movs	r4, #7
    297c:	e7d1      	b.n	2922 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    297e:	461c      	mov	r4, r3
    2980:	e7cf      	b.n	2922 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
    2982:	2404      	movs	r4, #4
    2984:	e7cd      	b.n	2922 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
    2986:	2405      	movs	r4, #5
    2988:	e7cb      	b.n	2922 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
    298a:	2403      	movs	r4, #3
    298c:	e7c9      	b.n	2922 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    298e:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    2990:	bf42      	ittt	mi
    2992:	2301      	movmi	r3, #1
    2994:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
    2996:	f8cc 350c 	strmi.w	r3, [ip, #1292]	; 0x50c
}
    299a:	e7d7      	b.n	294c <gpio_nrfx_config+0x6c>
    299c:	00f00006 	.word	0x00f00006
    29a0:	00100006 	.word	0x00100006
    29a4:	00400002 	.word	0x00400002

000029a8 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
    29a8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
    29ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    29b0:	68c4      	ldr	r4, [r0, #12]
{
    29b2:	4680      	mov	r8, r0
    29b4:	460d      	mov	r5, r1
    29b6:	4617      	mov	r7, r2
    29b8:	4699      	mov	r9, r3
    29ba:	f001 061f 	and.w	r6, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
    29be:	f040 80c2 	bne.w	2b46 <gpio_nrfx_pin_interrupt_configure+0x19e>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    29c2:	6843      	ldr	r3, [r0, #4]
    29c4:	7a1b      	ldrb	r3, [r3, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    29c6:	a801      	add	r0, sp, #4
    29c8:	ea46 1343 	orr.w	r3, r6, r3, lsl #5
    29cc:	9301      	str	r3, [sp, #4]
    29ce:	f7ff ff37 	bl	2840 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    29d2:	9b01      	ldr	r3, [sp, #4]
    29d4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    29d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    29dc:	07db      	lsls	r3, r3, #31
    29de:	f100 80d6 	bmi.w	2b8e <gpio_nrfx_pin_interrupt_configure+0x1e6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    29e2:	68e3      	ldr	r3, [r4, #12]
    29e4:	2101      	movs	r1, #1
    29e6:	40a9      	lsls	r1, r5
    29e8:	4319      	orrs	r1, r3
    29ea:	6963      	ldr	r3, [r4, #20]
    29ec:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    29ee:	2101      	movs	r1, #1
    29f0:	40a9      	lsls	r1, r5
    29f2:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
    29f6:	bf0c      	ite	eq
    29f8:	430b      	orreq	r3, r1
    29fa:	438b      	bicne	r3, r1
    29fc:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    29fe:	69a3      	ldr	r3, [r4, #24]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    2a00:	4a64      	ldr	r2, [pc, #400]	; (2b94 <gpio_nrfx_pin_interrupt_configure+0x1ec>)
	struct gpio_nrfx_data *data = get_port_data(port);
    2a02:	f8d8 700c 	ldr.w	r7, [r8, #12]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    2a06:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
    2a0a:	bf0c      	ite	eq
    2a0c:	430b      	orreq	r3, r1
    2a0e:	438b      	bicne	r3, r1
    2a10:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    2a12:	6923      	ldr	r3, [r4, #16]
    2a14:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
    2a18:	bf0c      	ite	eq
    2a1a:	4319      	orreq	r1, r3
    2a1c:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a20:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    2a24:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a26:	7a18      	ldrb	r0, [r3, #8]
    2a28:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
    2a2c:	ea46 1640 	orr.w	r6, r6, r0, lsl #5
    2a30:	b2c9      	uxtb	r1, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2a32:	2300      	movs	r3, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2a34:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    2a38:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    2a3c:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    2a40:	4286      	cmp	r6, r0
    2a42:	f040 808b 	bne.w	2b5c <gpio_nrfx_pin_interrupt_configure+0x1b4>
		    && (intenset & BIT(i))) {
    2a46:	fa21 f003 	lsr.w	r0, r1, r3
    2a4a:	07c0      	lsls	r0, r0, #31
    2a4c:	f140 8086 	bpl.w	2b5c <gpio_nrfx_pin_interrupt_configure+0x1b4>
			(void)atomic_and(mask, ~BIT(i));
    2a50:	2101      	movs	r1, #1
    2a52:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2a54:	4850      	ldr	r0, [pc, #320]	; (2b98 <gpio_nrfx_pin_interrupt_configure+0x1f0>)
    2a56:	f3bf 8f5b 	dmb	ish
    2a5a:	43cc      	mvns	r4, r1
    2a5c:	e850 cf00 	ldrex	ip, [r0]
    2a60:	ea0c 0c04 	and.w	ip, ip, r4
    2a64:	e840 ce00 	strex	lr, ip, [r0]
    2a68:	f1be 0f00 	cmp.w	lr, #0
    2a6c:	d1f6      	bne.n	2a5c <gpio_nrfx_pin_interrupt_configure+0xb4>
    2a6e:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    2a72:	009b      	lsls	r3, r3, #2
    2a74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2a78:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2a7c:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    2a80:	f020 0001 	bic.w	r0, r0, #1
    2a84:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
    2a88:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2a8c:	2100      	movs	r1, #0
    2a8e:	4630      	mov	r0, r6
    2a90:	f003 f87f 	bl	5b92 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    2a94:	68fb      	ldr	r3, [r7, #12]
    2a96:	40eb      	lsrs	r3, r5
    2a98:	f013 0301 	ands.w	r3, r3, #1
    2a9c:	d051      	beq.n	2b42 <gpio_nrfx_pin_interrupt_configure+0x19a>
		if (data->trig_edge & BIT(pin)) {
    2a9e:	697b      	ldr	r3, [r7, #20]
    2aa0:	40eb      	lsrs	r3, r5
    2aa2:	f013 0401 	ands.w	r4, r3, #1
    2aa6:	d066      	beq.n	2b76 <gpio_nrfx_pin_interrupt_configure+0x1ce>
			if (data->double_edge & BIT(pin)) {
    2aa8:	69bb      	ldr	r3, [r7, #24]
    2aaa:	40eb      	lsrs	r3, r5
    2aac:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2aae:	bf5f      	itttt	pl
    2ab0:	6939      	ldrpl	r1, [r7, #16]
    2ab2:	fa21 f505 	lsrpl.w	r5, r1, r5
    2ab6:	f005 0501 	andpl.w	r5, r5, #1
    2aba:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2abe:	4936      	ldr	r1, [pc, #216]	; (2b98 <gpio_nrfx_pin_interrupt_configure+0x1f0>)
    2ac0:	bf54      	ite	pl
    2ac2:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2ac4:	2503      	movmi	r5, #3
    2ac6:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    2ac8:	2701      	movs	r7, #1
    2aca:	fa07 f402 	lsl.w	r4, r7, r2
    2ace:	f3bf 8f5b 	dmb	ish
    2ad2:	e851 0f00 	ldrex	r0, [r1]
    2ad6:	ea40 0304 	orr.w	r3, r0, r4
    2ada:	e841 3c00 	strex	ip, r3, [r1]
    2ade:	f1bc 0f00 	cmp.w	ip, #0
    2ae2:	d1f6      	bne.n	2ad2 <gpio_nrfx_pin_interrupt_configure+0x12a>
    2ae4:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
    2ae8:	40d0      	lsrs	r0, r2
    2aea:	f010 0301 	ands.w	r3, r0, #1
    2aee:	d13a      	bne.n	2b66 <gpio_nrfx_pin_interrupt_configure+0x1be>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2af0:	0091      	lsls	r1, r2, #2
    2af2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2af6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
    2afa:	3240      	adds	r2, #64	; 0x40
    2afc:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    2b00:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    2b04:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    2b08:	0092      	lsls	r2, r2, #2
    2b0a:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2b0e:	0236      	lsls	r6, r6, #8
    return ((uint32_t)p_reg + event);
    2b10:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2b12:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    2b16:	f406 56f8 	and.w	r6, r6, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
    2b1a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2b1e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2b22:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
    2b26:	4306      	orrs	r6, r0
    2b28:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2b2c:	6013      	str	r3, [r2, #0]
    2b2e:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2b30:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    2b34:	f042 0201 	orr.w	r2, r2, #1
    2b38:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
    2b3c:	4a15      	ldr	r2, [pc, #84]	; (2b94 <gpio_nrfx_pin_interrupt_configure+0x1ec>)
    2b3e:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
	int res = 0;
    2b42:	4618      	mov	r0, r3
    2b44:	e014      	b.n	2b70 <gpio_nrfx_pin_interrupt_configure+0x1c8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2b46:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    2b4a:	f47f af4a 	bne.w	29e2 <gpio_nrfx_pin_interrupt_configure+0x3a>
    2b4e:	2101      	movs	r1, #1
    2b50:	fa01 f305 	lsl.w	r3, r1, r5
    2b54:	68e1      	ldr	r1, [r4, #12]
    2b56:	ea21 0103 	bic.w	r1, r1, r3
    2b5a:	e746      	b.n	29ea <gpio_nrfx_pin_interrupt_configure+0x42>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2b5c:	3301      	adds	r3, #1
    2b5e:	2b08      	cmp	r3, #8
    2b60:	f47f af68 	bne.w	2a34 <gpio_nrfx_pin_interrupt_configure+0x8c>
    2b64:	e792      	b.n	2a8c <gpio_nrfx_pin_interrupt_configure+0xe4>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    2b66:	3201      	adds	r2, #1
    2b68:	2a08      	cmp	r2, #8
    2b6a:	d1ae      	bne.n	2aca <gpio_nrfx_pin_interrupt_configure+0x122>
	return -ENODEV;
    2b6c:	f06f 0012 	mvn.w	r0, #18
}
    2b70:	b003      	add	sp, #12
    2b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2b76:	6939      	ldr	r1, [r7, #16]
    2b78:	40e9      	lsrs	r1, r5
    2b7a:	f001 0101 	and.w	r1, r1, #1
    2b7e:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2b82:	4630      	mov	r0, r6
    2b84:	b2c9      	uxtb	r1, r1
    2b86:	f003 f804 	bl	5b92 <nrf_gpio_cfg_sense_set>
	int res = 0;
    2b8a:	4620      	mov	r0, r4
    2b8c:	e7f0      	b.n	2b70 <gpio_nrfx_pin_interrupt_configure+0x1c8>
		return -ENOTSUP;
    2b8e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2b92:	e7ed      	b.n	2b70 <gpio_nrfx_pin_interrupt_configure+0x1c8>
    2b94:	40006000 	.word	0x40006000
    2b98:	20000748 	.word	0x20000748

00002b9c <gpiote_event_handler>:
{
    2b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2ba0:	4e4c      	ldr	r6, [pc, #304]	; (2cd4 <gpiote_event_handler+0x138>)
    2ba2:	6837      	ldr	r7, [r6, #0]
	if (port_event) {
    2ba4:	2f00      	cmp	r7, #0
    2ba6:	d052      	beq.n	2c4e <gpiote_event_handler+0xb2>
	uint32_t out = data->pin_int_en;
    2ba8:	4b4b      	ldr	r3, [pc, #300]	; (2cd8 <gpiote_event_handler+0x13c>)
	out &= ~data->trig_edge & ~data->double_edge;
    2baa:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
    2bae:	68dd      	ldr	r5, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    2bb0:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    2bb2:	430a      	orrs	r2, r1
    2bb4:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
    2bb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
    2bbc:	f04f 0801 	mov.w	r8, #1
    2bc0:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    2bc4:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    2bc6:	ea25 0404 	bic.w	r4, r5, r4
	uint32_t pin = 0U;
    2bca:	f04f 0900 	mov.w	r9, #0
	while (level_pins) {
    2bce:	bb7d      	cbnz	r5, 2c30 <gpiote_event_handler+0x94>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2bd0:	6035      	str	r5, [r6, #0]
    2bd2:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
    2bd4:	4841      	ldr	r0, [pc, #260]	; (2cdc <gpiote_event_handler+0x140>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2bd6:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2bd8:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2bda:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
    2bdc:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    2be0:	fa05 f103 	lsl.w	r1, r5, r3
    2be4:	4211      	tst	r1, r2
    2be6:	d011      	beq.n	2c0c <gpiote_event_handler+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2be8:	009a      	lsls	r2, r3, #2
    2bea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2bee:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    2bf2:	6811      	ldr	r1, [r2, #0]
    2bf4:	b151      	cbz	r1, 2c0c <gpiote_event_handler+0x70>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2bf6:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    2bfa:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2bfe:	6016      	str	r6, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2c00:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2c04:	fa05 f101 	lsl.w	r1, r5, r1
    2c08:	6812      	ldr	r2, [r2, #0]
    2c0a:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2c0c:	3301      	adds	r3, #1
    2c0e:	2b08      	cmp	r3, #8
    2c10:	d1e4      	bne.n	2bdc <gpiote_event_handler+0x40>
	if (fired_triggers[0]) {
    2c12:	b9f4      	cbnz	r4, 2c52 <gpiote_event_handler+0xb6>
	if (port_event) {
    2c14:	b157      	cbz	r7, 2c2c <gpiote_event_handler+0x90>
	uint32_t out = data->pin_int_en;
    2c16:	4d30      	ldr	r5, [pc, #192]	; (2cd8 <gpiote_event_handler+0x13c>)
	out &= ~data->trig_edge & ~data->double_edge;
    2c18:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
	uint32_t out = data->pin_int_en;
    2c1c:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    2c1e:	430a      	orrs	r2, r1
    2c20:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t bit = 1U << pin;
    2c24:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    2c26:	2700      	movs	r7, #0
	while (level_pins) {
    2c28:	2c00      	cmp	r4, #0
    2c2a:	d141      	bne.n	2cb0 <gpiote_event_handler+0x114>
}
    2c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (level_pins & bit) {
    2c30:	ea15 0f08 	tst.w	r5, r8
    2c34:	d006      	beq.n	2c44 <gpiote_event_handler+0xa8>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2c36:	2100      	movs	r1, #0
    2c38:	f009 001f 	and.w	r0, r9, #31
    2c3c:	f002 ffa9 	bl	5b92 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2c40:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
    2c44:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    2c48:	ea4f 0848 	mov.w	r8, r8, lsl #1
    2c4c:	e7bf      	b.n	2bce <gpiote_event_handler+0x32>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2c4e:	463c      	mov	r4, r7
    2c50:	e7c0      	b.n	2bd4 <gpiote_event_handler+0x38>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2c52:	4b21      	ldr	r3, [pc, #132]	; (2cd8 <gpiote_event_handler+0x13c>)
    2c54:	685d      	ldr	r5, [r3, #4]
    2c56:	2d00      	cmp	r5, #0
    2c58:	d0dc      	beq.n	2c14 <gpiote_event_handler+0x78>
	return node->next;
    2c5a:	682e      	ldr	r6, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2c5c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2ce8 <gpiote_event_handler+0x14c>
			__ASSERT(cb->handler, "No callback handler!");
    2c60:	f8df 8088 	ldr.w	r8, [pc, #136]	; 2cec <gpiote_event_handler+0x150>
    2c64:	f8df a088 	ldr.w	sl, [pc, #136]	; 2cf0 <gpiote_event_handler+0x154>
    2c68:	2e00      	cmp	r6, #0
    2c6a:	bf38      	it	cc
    2c6c:	2600      	movcc	r6, #0
		if (cb->pin_mask & pins) {
    2c6e:	68ab      	ldr	r3, [r5, #8]
    2c70:	421c      	tst	r4, r3
    2c72:	d014      	beq.n	2c9e <gpiote_event_handler+0x102>
			__ASSERT(cb->handler, "No callback handler!");
    2c74:	686b      	ldr	r3, [r5, #4]
    2c76:	b963      	cbnz	r3, 2c92 <gpiote_event_handler+0xf6>
    2c78:	4651      	mov	r1, sl
    2c7a:	4819      	ldr	r0, [pc, #100]	; (2ce0 <gpiote_event_handler+0x144>)
    2c7c:	2345      	movs	r3, #69	; 0x45
    2c7e:	4642      	mov	r2, r8
    2c80:	f002 fd2f 	bl	56e2 <printk>
    2c84:	4817      	ldr	r0, [pc, #92]	; (2ce4 <gpiote_event_handler+0x148>)
    2c86:	f002 fd2c 	bl	56e2 <printk>
    2c8a:	2145      	movs	r1, #69	; 0x45
    2c8c:	4640      	mov	r0, r8
    2c8e:	f002 fe33 	bl	58f8 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    2c92:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
    2c96:	4629      	mov	r1, r5
    2c98:	4022      	ands	r2, r4
    2c9a:	4648      	mov	r0, r9
    2c9c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2c9e:	2e00      	cmp	r6, #0
    2ca0:	d0b8      	beq.n	2c14 <gpiote_event_handler+0x78>
    2ca2:	6833      	ldr	r3, [r6, #0]
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	bf38      	it	cc
    2ca8:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2caa:	4635      	mov	r5, r6
    2cac:	461e      	mov	r6, r3
    2cae:	e7de      	b.n	2c6e <gpiote_event_handler+0xd2>
		if (level_pins & bit) {
    2cb0:	4226      	tst	r6, r4
    2cb2:	d00c      	beq.n	2cce <gpiote_event_handler+0x132>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2cb4:	6929      	ldr	r1, [r5, #16]
    2cb6:	40f9      	lsrs	r1, r7
    2cb8:	f001 0101 	and.w	r1, r1, #1
    2cbc:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2cc0:	b2c9      	uxtb	r1, r1
    2cc2:	f007 001f 	and.w	r0, r7, #31
    2cc6:	f002 ff64 	bl	5b92 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2cca:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    2cce:	3701      	adds	r7, #1
		bit <<= 1;
    2cd0:	0076      	lsls	r6, r6, #1
    2cd2:	e7a9      	b.n	2c28 <gpiote_event_handler+0x8c>
    2cd4:	4000617c 	.word	0x4000617c
    2cd8:	2000072c 	.word	0x2000072c
    2cdc:	40006000 	.word	0x40006000
    2ce0:	00005fa5 	.word	0x00005fa5
    2ce4:	00007087 	.word	0x00007087
    2ce8:	20000060 	.word	0x20000060
    2cec:	00007030 	.word	0x00007030
    2cf0:	000070f4 	.word	0x000070f4

00002cf4 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2cf4:	4b06      	ldr	r3, [pc, #24]	; (2d10 <uart_nrfx_poll_in+0x1c>)
    2cf6:	681a      	ldr	r2, [r3, #0]
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    2cf8:	b13a      	cbz	r2, 2d0a <uart_nrfx_poll_in+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cfa:	2000      	movs	r0, #0
    2cfc:	6018      	str	r0, [r3, #0]
    2cfe:	681b      	ldr	r3, [r3, #0]
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
    2d00:	4b04      	ldr	r3, [pc, #16]	; (2d14 <uart_nrfx_poll_in+0x20>)
    2d02:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2d06:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
    2d08:	4770      	bx	lr
		return -1;
    2d0a:	f04f 30ff 	mov.w	r0, #4294967295
}
    2d0e:	4770      	bx	lr
    2d10:	40002108 	.word	0x40002108
    2d14:	40002000 	.word	0x40002000

00002d18 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    2d18:	4b02      	ldr	r3, [pc, #8]	; (2d24 <uart_nrfx_err_check+0xc>)
    2d1a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    2d1e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    2d22:	4770      	bx	lr
    2d24:	40002000 	.word	0x40002000

00002d28 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
    2d28:	b530      	push	{r4, r5, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    2d2a:	794b      	ldrb	r3, [r1, #5]
    2d2c:	2b01      	cmp	r3, #1
    2d2e:	d11e      	bne.n	2d6e <uart_nrfx_configure+0x46>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2d30:	798b      	ldrb	r3, [r1, #6]
    2d32:	2b03      	cmp	r3, #3
    2d34:	d11b      	bne.n	2d6e <uart_nrfx_configure+0x46>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2d36:	79ca      	ldrb	r2, [r1, #7]
    2d38:	b10a      	cbz	r2, 2d3e <uart_nrfx_configure+0x16>
    2d3a:	2a01      	cmp	r2, #1
    2d3c:	d117      	bne.n	2d6e <uart_nrfx_configure+0x46>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2d3e:	790c      	ldrb	r4, [r1, #4]
    2d40:	b114      	cbz	r4, 2d48 <uart_nrfx_configure+0x20>
    2d42:	2c02      	cmp	r4, #2
    2d44:	d113      	bne.n	2d6e <uart_nrfx_configure+0x46>
    2d46:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2d48:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    2d4a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    2d4e:	d05f      	beq.n	2e10 <uart_nrfx_configure+0xe8>
    2d50:	d82b      	bhi.n	2daa <uart_nrfx_configure+0x82>
    2d52:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2d56:	d05d      	beq.n	2e14 <uart_nrfx_configure+0xec>
    2d58:	d814      	bhi.n	2d84 <uart_nrfx_configure+0x5c>
    2d5a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2d5e:	d05b      	beq.n	2e18 <uart_nrfx_configure+0xf0>
    2d60:	d808      	bhi.n	2d74 <uart_nrfx_configure+0x4c>
    2d62:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2d66:	d05a      	beq.n	2e1e <uart_nrfx_configure+0xf6>
    2d68:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2d6c:	d05a      	beq.n	2e24 <uart_nrfx_configure+0xfc>
    2d6e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2d72:	e04c      	b.n	2e0e <uart_nrfx_configure+0xe6>
    2d74:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2d78:	d057      	beq.n	2e2a <uart_nrfx_configure+0x102>
    2d7a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2d7e:	d1f6      	bne.n	2d6e <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    2d80:	4b34      	ldr	r3, [pc, #208]	; (2e54 <uart_nrfx_configure+0x12c>)
    2d82:	e039      	b.n	2df8 <uart_nrfx_configure+0xd0>
	switch (baudrate) {
    2d84:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2d88:	d052      	beq.n	2e30 <uart_nrfx_configure+0x108>
    2d8a:	d807      	bhi.n	2d9c <uart_nrfx_configure+0x74>
    2d8c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2d90:	d050      	beq.n	2e34 <uart_nrfx_configure+0x10c>
    2d92:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2d96:	d1ea      	bne.n	2d6e <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    2d98:	4b2f      	ldr	r3, [pc, #188]	; (2e58 <uart_nrfx_configure+0x130>)
    2d9a:	e02d      	b.n	2df8 <uart_nrfx_configure+0xd0>
	switch (baudrate) {
    2d9c:	f647 2512 	movw	r5, #31250	; 0x7a12
    2da0:	42ab      	cmp	r3, r5
    2da2:	d1e4      	bne.n	2d6e <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    2da4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2da8:	e026      	b.n	2df8 <uart_nrfx_configure+0xd0>
	switch (baudrate) {
    2daa:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2dae:	d044      	beq.n	2e3a <uart_nrfx_configure+0x112>
    2db0:	d811      	bhi.n	2dd6 <uart_nrfx_configure+0xae>
    2db2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2db6:	d042      	beq.n	2e3e <uart_nrfx_configure+0x116>
    2db8:	d808      	bhi.n	2dcc <uart_nrfx_configure+0xa4>
    2dba:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    2dbe:	42ab      	cmp	r3, r5
    2dc0:	d03f      	beq.n	2e42 <uart_nrfx_configure+0x11a>
    2dc2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2dc6:	d1d2      	bne.n	2d6e <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    2dc8:	4b24      	ldr	r3, [pc, #144]	; (2e5c <uart_nrfx_configure+0x134>)
    2dca:	e015      	b.n	2df8 <uart_nrfx_configure+0xd0>
	switch (baudrate) {
    2dcc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2dd0:	d1cd      	bne.n	2d6e <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    2dd2:	4b23      	ldr	r3, [pc, #140]	; (2e60 <uart_nrfx_configure+0x138>)
    2dd4:	e010      	b.n	2df8 <uart_nrfx_configure+0xd0>
	switch (baudrate) {
    2dd6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2dda:	d035      	beq.n	2e48 <uart_nrfx_configure+0x120>
    2ddc:	d807      	bhi.n	2dee <uart_nrfx_configure+0xc6>
    2dde:	4d21      	ldr	r5, [pc, #132]	; (2e64 <uart_nrfx_configure+0x13c>)
    2de0:	42ab      	cmp	r3, r5
    2de2:	d033      	beq.n	2e4c <uart_nrfx_configure+0x124>
    2de4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2de8:	d1c1      	bne.n	2d6e <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    2dea:	4b1f      	ldr	r3, [pc, #124]	; (2e68 <uart_nrfx_configure+0x140>)
    2dec:	e004      	b.n	2df8 <uart_nrfx_configure+0xd0>
	switch (baudrate) {
    2dee:	4d1f      	ldr	r5, [pc, #124]	; (2e6c <uart_nrfx_configure+0x144>)
    2df0:	42ab      	cmp	r3, r5
    2df2:	d1bc      	bne.n	2d6e <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    2df4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2df8:	4d1d      	ldr	r5, [pc, #116]	; (2e70 <uart_nrfx_configure+0x148>)
                    | (uint32_t)p_cfg->hwfc;
    2dfa:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    2dfc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2e00:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2e04:	68c3      	ldr	r3, [r0, #12]
    2e06:	c903      	ldmia	r1, {r0, r1}
    2e08:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2e0c:	2000      	movs	r0, #0
}
    2e0e:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    2e10:	4b18      	ldr	r3, [pc, #96]	; (2e74 <uart_nrfx_configure+0x14c>)
    2e12:	e7f1      	b.n	2df8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    2e14:	4b18      	ldr	r3, [pc, #96]	; (2e78 <uart_nrfx_configure+0x150>)
    2e16:	e7ef      	b.n	2df8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    2e18:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2e1c:	e7ec      	b.n	2df8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = 0x00014000;
    2e1e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2e22:	e7e9      	b.n	2df8 <uart_nrfx_configure+0xd0>
	switch (baudrate) {
    2e24:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2e28:	e7e6      	b.n	2df8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    2e2a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2e2e:	e7e3      	b.n	2df8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    2e30:	4b12      	ldr	r3, [pc, #72]	; (2e7c <uart_nrfx_configure+0x154>)
    2e32:	e7e1      	b.n	2df8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    2e34:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    2e38:	e7de      	b.n	2df8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    2e3a:	4b11      	ldr	r3, [pc, #68]	; (2e80 <uart_nrfx_configure+0x158>)
    2e3c:	e7dc      	b.n	2df8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    2e3e:	4b11      	ldr	r3, [pc, #68]	; (2e84 <uart_nrfx_configure+0x15c>)
    2e40:	e7da      	b.n	2df8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    2e42:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2e46:	e7d7      	b.n	2df8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    2e48:	4b0f      	ldr	r3, [pc, #60]	; (2e88 <uart_nrfx_configure+0x160>)
    2e4a:	e7d5      	b.n	2df8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    2e4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2e50:	e7d2      	b.n	2df8 <uart_nrfx_configure+0xd0>
    2e52:	bf00      	nop
    2e54:	0013b000 	.word	0x0013b000
    2e58:	004ea000 	.word	0x004ea000
    2e5c:	00ebf000 	.word	0x00ebf000
    2e60:	01d7e000 	.word	0x01d7e000
    2e64:	0003d090 	.word	0x0003d090
    2e68:	075f7000 	.word	0x075f7000
    2e6c:	000f4240 	.word	0x000f4240
    2e70:	40002000 	.word	0x40002000
    2e74:	009d5000 	.word	0x009d5000
    2e78:	00275000 	.word	0x00275000
    2e7c:	0075f000 	.word	0x0075f000
    2e80:	03afb000 	.word	0x03afb000
    2e84:	013a9000 	.word	0x013a9000
    2e88:	0ebed000 	.word	0x0ebed000

00002e8c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2e8c:	6803      	ldr	r3, [r0, #0]
    switch (port)
    2e8e:	095a      	lsrs	r2, r3, #5
    2e90:	bf0c      	ite	eq
    2e92:	f04f 32ff 	moveq.w	r2, #4294967295
    2e96:	2200      	movne	r2, #0
    pin_number &= 0x1F;
    2e98:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2e9c:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2ea0:	07db      	lsls	r3, r3, #31
{
    2ea2:	b510      	push	{r4, lr}
    2ea4:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2ea6:	d40b      	bmi.n	2ec0 <nrf_gpio_pin_port_decode+0x34>
    2ea8:	4910      	ldr	r1, [pc, #64]	; (2eec <nrf_gpio_pin_port_decode+0x60>)
    2eaa:	4811      	ldr	r0, [pc, #68]	; (2ef0 <nrf_gpio_pin_port_decode+0x64>)
    2eac:	4a11      	ldr	r2, [pc, #68]	; (2ef4 <nrf_gpio_pin_port_decode+0x68>)
    2eae:	f240 231a 	movw	r3, #538	; 0x21a
    2eb2:	f002 fc16 	bl	56e2 <printk>
    2eb6:	480f      	ldr	r0, [pc, #60]	; (2ef4 <nrf_gpio_pin_port_decode+0x68>)
    2eb8:	f240 211a 	movw	r1, #538	; 0x21a
    2ebc:	f002 fd1c 	bl	58f8 <assert_post_action>
    uint32_t pin_number = *p_pin;
    2ec0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    2ec2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2ec6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    2ec8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2eca:	d00b      	beq.n	2ee4 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
    2ecc:	490a      	ldr	r1, [pc, #40]	; (2ef8 <nrf_gpio_pin_port_decode+0x6c>)
    2ece:	4808      	ldr	r0, [pc, #32]	; (2ef0 <nrf_gpio_pin_port_decode+0x64>)
    2ed0:	4a08      	ldr	r2, [pc, #32]	; (2ef4 <nrf_gpio_pin_port_decode+0x68>)
    2ed2:	f240 231f 	movw	r3, #543	; 0x21f
    2ed6:	f002 fc04 	bl	56e2 <printk>
    2eda:	4806      	ldr	r0, [pc, #24]	; (2ef4 <nrf_gpio_pin_port_decode+0x68>)
    2edc:	f240 211f 	movw	r1, #543	; 0x21f
    2ee0:	f002 fd0a 	bl	58f8 <assert_post_action>
}
    2ee4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    2ee8:	bd10      	pop	{r4, pc}
    2eea:	bf00      	nop
    2eec:	000070d1 	.word	0x000070d1
    2ef0:	00005fa5 	.word	0x00005fa5
    2ef4:	0000709e 	.word	0x0000709e
    2ef8:	0000747a 	.word	0x0000747a

00002efc <uart_nrfx_poll_out>:
{
    2efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2efe:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    2f00:	f002 fe9f 	bl	5c42 <k_is_in_isr>
    2f04:	4d19      	ldr	r5, [pc, #100]	; (2f6c <uart_nrfx_poll_out+0x70>)
    2f06:	bb70      	cbnz	r0, 2f66 <uart_nrfx_poll_out+0x6a>
    2f08:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2f0a:	2701      	movs	r7, #1
    2f0c:	f3bf 8f5b 	dmb	ish
    2f10:	e855 3f00 	ldrex	r3, [r5]
    2f14:	2b00      	cmp	r3, #0
    2f16:	d103      	bne.n	2f20 <uart_nrfx_poll_out+0x24>
    2f18:	e845 7200 	strex	r2, r7, [r5]
    2f1c:	2a00      	cmp	r2, #0
    2f1e:	d1f7      	bne.n	2f10 <uart_nrfx_poll_out+0x14>
    2f20:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    2f24:	d007      	beq.n	2f36 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
    2f26:	2021      	movs	r0, #33	; 0x21
    2f28:	2100      	movs	r1, #0
    2f2a:	3c01      	subs	r4, #1
    2f2c:	f001 fe24 	bl	4b78 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    2f30:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2f34:	d1ea      	bne.n	2f0c <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f36:	4c0e      	ldr	r4, [pc, #56]	; (2f70 <uart_nrfx_poll_out+0x74>)
    2f38:	2200      	movs	r2, #0
    2f3a:	6022      	str	r2, [r4, #0]
    2f3c:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f3e:	4a0d      	ldr	r2, [pc, #52]	; (2f74 <uart_nrfx_poll_out+0x78>)
    2f40:	2101      	movs	r1, #1
    2f42:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
    2f44:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
    2f48:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f4c:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    2f4e:	b923      	cbnz	r3, 2f5a <uart_nrfx_poll_out+0x5e>
    2f50:	2001      	movs	r0, #1
    2f52:	f002 fe3a 	bl	5bca <nrfx_busy_wait>
    2f56:	3e01      	subs	r6, #1
    2f58:	d1f8      	bne.n	2f4c <uart_nrfx_poll_out+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f5a:	4b07      	ldr	r3, [pc, #28]	; (2f78 <uart_nrfx_poll_out+0x7c>)
    2f5c:	2201      	movs	r2, #1
    2f5e:	601a      	str	r2, [r3, #0]
	*lock = 0;
    2f60:	2300      	movs	r3, #0
    2f62:	602b      	str	r3, [r5, #0]
}
    2f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
    2f66:	2301      	movs	r3, #1
    2f68:	602b      	str	r3, [r5, #0]
    2f6a:	e7e4      	b.n	2f36 <uart_nrfx_poll_out+0x3a>
    2f6c:	2000074c 	.word	0x2000074c
    2f70:	4000211c 	.word	0x4000211c
    2f74:	40002008 	.word	0x40002008
    2f78:	4000200c 	.word	0x4000200c

00002f7c <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
    2f7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    2f80:	4c2e      	ldr	r4, [pc, #184]	; (303c <uart_nrfx_init+0xc0>)
    2f82:	f04f 0800 	mov.w	r8, #0
    2f86:	2706      	movs	r7, #6
    2f88:	4605      	mov	r5, r0
    2f8a:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2f8e:	a801      	add	r0, sp, #4
    2f90:	9701      	str	r7, [sp, #4]
    2f92:	f7ff ff7b 	bl	2e8c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2f96:	9b01      	ldr	r3, [sp, #4]
    2f98:	2601      	movs	r6, #1
    2f9a:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTSET = set_mask;
    2f9e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2fa2:	a801      	add	r0, sp, #4
    2fa4:	9701      	str	r7, [sp, #4]
    2fa6:	f7ff ff71 	bl	2e8c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2faa:	9b01      	ldr	r3, [sp, #4]
    2fac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2fb0:	f04f 0903 	mov.w	r9, #3
    2fb4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    2fb8:	f04f 0a08 	mov.w	sl, #8
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2fbc:	a801      	add	r0, sp, #4
    2fbe:	f8cd a004 	str.w	sl, [sp, #4]
    2fc2:	f7ff ff63 	bl	2e8c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2fc6:	9b01      	ldr	r3, [sp, #4]
    2fc8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2fcc:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSELRXD = pselrxd;
    2fd0:	f8c4 a514 	str.w	sl, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2fd4:	a801      	add	r0, sp, #4
    p_reg->PSELTXD = pseltxd;
    2fd6:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
        nrf_gpio_pin_set(pin_number);
    2fda:	2705      	movs	r7, #5
    2fdc:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2fde:	f7ff ff55 	bl	2e8c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2fe2:	9b01      	ldr	r3, [sp, #4]
    2fe4:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTSET = set_mask;
    2fe8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2fec:	a801      	add	r0, sp, #4
    2fee:	9701      	str	r7, [sp, #4]
    2ff0:	f7ff ff4c 	bl	2e8c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2ff4:	9b01      	ldr	r3, [sp, #4]
    2ff6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2ffa:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    2ffe:	f04f 0907 	mov.w	r9, #7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3002:	a801      	add	r0, sp, #4
    3004:	f8cd 9004 	str.w	r9, [sp, #4]
    3008:	f7ff ff40 	bl	2e8c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    300c:	9b01      	ldr	r3, [sp, #4]
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    300e:	68e9      	ldr	r1, [r5, #12]
    3010:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3014:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSELRTS = pselrts;
    3018:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
    301c:	4628      	mov	r0, r5
    p_reg->PSELCTS = pselcts;
    301e:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
    3022:	f7ff fe81 	bl	2d28 <uart_nrfx_configure>
	if (err) {
    3026:	b930      	cbnz	r0, 3036 <uart_nrfx_init+0xba>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    3028:	2304      	movs	r3, #4
    302a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    302e:	4b04      	ldr	r3, [pc, #16]	; (3040 <uart_nrfx_init+0xc4>)
    3030:	6018      	str	r0, [r3, #0]
    3032:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3034:	6026      	str	r6, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    3036:	b002      	add	sp, #8
    3038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    303c:	40002000 	.word	0x40002000
    3040:	40002108 	.word	0x40002108

00003044 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    3044:	4b04      	ldr	r3, [pc, #16]	; (3058 <nrf52_errata_108+0x14>)
    3046:	6818      	ldr	r0, [r3, #0]
    3048:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    304a:	bf04      	itt	eq
    304c:	4b03      	ldreq	r3, [pc, #12]	; (305c <nrf52_errata_108+0x18>)
    304e:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    3050:	1f83      	subs	r3, r0, #6
    3052:	4258      	negs	r0, r3
    3054:	4158      	adcs	r0, r3
    3056:	4770      	bx	lr
    3058:	10000130 	.word	0x10000130
    305c:	f0000fe0 	.word	0xf0000fe0

00003060 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3060:	4b07      	ldr	r3, [pc, #28]	; (3080 <nrf52_errata_16+0x20>)
    3062:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3064:	2b06      	cmp	r3, #6
    3066:	d109      	bne.n	307c <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3068:	4b06      	ldr	r3, [pc, #24]	; (3084 <nrf52_errata_16+0x24>)
    306a:	681b      	ldr	r3, [r3, #0]
    306c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    3070:	3b03      	subs	r3, #3
    3072:	2b03      	cmp	r3, #3
    3074:	d802      	bhi.n	307c <nrf52_errata_16+0x1c>
    3076:	4a04      	ldr	r2, [pc, #16]	; (3088 <nrf52_errata_16+0x28>)
    3078:	5cd0      	ldrb	r0, [r2, r3]
    307a:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    307c:	2000      	movs	r0, #0
    #endif
}
    307e:	4770      	bx	lr
    3080:	f0000fe0 	.word	0xf0000fe0
    3084:	f0000fe8 	.word	0xf0000fe8
    3088:	00007108 	.word	0x00007108

0000308c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    308c:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_12()){
    308e:	f7ff ffd9 	bl	3044 <nrf52_errata_108>
    3092:	b128      	cbz	r0, 30a0 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    3094:	4b7e      	ldr	r3, [pc, #504]	; (3290 <SystemInit+0x204>)
    3096:	4a7f      	ldr	r2, [pc, #508]	; (3294 <SystemInit+0x208>)
    3098:	681b      	ldr	r3, [r3, #0]
    309a:	f3c3 2304 	ubfx	r3, r3, #8, #5
    309e:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_16()){
    30a0:	f7ff ffde 	bl	3060 <nrf52_errata_16>
    30a4:	b110      	cbz	r0, 30ac <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    30a6:	4b7c      	ldr	r3, [pc, #496]	; (3298 <SystemInit+0x20c>)
    30a8:	4a7c      	ldr	r2, [pc, #496]	; (329c <SystemInit+0x210>)
    30aa:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_31()){
    30ac:	f7ff ffca 	bl	3044 <nrf52_errata_108>
    30b0:	b128      	cbz	r0, 30be <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    30b2:	4b7b      	ldr	r3, [pc, #492]	; (32a0 <SystemInit+0x214>)
    30b4:	4a7b      	ldr	r2, [pc, #492]	; (32a4 <SystemInit+0x218>)
    30b6:	681b      	ldr	r3, [r3, #0]
    30b8:	f3c3 3342 	ubfx	r3, r3, #13, #3
    30bc:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_32()){
    30be:	f7ff ffcf 	bl	3060 <nrf52_errata_16>
    30c2:	b120      	cbz	r0, 30ce <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    30c4:	4a78      	ldr	r2, [pc, #480]	; (32a8 <SystemInit+0x21c>)
    30c6:	68d3      	ldr	r3, [r2, #12]
    30c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    30cc:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
    30ce:	f7ff ffb9 	bl	3044 <nrf52_errata_108>
    30d2:	b140      	cbz	r0, 30e6 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    30d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30d8:	2200      	movs	r2, #0
    30da:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    30de:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    30e2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_37()){
    30e6:	f7ff ffbb 	bl	3060 <nrf52_errata_16>
    30ea:	b110      	cbz	r0, 30f2 <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    30ec:	4b6f      	ldr	r3, [pc, #444]	; (32ac <SystemInit+0x220>)
    30ee:	2203      	movs	r2, #3
    30f0:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_57()){
    30f2:	f7ff ffb5 	bl	3060 <nrf52_errata_16>
    30f6:	b140      	cbz	r0, 310a <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    30f8:	4b6d      	ldr	r3, [pc, #436]	; (32b0 <SystemInit+0x224>)
    30fa:	2205      	movs	r2, #5
    30fc:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    30fe:	2201      	movs	r2, #1
    3100:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    3102:	2200      	movs	r2, #0
    3104:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    3106:	223f      	movs	r2, #63	; 0x3f
    3108:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    310a:	4b6a      	ldr	r3, [pc, #424]	; (32b4 <SystemInit+0x228>)
    310c:	681a      	ldr	r2, [r3, #0]
    310e:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3110:	bf0b      	itete	eq
    3112:	4b69      	ldreq	r3, [pc, #420]	; (32b8 <SystemInit+0x22c>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    3114:	4b69      	ldrne	r3, [pc, #420]	; (32bc <SystemInit+0x230>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3116:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
    3118:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    311a:	bf02      	ittt	eq
    311c:	3308      	addeq	r3, #8
    311e:	681b      	ldreq	r3, [r3, #0]
    3120:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3124:	2a06      	cmp	r2, #6
    3126:	d14d      	bne.n	31c4 <SystemInit+0x138>
            {
                switch(var2)
    3128:	3b03      	subs	r3, #3
    312a:	2b03      	cmp	r3, #3
    312c:	d803      	bhi.n	3136 <SystemInit+0xaa>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
    312e:	4a64      	ldr	r2, [pc, #400]	; (32c0 <SystemInit+0x234>)
    3130:	5cd3      	ldrb	r3, [r2, r3]
    3132:	2b00      	cmp	r3, #0
    3134:	d046      	beq.n	31c4 <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    313a:	4b62      	ldr	r3, [pc, #392]	; (32c4 <SystemInit+0x238>)
    313c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3140:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3144:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3148:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    314c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3150:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3154:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3158:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    315c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3160:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3164:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3168:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    316c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3170:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3174:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3178:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    317c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3180:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3184:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3188:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    318c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3190:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3194:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3198:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    319c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    31a0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    31a4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    31a8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    31ac:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    31b0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    31b4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    31b8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    31bc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    31c0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_108()){
    31c4:	f7ff ff3e 	bl	3044 <nrf52_errata_108>
    31c8:	b128      	cbz	r0, 31d6 <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    31ca:	4b3f      	ldr	r3, [pc, #252]	; (32c8 <SystemInit+0x23c>)
    31cc:	4a3f      	ldr	r2, [pc, #252]	; (32cc <SystemInit+0x240>)
    31ce:	681b      	ldr	r3, [r3, #0]
    31d0:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    31d4:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
    31d6:	f7ff ff35 	bl	3044 <nrf52_errata_108>
    31da:	b148      	cbz	r0, 31f0 <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    31dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31e0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    31e4:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    31e6:	bf44      	itt	mi
    31e8:	f06f 0201 	mvnmi.w	r2, #1
    31ec:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    31f0:	4b30      	ldr	r3, [pc, #192]	; (32b4 <SystemInit+0x228>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    31f2:	681b      	ldr	r3, [r3, #0]
    31f4:	2b06      	cmp	r3, #6
    31f6:	d10c      	bne.n	3212 <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    31f8:	4b30      	ldr	r3, [pc, #192]	; (32bc <SystemInit+0x230>)
    31fa:	681b      	ldr	r3, [r3, #0]
    31fc:	3b03      	subs	r3, #3
    31fe:	2b03      	cmp	r3, #3
    3200:	d802      	bhi.n	3208 <SystemInit+0x17c>
        }
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_182()){
    3202:	4a33      	ldr	r2, [pc, #204]	; (32d0 <SystemInit+0x244>)
    3204:	5cd3      	ldrb	r3, [r2, r3]
    3206:	b123      	cbz	r3, 3212 <SystemInit+0x186>
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    3208:	4a32      	ldr	r2, [pc, #200]	; (32d4 <SystemInit+0x248>)
    320a:	6813      	ldr	r3, [r2, #0]
    320c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3210:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3212:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3216:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    321a:	2a00      	cmp	r2, #0
    321c:	db03      	blt.n	3226 <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    321e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3222:	2b00      	cmp	r3, #0
    3224:	da2f      	bge.n	3286 <SystemInit+0x1fa>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    3226:	4b2c      	ldr	r3, [pc, #176]	; (32d8 <SystemInit+0x24c>)
    3228:	2201      	movs	r2, #1
    322a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    322e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3232:	2a00      	cmp	r2, #0
    3234:	d0fb      	beq.n	322e <SystemInit+0x1a2>
            NRF_UICR->PSELRESET[0] = 21;
    3236:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    323a:	2115      	movs	r1, #21
    323c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3240:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3244:	2a00      	cmp	r2, #0
    3246:	d0fb      	beq.n	3240 <SystemInit+0x1b4>
            NRF_UICR->PSELRESET[1] = 21;
    3248:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    324c:	2215      	movs	r2, #21
    324e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3252:	4b21      	ldr	r3, [pc, #132]	; (32d8 <SystemInit+0x24c>)
    3254:	461a      	mov	r2, r3
    3256:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    325a:	2900      	cmp	r1, #0
    325c:	d0fb      	beq.n	3256 <SystemInit+0x1ca>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    325e:	2100      	movs	r1, #0
    3260:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3264:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3268:	2b00      	cmp	r3, #0
    326a:	d0fb      	beq.n	3264 <SystemInit+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
    326c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3270:	491a      	ldr	r1, [pc, #104]	; (32dc <SystemInit+0x250>)
    3272:	4b1b      	ldr	r3, [pc, #108]	; (32e0 <SystemInit+0x254>)
    3274:	68ca      	ldr	r2, [r1, #12]
    3276:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    327a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    327c:	60cb      	str	r3, [r1, #12]
    327e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3282:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3284:	e7fd      	b.n	3282 <SystemInit+0x1f6>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3286:	4b17      	ldr	r3, [pc, #92]	; (32e4 <SystemInit+0x258>)
    3288:	4a17      	ldr	r2, [pc, #92]	; (32e8 <SystemInit+0x25c>)
    328a:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    328c:	bd08      	pop	{r3, pc}
    328e:	bf00      	nop
    3290:	10000324 	.word	0x10000324
    3294:	40013540 	.word	0x40013540
    3298:	4007c074 	.word	0x4007c074
    329c:	baadf00d 	.word	0xbaadf00d
    32a0:	10000244 	.word	0x10000244
    32a4:	4000053c 	.word	0x4000053c
    32a8:	e000edf0 	.word	0xe000edf0
    32ac:	400005a0 	.word	0x400005a0
    32b0:	40005610 	.word	0x40005610
    32b4:	10000130 	.word	0x10000130
    32b8:	f0000fe0 	.word	0xf0000fe0
    32bc:	10000134 	.word	0x10000134
    32c0:	00007100 	.word	0x00007100
    32c4:	4000c000 	.word	0x4000c000
    32c8:	10000258 	.word	0x10000258
    32cc:	40000ee4 	.word	0x40000ee4
    32d0:	00007104 	.word	0x00007104
    32d4:	4000173c 	.word	0x4000173c
    32d8:	4001e000 	.word	0x4001e000
    32dc:	e000ed00 	.word	0xe000ed00
    32e0:	05fa0004 	.word	0x05fa0004
    32e4:	20000010 	.word	0x20000010
    32e8:	03d09000 	.word	0x03d09000

000032ec <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    32ec:	b508      	push	{r3, lr}
    switch (domain)
    32ee:	b178      	cbz	r0, 3310 <nrf_clock_is_running.constprop.0+0x24>
    32f0:	2801      	cmp	r0, #1
    32f2:	d01c      	beq.n	332e <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    32f4:	4a14      	ldr	r2, [pc, #80]	; (3348 <nrf_clock_is_running.constprop.0+0x5c>)
    32f6:	4915      	ldr	r1, [pc, #84]	; (334c <nrf_clock_is_running.constprop.0+0x60>)
    32f8:	4815      	ldr	r0, [pc, #84]	; (3350 <nrf_clock_is_running.constprop.0+0x64>)
    32fa:	f240 3342 	movw	r3, #834	; 0x342
    32fe:	f002 f9f0 	bl	56e2 <printk>
    3302:	4811      	ldr	r0, [pc, #68]	; (3348 <nrf_clock_is_running.constprop.0+0x5c>)
    3304:	f240 3142 	movw	r1, #834	; 0x342
    3308:	f002 faf6 	bl	58f8 <assert_post_action>
            return false;
    330c:	2000      	movs	r0, #0
    330e:	e00d      	b.n	332c <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    3310:	b131      	cbz	r1, 3320 <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3312:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3316:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    331a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    331e:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3324:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3328:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    332c:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    332e:	b131      	cbz	r1, 333e <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3334:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3338:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    333c:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    333e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3342:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    3346:	e7ef      	b.n	3328 <nrf_clock_is_running.constprop.0+0x3c>
    3348:	0000710c 	.word	0x0000710c
    334c:	0000747a 	.word	0x0000747a
    3350:	00005fa5 	.word	0x00005fa5

00003354 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    3354:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    3356:	4604      	mov	r4, r0
    3358:	b948      	cbnz	r0, 336e <nrfx_clock_init+0x1a>
    335a:	490a      	ldr	r1, [pc, #40]	; (3384 <nrfx_clock_init+0x30>)
    335c:	480a      	ldr	r0, [pc, #40]	; (3388 <nrfx_clock_init+0x34>)
    335e:	4a0b      	ldr	r2, [pc, #44]	; (338c <nrfx_clock_init+0x38>)
    3360:	23b3      	movs	r3, #179	; 0xb3
    3362:	f002 f9be 	bl	56e2 <printk>
    3366:	4809      	ldr	r0, [pc, #36]	; (338c <nrfx_clock_init+0x38>)
    3368:	21b3      	movs	r1, #179	; 0xb3
    336a:	f002 fac5 	bl	58f8 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    336e:	4b08      	ldr	r3, [pc, #32]	; (3390 <nrfx_clock_init+0x3c>)
    3370:	791a      	ldrb	r2, [r3, #4]
    3372:	b922      	cbnz	r2, 337e <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3374:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    3376:	4807      	ldr	r0, [pc, #28]	; (3394 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    3378:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    337a:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    337c:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    337e:	4806      	ldr	r0, [pc, #24]	; (3398 <nrfx_clock_init+0x44>)
    return err_code;
    3380:	e7fc      	b.n	337c <nrfx_clock_init+0x28>
    3382:	bf00      	nop
    3384:	0000717d 	.word	0x0000717d
    3388:	00005fa5 	.word	0x00005fa5
    338c:	00007140 	.word	0x00007140
    3390:	20000750 	.word	0x20000750
    3394:	0bad0000 	.word	0x0bad0000
    3398:	0bad000c 	.word	0x0bad000c

0000339c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    339c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    339e:	4b0b      	ldr	r3, [pc, #44]	; (33cc <nrfx_clock_enable+0x30>)
    33a0:	791b      	ldrb	r3, [r3, #4]
    33a2:	b94b      	cbnz	r3, 33b8 <nrfx_clock_enable+0x1c>
    33a4:	490a      	ldr	r1, [pc, #40]	; (33d0 <nrfx_clock_enable+0x34>)
    33a6:	480b      	ldr	r0, [pc, #44]	; (33d4 <nrfx_clock_enable+0x38>)
    33a8:	4a0b      	ldr	r2, [pc, #44]	; (33d8 <nrfx_clock_enable+0x3c>)
    33aa:	23cc      	movs	r3, #204	; 0xcc
    33ac:	f002 f999 	bl	56e2 <printk>
    33b0:	4809      	ldr	r0, [pc, #36]	; (33d8 <nrfx_clock_enable+0x3c>)
    33b2:	21cc      	movs	r1, #204	; 0xcc
    33b4:	f002 faa0 	bl	58f8 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    33b8:	2000      	movs	r0, #0
    33ba:	f7fe fc97 	bl	1cec <arch_irq_is_enabled>
    33be:	b918      	cbnz	r0, 33c8 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    33c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    33c4:	f7fe bc82 	b.w	1ccc <arch_irq_enable>
    33c8:	bd08      	pop	{r3, pc}
    33ca:	bf00      	nop
    33cc:	20000750 	.word	0x20000750
    33d0:	0000718b 	.word	0x0000718b
    33d4:	00005fa5 	.word	0x00005fa5
    33d8:	00007140 	.word	0x00007140

000033dc <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    33dc:	4b2c      	ldr	r3, [pc, #176]	; (3490 <nrfx_clock_start+0xb4>)
    33de:	791b      	ldrb	r3, [r3, #4]
{
    33e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    33e2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    33e4:	b95b      	cbnz	r3, 33fe <nrfx_clock_start+0x22>
    33e6:	492b      	ldr	r1, [pc, #172]	; (3494 <nrfx_clock_start+0xb8>)
    33e8:	482b      	ldr	r0, [pc, #172]	; (3498 <nrfx_clock_start+0xbc>)
    33ea:	4a2c      	ldr	r2, [pc, #176]	; (349c <nrfx_clock_start+0xc0>)
    33ec:	f44f 7384 	mov.w	r3, #264	; 0x108
    33f0:	f002 f977 	bl	56e2 <printk>
    33f4:	4829      	ldr	r0, [pc, #164]	; (349c <nrfx_clock_start+0xc0>)
    33f6:	f44f 7184 	mov.w	r1, #264	; 0x108
    33fa:	f002 fa7d 	bl	58f8 <assert_post_action>
    switch (domain)
    33fe:	b174      	cbz	r4, 341e <nrfx_clock_start+0x42>
    3400:	2c01      	cmp	r4, #1
    3402:	d03a      	beq.n	347a <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3404:	4a25      	ldr	r2, [pc, #148]	; (349c <nrfx_clock_start+0xc0>)
    3406:	4926      	ldr	r1, [pc, #152]	; (34a0 <nrfx_clock_start+0xc4>)
    3408:	4823      	ldr	r0, [pc, #140]	; (3498 <nrfx_clock_start+0xbc>)
    340a:	f44f 739d 	mov.w	r3, #314	; 0x13a
    340e:	f002 f968 	bl	56e2 <printk>
    3412:	4822      	ldr	r0, [pc, #136]	; (349c <nrfx_clock_start+0xc0>)
    3414:	f44f 719d 	mov.w	r1, #314	; 0x13a
    3418:	f002 fa6e 	bl	58f8 <assert_post_action>
            break;
    }
}
    341c:	e029      	b.n	3472 <nrfx_clock_start+0x96>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    341e:	a901      	add	r1, sp, #4
    3420:	4620      	mov	r0, r4
    3422:	f7ff ff63 	bl	32ec <nrf_clock_is_running.constprop.0>
    3426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    342a:	b320      	cbz	r0, 3476 <nrfx_clock_start+0x9a>
    342c:	9a01      	ldr	r2, [sp, #4]
    342e:	2a01      	cmp	r2, #1
    3430:	d121      	bne.n	3476 <nrfx_clock_start+0x9a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3432:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3436:	4b1b      	ldr	r3, [pc, #108]	; (34a4 <nrfx_clock_start+0xc8>)
    3438:	2200      	movs	r2, #0
    343a:	601a      	str	r2, [r3, #0]
    343c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    343e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3442:	2202      	movs	r2, #2
    3444:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    3448:	4a17      	ldr	r2, [pc, #92]	; (34a8 <nrfx_clock_start+0xcc>)
    344a:	68d0      	ldr	r0, [r2, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    344c:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    3450:	60d3      	str	r3, [r2, #12]
    dwt_ctrl = DWT->CTRL;
    3452:	4b16      	ldr	r3, [pc, #88]	; (34ac <nrfx_clock_start+0xd0>)
    3454:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    3456:	f044 0101 	orr.w	r1, r4, #1
    345a:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    345c:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    345e:	6859      	ldr	r1, [r3, #4]
    3460:	1b49      	subs	r1, r1, r5
    3462:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    3466:	d3fa      	bcc.n	345e <nrfx_clock_start+0x82>
    DWT->CTRL = dwt_ctrl;
    3468:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    346a:	4b11      	ldr	r3, [pc, #68]	; (34b0 <nrfx_clock_start+0xd4>)
    CoreDebug->DEMCR = core_debug;
    346c:	60d0      	str	r0, [r2, #12]
    346e:	2201      	movs	r2, #1
    3470:	601a      	str	r2, [r3, #0]
}
    3472:	b003      	add	sp, #12
    3474:	bd30      	pop	{r4, r5, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    3476:	2200      	movs	r2, #0
    3478:	e7db      	b.n	3432 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    347a:	4b0e      	ldr	r3, [pc, #56]	; (34b4 <nrfx_clock_start+0xd8>)
    347c:	2200      	movs	r2, #0
    347e:	601a      	str	r2, [r3, #0]
    3480:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3482:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3486:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    348a:	601c      	str	r4, [r3, #0]
}
    348c:	e7f1      	b.n	3472 <nrfx_clock_start+0x96>
    348e:	bf00      	nop
    3490:	20000750 	.word	0x20000750
    3494:	0000718b 	.word	0x0000718b
    3498:	00005fa5 	.word	0x00005fa5
    349c:	00007140 	.word	0x00007140
    34a0:	0000747a 	.word	0x0000747a
    34a4:	40000104 	.word	0x40000104
    34a8:	e000edf0 	.word	0xe000edf0
    34ac:	e0001000 	.word	0xe0001000
    34b0:	40000008 	.word	0x40000008
    34b4:	40000100 	.word	0x40000100

000034b8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    34b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    34ba:	4d2f      	ldr	r5, [pc, #188]	; (3578 <nrfx_clock_stop+0xc0>)
    34bc:	792a      	ldrb	r2, [r5, #4]
{
    34be:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    34c0:	b95a      	cbnz	r2, 34da <nrfx_clock_stop+0x22>
    34c2:	492e      	ldr	r1, [pc, #184]	; (357c <nrfx_clock_stop+0xc4>)
    34c4:	482e      	ldr	r0, [pc, #184]	; (3580 <nrfx_clock_stop+0xc8>)
    34c6:	4a2f      	ldr	r2, [pc, #188]	; (3584 <nrfx_clock_stop+0xcc>)
    34c8:	f240 1341 	movw	r3, #321	; 0x141
    34cc:	f002 f909 	bl	56e2 <printk>
    34d0:	482c      	ldr	r0, [pc, #176]	; (3584 <nrfx_clock_stop+0xcc>)
    34d2:	f240 1141 	movw	r1, #321	; 0x141
    34d6:	f002 fa0f 	bl	58f8 <assert_post_action>
    switch (domain)
    34da:	b17c      	cbz	r4, 34fc <nrfx_clock_stop+0x44>
    34dc:	2c01      	cmp	r4, #1
    34de:	d028      	beq.n	3532 <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    34e0:	4929      	ldr	r1, [pc, #164]	; (3588 <nrfx_clock_stop+0xd0>)
    34e2:	4827      	ldr	r0, [pc, #156]	; (3580 <nrfx_clock_stop+0xc8>)
    34e4:	4a27      	ldr	r2, [pc, #156]	; (3584 <nrfx_clock_stop+0xcc>)
    34e6:	f240 135d 	movw	r3, #349	; 0x15d
    34ea:	f002 f8fa 	bl	56e2 <printk>
    34ee:	4825      	ldr	r0, [pc, #148]	; (3584 <nrfx_clock_stop+0xcc>)
    34f0:	f240 115d 	movw	r1, #349	; 0x15d
    34f4:	f002 fa00 	bl	58f8 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    34f8:	b003      	add	sp, #12
    34fa:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    34fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3500:	2202      	movs	r2, #2
    3502:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3506:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    350a:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    350e:	2201      	movs	r2, #1
    3510:	681b      	ldr	r3, [r3, #0]
    3512:	4b1e      	ldr	r3, [pc, #120]	; (358c <nrfx_clock_stop+0xd4>)
    3514:	f242 7410 	movw	r4, #10000	; 0x2710
    3518:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    351a:	2100      	movs	r1, #0
    351c:	4608      	mov	r0, r1
    351e:	f7ff fee5 	bl	32ec <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3522:	2800      	cmp	r0, #0
    3524:	d0e8      	beq.n	34f8 <nrfx_clock_stop+0x40>
    3526:	2001      	movs	r0, #1
    3528:	f002 fb4f 	bl	5bca <nrfx_busy_wait>
    352c:	3c01      	subs	r4, #1
    352e:	d1f4      	bne.n	351a <nrfx_clock_stop+0x62>
    3530:	e7e2      	b.n	34f8 <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    3532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3536:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3538:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    353c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3540:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3544:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3546:	4b12      	ldr	r3, [pc, #72]	; (3590 <nrfx_clock_stop+0xd8>)
    3548:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    354a:	f88d 4007 	strb.w	r4, [sp, #7]
    354e:	f242 7410 	movw	r4, #10000	; 0x2710
    3552:	f10d 0107 	add.w	r1, sp, #7
    3556:	2001      	movs	r0, #1
    3558:	f7ff fec8 	bl	32ec <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    355c:	b910      	cbnz	r0, 3564 <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    355e:	2300      	movs	r3, #0
    3560:	716b      	strb	r3, [r5, #5]
    3562:	e7c9      	b.n	34f8 <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3564:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3568:	2801      	cmp	r0, #1
    356a:	d1f8      	bne.n	355e <nrfx_clock_stop+0xa6>
    356c:	f002 fb2d 	bl	5bca <nrfx_busy_wait>
    3570:	3c01      	subs	r4, #1
    3572:	d1ee      	bne.n	3552 <nrfx_clock_stop+0x9a>
    3574:	e7f3      	b.n	355e <nrfx_clock_stop+0xa6>
    3576:	bf00      	nop
    3578:	20000750 	.word	0x20000750
    357c:	0000718b 	.word	0x0000718b
    3580:	00005fa5 	.word	0x00005fa5
    3584:	00007140 	.word	0x00007140
    3588:	0000747a 	.word	0x0000747a
    358c:	4000000c 	.word	0x4000000c
    3590:	40000004 	.word	0x40000004

00003594 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3594:	4b16      	ldr	r3, [pc, #88]	; (35f0 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3596:	b507      	push	{r0, r1, r2, lr}
    3598:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    359a:	b16a      	cbz	r2, 35b8 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    359c:	2200      	movs	r2, #0
    359e:	601a      	str	r2, [r3, #0]
    35a0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    35a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    35a6:	2201      	movs	r2, #1
    35a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    35ac:	4b11      	ldr	r3, [pc, #68]	; (35f4 <nrfx_power_clock_irq_handler+0x60>)
    35ae:	7958      	ldrb	r0, [r3, #5]
    35b0:	b910      	cbnz	r0, 35b8 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    35b2:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    35b4:	681b      	ldr	r3, [r3, #0]
    35b6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    35b8:	4b0f      	ldr	r3, [pc, #60]	; (35f8 <nrfx_power_clock_irq_handler+0x64>)
    35ba:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    35bc:	b16a      	cbz	r2, 35da <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35be:	2000      	movs	r0, #0
    35c0:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    35c2:	a901      	add	r1, sp, #4
    35c4:	681b      	ldr	r3, [r3, #0]
    35c6:	f7ff fe91 	bl	32ec <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    35ca:	9a01      	ldr	r2, [sp, #4]
    35cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    35d0:	b932      	cbnz	r2, 35e0 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    35d2:	2201      	movs	r2, #1
    35d4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35d8:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    35da:	b003      	add	sp, #12
    35dc:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    35e0:	2202      	movs	r2, #2
    35e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    35e6:	4b03      	ldr	r3, [pc, #12]	; (35f4 <nrfx_power_clock_irq_handler+0x60>)
    35e8:	2001      	movs	r0, #1
    35ea:	681b      	ldr	r3, [r3, #0]
    35ec:	4798      	blx	r3
}
    35ee:	e7f4      	b.n	35da <nrfx_power_clock_irq_handler+0x46>
    35f0:	40000100 	.word	0x40000100
    35f4:	20000750 	.word	0x20000750
    35f8:	40000104 	.word	0x40000104

000035fc <nrfx_wdt_init>:
static wdt_control_block_t m_cb[NRFX_WDT_ENABLED_COUNT];

nrfx_err_t nrfx_wdt_init(nrfx_wdt_t const *        p_instance,
                         nrfx_wdt_config_t const * p_config,
                         nrfx_wdt_event_handler_t  wdt_event_handler)
{
    35fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3600:	4604      	mov	r4, r0
    3602:	4690      	mov	r8, r2
    NRFX_ASSERT(p_config);
    3604:	460d      	mov	r5, r1
    3606:	b949      	cbnz	r1, 361c <nrfx_wdt_init+0x20>
    3608:	4922      	ldr	r1, [pc, #136]	; (3694 <nrfx_wdt_init+0x98>)
    360a:	4823      	ldr	r0, [pc, #140]	; (3698 <nrfx_wdt_init+0x9c>)
    360c:	4a23      	ldr	r2, [pc, #140]	; (369c <nrfx_wdt_init+0xa0>)
    360e:	233d      	movs	r3, #61	; 0x3d
    3610:	f002 f867 	bl	56e2 <printk>
    3614:	4821      	ldr	r0, [pc, #132]	; (369c <nrfx_wdt_init+0xa0>)
    3616:	213d      	movs	r1, #61	; 0x3d
    3618:	f002 f96e 	bl	58f8 <assert_post_action>
    nrfx_err_t err_code;

    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    361c:	7922      	ldrb	r2, [r4, #4]

#if NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    (void)wdt_event_handler;
#else
    p_cb->wdt_event_handler = wdt_event_handler;
    361e:	4b20      	ldr	r3, [pc, #128]	; (36a0 <nrfx_wdt_init+0xa4>)
    3620:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    3624:	f8c1 8004 	str.w	r8, [r1, #4]
#endif

    if (p_cb->state == NRFX_DRV_STATE_UNINITIALIZED)
    3628:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
    362c:	bb79      	cbnz	r1, 368e <nrfx_wdt_init+0x92>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    362e:	2001      	movs	r0, #1
    3630:	f803 0032 	strb.w	r0, [r3, r2, lsl #3]
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    nrf_wdt_behaviour_set(p_instance->p_reg, p_config->behaviour);
    3634:	6823      	ldr	r3, [r4, #0]
    p_reg->CONFIG = behaviour;
    3636:	782a      	ldrb	r2, [r5, #0]
    3638:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
    363c:	686b      	ldr	r3, [r5, #4]
    363e:	0c5f      	lsrs	r7, r3, #17
    3640:	03de      	lsls	r6, r3, #15
    3642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3646:	2300      	movs	r3, #0
    3648:	4630      	mov	r0, r6
    364a:	4639      	mov	r1, r7
    364c:	f7fc fd46 	bl	dc <__aeabi_uldivmod>
    NRFX_ASSERT(ticks <= UINT32_MAX);
    3650:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
    3654:	bf08      	it	eq
    3656:	2e00      	cmpeq	r6, #0
    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
    3658:	4605      	mov	r5, r0
    NRFX_ASSERT(ticks <= UINT32_MAX);
    365a:	d309      	bcc.n	3670 <nrfx_wdt_init+0x74>
    365c:	4911      	ldr	r1, [pc, #68]	; (36a4 <nrfx_wdt_init+0xa8>)
    365e:	480e      	ldr	r0, [pc, #56]	; (3698 <nrfx_wdt_init+0x9c>)
    3660:	4a0e      	ldr	r2, [pc, #56]	; (369c <nrfx_wdt_init+0xa0>)
    3662:	2358      	movs	r3, #88	; 0x58
    3664:	f002 f83d 	bl	56e2 <printk>
    3668:	480c      	ldr	r0, [pc, #48]	; (369c <nrfx_wdt_init+0xa0>)
    366a:	2158      	movs	r1, #88	; 0x58
    366c:	f002 f944 	bl	58f8 <assert_post_action>

    nrf_wdt_reload_value_set(p_instance->p_reg, (uint32_t) ticks);
    3670:	6820      	ldr	r0, [r4, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_value_set(NRF_WDT_Type * p_reg, uint32_t reload_value)
{
    p_reg->CRV = reload_value;
    3672:	f8c0 5504 	str.w	r5, [r0, #1284]	; 0x504

#if !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    if (wdt_event_handler)
    3676:	f1b8 0f00 	cmp.w	r8, #0
    367a:	d006      	beq.n	368a <nrfx_wdt_init+0x8e>
    p_reg->INTENSET = mask;
    367c:	2201      	movs	r2, #1
    367e:	f8c0 2304 	str.w	r2, [r0, #772]	; 0x304
    {
        nrf_wdt_int_enable(p_instance->p_reg, NRF_WDT_INT_TIMEOUT_MASK);
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg), p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    3682:	f340 3007 	sbfx	r0, r0, #12, #8
    3686:	f7fe fb21 	bl	1ccc <arch_irq_enable>
    }
#endif

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    368a:	4807      	ldr	r0, [pc, #28]	; (36a8 <nrfx_wdt_init+0xac>)
    368c:	e000      	b.n	3690 <nrfx_wdt_init+0x94>
        return err_code;
    368e:	4807      	ldr	r0, [pc, #28]	; (36ac <nrfx_wdt_init+0xb0>)
}
    3690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3694:	000071e4 	.word	0x000071e4
    3698:	00005fa5 	.word	0x00005fa5
    369c:	000071a9 	.word	0x000071a9
    36a0:	20000758 	.word	0x20000758
    36a4:	000071ed 	.word	0x000071ed
    36a8:	0bad0000 	.word	0x0bad0000
    36ac:	0bad0005 	.word	0x0bad0005

000036b0 <nrfx_wdt_enable>:


void nrfx_wdt_enable(nrfx_wdt_t const * p_instance)
{
    36b0:	b570      	push	{r4, r5, r6, lr}
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->alloc_index != 0);
    36b2:	4c13      	ldr	r4, [pc, #76]	; (3700 <nrfx_wdt_enable+0x50>)
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    36b4:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->alloc_index != 0);
    36b6:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
{
    36ba:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->alloc_index != 0);
    36bc:	785b      	ldrb	r3, [r3, #1]
    36be:	b94b      	cbnz	r3, 36d4 <nrfx_wdt_enable+0x24>
    36c0:	4910      	ldr	r1, [pc, #64]	; (3704 <nrfx_wdt_enable+0x54>)
    36c2:	4811      	ldr	r0, [pc, #68]	; (3708 <nrfx_wdt_enable+0x58>)
    36c4:	4a11      	ldr	r2, [pc, #68]	; (370c <nrfx_wdt_enable+0x5c>)
    36c6:	236e      	movs	r3, #110	; 0x6e
    36c8:	f002 f80b 	bl	56e2 <printk>
    36cc:	480f      	ldr	r0, [pc, #60]	; (370c <nrfx_wdt_enable+0x5c>)
    36ce:	216e      	movs	r1, #110	; 0x6e
    36d0:	f002 f912 	bl	58f8 <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    36d4:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
    36d8:	2b01      	cmp	r3, #1
    36da:	d009      	beq.n	36f0 <nrfx_wdt_enable+0x40>
    36dc:	490c      	ldr	r1, [pc, #48]	; (3710 <nrfx_wdt_enable+0x60>)
    36de:	480a      	ldr	r0, [pc, #40]	; (3708 <nrfx_wdt_enable+0x58>)
    36e0:	4a0a      	ldr	r2, [pc, #40]	; (370c <nrfx_wdt_enable+0x5c>)
    36e2:	236f      	movs	r3, #111	; 0x6f
    36e4:	f001 fffd 	bl	56e2 <printk>
    36e8:	4808      	ldr	r0, [pc, #32]	; (370c <nrfx_wdt_enable+0x5c>)
    36ea:	216f      	movs	r1, #111	; 0x6f
    36ec:	f002 f904 	bl	58f8 <assert_post_action>
    nrf_wdt_task_trigger(p_instance->p_reg, NRF_WDT_TASK_START);
    36f0:	682b      	ldr	r3, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x01UL;
    36f2:	2201      	movs	r2, #1
    36f4:	601a      	str	r2, [r3, #0]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    36f6:	2302      	movs	r3, #2
    36f8:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
    NRFX_LOG_INFO("Enabled.");
}
    36fc:	bd70      	pop	{r4, r5, r6, pc}
    36fe:	bf00      	nop
    3700:	20000758 	.word	0x20000758
    3704:	00007203 	.word	0x00007203
    3708:	00005fa5 	.word	0x00005fa5
    370c:	000071a9 	.word	0x000071a9
    3710:	0000721a 	.word	0x0000721a

00003714 <nrfx_wdt_channel_alloc>:
        nrf_wdt_reload_request_set(p_instance->p_reg, (nrf_wdt_rr_register_t)(NRF_WDT_RR0 + i));
    }
}

nrfx_err_t nrfx_wdt_channel_alloc(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id * p_channel_id)
{
    3714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3716:	4605      	mov	r5, r0
    nrfx_err_t result;
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3718:	7907      	ldrb	r7, [r0, #4]

    NRFX_ASSERT(p_channel_id);
    371a:	460e      	mov	r6, r1
    371c:	b949      	cbnz	r1, 3732 <nrfx_wdt_channel_alloc+0x1e>
    371e:	491c      	ldr	r1, [pc, #112]	; (3790 <nrfx_wdt_channel_alloc+0x7c>)
    3720:	481c      	ldr	r0, [pc, #112]	; (3794 <nrfx_wdt_channel_alloc+0x80>)
    3722:	4a1d      	ldr	r2, [pc, #116]	; (3798 <nrfx_wdt_channel_alloc+0x84>)
    3724:	2385      	movs	r3, #133	; 0x85
    3726:	f001 ffdc 	bl	56e2 <printk>
    372a:	481b      	ldr	r0, [pc, #108]	; (3798 <nrfx_wdt_channel_alloc+0x84>)
    372c:	2185      	movs	r1, #133	; 0x85
    372e:	f002 f8e3 	bl	58f8 <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    3732:	4c1a      	ldr	r4, [pc, #104]	; (379c <nrfx_wdt_channel_alloc+0x88>)
    3734:	f814 2037 	ldrb.w	r2, [r4, r7, lsl #3]
    3738:	2a01      	cmp	r2, #1
    373a:	d009      	beq.n	3750 <nrfx_wdt_channel_alloc+0x3c>
    373c:	4918      	ldr	r1, [pc, #96]	; (37a0 <nrfx_wdt_channel_alloc+0x8c>)
    373e:	4815      	ldr	r0, [pc, #84]	; (3794 <nrfx_wdt_channel_alloc+0x80>)
    3740:	4a15      	ldr	r2, [pc, #84]	; (3798 <nrfx_wdt_channel_alloc+0x84>)
    3742:	2386      	movs	r3, #134	; 0x86
    3744:	f001 ffcd 	bl	56e2 <printk>
    3748:	4813      	ldr	r0, [pc, #76]	; (3798 <nrfx_wdt_channel_alloc+0x84>)
    374a:	2186      	movs	r1, #134	; 0x86
    374c:	f002 f8d4 	bl	58f8 <assert_post_action>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    3750:	f04f 0320 	mov.w	r3, #32
    3754:	f3ef 8c11 	mrs	ip, BASEPRI
    3758:	f383 8811 	msr	BASEPRI, r3
    375c:	f3bf 8f6f 	isb	sy

    NRFX_CRITICAL_SECTION_ENTER();
    if (p_cb->alloc_index < NRF_WDT_CHANNEL_NUMBER)
    3760:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
    3764:	785a      	ldrb	r2, [r3, #1]
    3766:	2a07      	cmp	r2, #7
    3768:	d810      	bhi.n	378c <nrfx_wdt_channel_alloc+0x78>
    {
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
    376a:	7032      	strb	r2, [r6, #0]
        p_cb->alloc_index++;
    376c:	1c51      	adds	r1, r2, #1
    376e:	7059      	strb	r1, [r3, #1]
        nrf_wdt_reload_request_enable(p_instance->p_reg, *p_channel_id);
    3770:	6829      	ldr	r1, [r5, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_enable(NRF_WDT_Type *        p_reg,
                                                     nrf_wdt_rr_register_t rr_register)
{
    p_reg->RREN |= 0x1UL << rr_register;
    3772:	2301      	movs	r3, #1
    3774:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    3778:	4093      	lsls	r3, r2
    377a:	4303      	orrs	r3, r0
        result = NRFX_SUCCESS;
    377c:	4809      	ldr	r0, [pc, #36]	; (37a4 <nrfx_wdt_channel_alloc+0x90>)
    377e:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3782:	f38c 8811 	msr	BASEPRI, ip
    3786:	f3bf 8f6f 	isb	sy
        result = NRFX_ERROR_NO_MEM;
    }
    NRFX_CRITICAL_SECTION_EXIT();
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(result));
    return result;
}
    378a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        result = NRFX_ERROR_NO_MEM;
    378c:	4806      	ldr	r0, [pc, #24]	; (37a8 <nrfx_wdt_channel_alloc+0x94>)
    378e:	e7f8      	b.n	3782 <nrfx_wdt_channel_alloc+0x6e>
    3790:	00007244 	.word	0x00007244
    3794:	00005fa5 	.word	0x00005fa5
    3798:	000071a9 	.word	0x000071a9
    379c:	20000758 	.word	0x20000758
    37a0:	0000721a 	.word	0x0000721a
    37a4:	0bad0000 	.word	0x0bad0000
    37a8:	0bad0002 	.word	0x0bad0002

000037ac <nrfx_wdt_channel_feed>:

void nrfx_wdt_channel_feed(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id channel_id)
{
    37ac:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
    37ae:	4b0c      	ldr	r3, [pc, #48]	; (37e0 <nrfx_wdt_channel_feed+0x34>)
    37b0:	7902      	ldrb	r2, [r0, #4]
    37b2:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
    37b6:	2b02      	cmp	r3, #2
{
    37b8:	4605      	mov	r5, r0
    37ba:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
    37bc:	d009      	beq.n	37d2 <nrfx_wdt_channel_feed+0x26>
    37be:	4909      	ldr	r1, [pc, #36]	; (37e4 <nrfx_wdt_channel_feed+0x38>)
    37c0:	4809      	ldr	r0, [pc, #36]	; (37e8 <nrfx_wdt_channel_feed+0x3c>)
    37c2:	4a0a      	ldr	r2, [pc, #40]	; (37ec <nrfx_wdt_channel_feed+0x40>)
    37c4:	239b      	movs	r3, #155	; 0x9b
    37c6:	f001 ff8c 	bl	56e2 <printk>
    37ca:	4808      	ldr	r0, [pc, #32]	; (37ec <nrfx_wdt_channel_feed+0x40>)
    37cc:	219b      	movs	r1, #155	; 0x9b
    37ce:	f002 f893 	bl	58f8 <assert_post_action>
    nrf_wdt_reload_request_set(p_instance->p_reg, channel_id);
    37d2:	682b      	ldr	r3, [r5, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
    37d4:	4a06      	ldr	r2, [pc, #24]	; (37f0 <nrfx_wdt_channel_feed+0x44>)
    37d6:	f504 74c0 	add.w	r4, r4, #384	; 0x180
    37da:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    37de:	bd38      	pop	{r3, r4, r5, pc}
    37e0:	20000758 	.word	0x20000758
    37e4:	00007251 	.word	0x00007251
    37e8:	00005fa5 	.word	0x00005fa5
    37ec:	000071a9 	.word	0x000071a9
    37f0:	6e524635 	.word	0x6e524635

000037f4 <nrfx_wdt_0_irq_handler>:

#if NRFX_CHECK(NRFX_WDT0_ENABLED) && !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
void nrfx_wdt_0_irq_handler(void)
{
    37f4:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    37f6:	4c05      	ldr	r4, [pc, #20]	; (380c <nrfx_wdt_0_irq_handler+0x18>)
    37f8:	6823      	ldr	r3, [r4, #0]
    if (nrf_wdt_event_check(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT))
    37fa:	b12b      	cbz	r3, 3808 <nrfx_wdt_0_irq_handler+0x14>
    {
        m_cb[NRFX_WDT0_INST_IDX].wdt_event_handler();
    37fc:	4b04      	ldr	r3, [pc, #16]	; (3810 <nrfx_wdt_0_irq_handler+0x1c>)
    37fe:	685b      	ldr	r3, [r3, #4]
    3800:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3802:	2300      	movs	r3, #0
    3804:	6023      	str	r3, [r4, #0]
    3806:	6823      	ldr	r3, [r4, #0]
        nrf_wdt_event_clear(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT);
    }
}
    3808:	bd10      	pop	{r4, pc}
    380a:	bf00      	nop
    380c:	40010100 	.word	0x40010100
    3810:	20000758 	.word	0x20000758

00003814 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    3814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3816:	4b10      	ldr	r3, [pc, #64]	; (3858 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    3818:	4f10      	ldr	r7, [pc, #64]	; (385c <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    381a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    381e:	3001      	adds	r0, #1
    3820:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3824:	42ae      	cmp	r6, r5
    3826:	d800      	bhi.n	382a <z_sys_init_run_level+0x16>
		}
	}
}
    3828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    382a:	e9d5 3400 	ldrd	r3, r4, [r5]
    382e:	4620      	mov	r0, r4
    3830:	4798      	blx	r3
    3832:	b170      	cbz	r0, 3852 <z_sys_init_run_level+0x3e>
    3834:	b16c      	cbz	r4, 3852 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
    3836:	1be4      	subs	r4, r4, r7
    3838:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    383a:	0961      	lsrs	r1, r4, #5
    383c:	4a08      	ldr	r2, [pc, #32]	; (3860 <z_sys_init_run_level+0x4c>)
    383e:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    3842:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
    3846:	2301      	movs	r3, #1
    3848:	fa03 f404 	lsl.w	r4, r3, r4
    384c:	4304      	orrs	r4, r0
    384e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3852:	3508      	adds	r5, #8
    3854:	e7e6      	b.n	3824 <z_sys_init_run_level+0x10>
    3856:	bf00      	nop
    3858:	00005ef8 	.word	0x00005ef8
    385c:	20000020 	.word	0x20000020
    3860:	20000070 	.word	0x20000070

00003864 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    3864:	4b08      	ldr	r3, [pc, #32]	; (3888 <z_device_ready+0x24>)
    3866:	1ac0      	subs	r0, r0, r3
    3868:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    386a:	4b08      	ldr	r3, [pc, #32]	; (388c <z_device_ready+0x28>)
    386c:	0942      	lsrs	r2, r0, #5
    386e:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    3872:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    3876:	2301      	movs	r3, #1
    3878:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    387c:	4210      	tst	r0, r2
}
    387e:	bf0c      	ite	eq
    3880:	4618      	moveq	r0, r3
    3882:	2000      	movne	r0, #0
    3884:	4770      	bx	lr
    3886:	bf00      	nop
    3888:	20000020 	.word	0x20000020
    388c:	20000070 	.word	0x20000070

00003890 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    3890:	4911      	ldr	r1, [pc, #68]	; (38d8 <z_impl_device_get_binding+0x48>)
{
    3892:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
    3894:	4c11      	ldr	r4, [pc, #68]	; (38dc <z_impl_device_get_binding+0x4c>)
{
    3896:	4605      	mov	r5, r0
    3898:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    389a:	428c      	cmp	r4, r1
    389c:	d104      	bne.n	38a8 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    389e:	4c0f      	ldr	r4, [pc, #60]	; (38dc <z_impl_device_get_binding+0x4c>)
    38a0:	42b4      	cmp	r4, r6
    38a2:	d10a      	bne.n	38ba <z_impl_device_get_binding+0x2a>
	return NULL;
    38a4:	2400      	movs	r4, #0
    38a6:	e014      	b.n	38d2 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    38a8:	4620      	mov	r0, r4
    38aa:	f7ff ffdb 	bl	3864 <z_device_ready>
    38ae:	b110      	cbz	r0, 38b6 <z_impl_device_get_binding+0x26>
    38b0:	6823      	ldr	r3, [r4, #0]
    38b2:	42ab      	cmp	r3, r5
    38b4:	d00d      	beq.n	38d2 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    38b6:	3410      	adds	r4, #16
    38b8:	e7ef      	b.n	389a <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    38ba:	4620      	mov	r0, r4
    38bc:	f7ff ffd2 	bl	3864 <z_device_ready>
    38c0:	b908      	cbnz	r0, 38c6 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    38c2:	3410      	adds	r4, #16
    38c4:	e7ec      	b.n	38a0 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    38c6:	6821      	ldr	r1, [r4, #0]
    38c8:	4628      	mov	r0, r5
    38ca:	f002 f8da 	bl	5a82 <strcmp>
    38ce:	2800      	cmp	r0, #0
    38d0:	d1f7      	bne.n	38c2 <z_impl_device_get_binding+0x32>
}
    38d2:	4620      	mov	r0, r4
    38d4:	bd70      	pop	{r4, r5, r6, pc}
    38d6:	bf00      	nop
    38d8:	20000070 	.word	0x20000070
    38dc:	20000020 	.word	0x20000020

000038e0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    38e0:	b510      	push	{r4, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    38e2:	2145      	movs	r1, #69	; 0x45
{
    38e4:	4604      	mov	r4, r0
	LOG_ERR("Halting system");
    38e6:	4803      	ldr	r0, [pc, #12]	; (38f4 <k_sys_fatal_error_handler+0x14>)
    38e8:	f001 fefb 	bl	56e2 <printk>
	arch_system_halt(reason);
    38ec:	4620      	mov	r0, r4
    38ee:	f002 f96e 	bl	5bce <arch_system_halt>
    38f2:	bf00      	nop
    38f4:	00007293 	.word	0x00007293

000038f8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    38f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    38fa:	4604      	mov	r4, r0
    38fc:	460d      	mov	r5, r1
	__asm__ volatile(
    38fe:	f04f 0320 	mov.w	r3, #32
    3902:	f3ef 8711 	mrs	r7, BASEPRI
    3906:	f383 8811 	msr	BASEPRI, r3
    390a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    390e:	f001 f969 	bl	4be4 <z_impl_k_current_get>
    3912:	2c04      	cmp	r4, #4
    3914:	bf96      	itet	ls
    3916:	4b20      	ldrls	r3, [pc, #128]	; (3998 <z_fatal_error+0xa0>)
    3918:	4b20      	ldrhi	r3, [pc, #128]	; (399c <z_fatal_error+0xa4>)
    391a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    391e:	2200      	movs	r2, #0
    3920:	4606      	mov	r6, r0
    3922:	9200      	str	r2, [sp, #0]
    3924:	481e      	ldr	r0, [pc, #120]	; (39a0 <z_fatal_error+0xa8>)
    3926:	4622      	mov	r2, r4
    3928:	2145      	movs	r1, #69	; 0x45
    392a:	f001 feda 	bl	56e2 <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    392e:	b13d      	cbz	r5, 3940 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    3930:	69eb      	ldr	r3, [r5, #28]
    3932:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3936:	b11b      	cbz	r3, 3940 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
    3938:	481a      	ldr	r0, [pc, #104]	; (39a4 <z_fatal_error+0xac>)
    393a:	2145      	movs	r1, #69	; 0x45
    393c:	f001 fed1 	bl	56e2 <printk>
	const char *thread_name = k_thread_name_get(thread);
    3940:	4630      	mov	r0, r6
    3942:	f002 f986 	bl	5c52 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    3946:	4603      	mov	r3, r0
    3948:	b1c0      	cbz	r0, 397c <z_fatal_error+0x84>
    394a:	7801      	ldrb	r1, [r0, #0]
		thread_name = "unknown";
    394c:	4a16      	ldr	r2, [pc, #88]	; (39a8 <z_fatal_error+0xb0>)
    394e:	2900      	cmp	r1, #0
    3950:	bf08      	it	eq
    3952:	4613      	moveq	r3, r2
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    3954:	4815      	ldr	r0, [pc, #84]	; (39ac <z_fatal_error+0xb4>)
    3956:	2145      	movs	r1, #69	; 0x45
    3958:	4632      	mov	r2, r6
    395a:	f001 fec2 	bl	56e2 <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    395e:	4629      	mov	r1, r5
    3960:	4620      	mov	r0, r4
    3962:	f7ff ffbd 	bl	38e0 <k_sys_fatal_error_handler>
		}
#endif /* CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	} else {
		/* Test mode */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
		if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    3966:	b15d      	cbz	r5, 3980 <z_fatal_error+0x88>
    3968:	69eb      	ldr	r3, [r5, #28]
    396a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    396e:	b13b      	cbz	r3, 3980 <z_fatal_error+0x88>
	__asm__ volatile(
    3970:	f387 8811 	msr	BASEPRI, r7
    3974:	f3bf 8f6f 	isb	sy
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    3978:	b003      	add	sp, #12
    397a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		thread_name = "unknown";
    397c:	4b0a      	ldr	r3, [pc, #40]	; (39a8 <z_fatal_error+0xb0>)
    397e:	e7e9      	b.n	3954 <z_fatal_error+0x5c>
			if (reason == K_ERR_SPURIOUS_IRQ) {
    3980:	2c01      	cmp	r4, #1
    3982:	d0f5      	beq.n	3970 <z_fatal_error+0x78>
    3984:	f387 8811 	msr	BASEPRI, r7
    3988:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    398c:	4630      	mov	r0, r6
}
    398e:	b003      	add	sp, #12
    3990:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3994:	f7fe bd44 	b.w	2420 <z_impl_k_thread_abort>
    3998:	00005f10 	.word	0x00005f10
    399c:	000072a7 	.word	0x000072a7
    39a0:	000072bd 	.word	0x000072bd
    39a4:	000072ea 	.word	0x000072ea
    39a8:	000072b5 	.word	0x000072b5
    39ac:	00007310 	.word	0x00007310

000039b0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    39b0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    39b2:	4d0b      	ldr	r5, [pc, #44]	; (39e0 <idle+0x30>)
	__asm__ volatile(
    39b4:	f04f 0220 	mov.w	r2, #32
    39b8:	f3ef 8311 	mrs	r3, BASEPRI
    39bc:	f382 8811 	msr	BASEPRI, r2
    39c0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    39c4:	f001 fc74 	bl	52b0 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    39c8:	2101      	movs	r1, #1
    39ca:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
    39cc:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    39ce:	bfd8      	it	le
    39d0:	4608      	movle	r0, r1
    39d2:	f001 fcb5 	bl	5340 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    39d6:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
    39d8:	f7fe faac 	bl	1f34 <arch_cpu_idle>
}
    39dc:	e7ea      	b.n	39b4 <idle+0x4>
    39de:	bf00      	nop
    39e0:	20000760 	.word	0x20000760

000039e4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    39e4:	4802      	ldr	r0, [pc, #8]	; (39f0 <z_bss_zero+0xc>)
    39e6:	4a03      	ldr	r2, [pc, #12]	; (39f4 <z_bss_zero+0x10>)
    39e8:	2100      	movs	r1, #0
    39ea:	1a12      	subs	r2, r2, r0
    39ec:	f002 b880 	b.w	5af0 <memset>
    39f0:	20000168 	.word	0x20000168
    39f4:	20000bc4 	.word	0x20000bc4

000039f8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    39f8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    39fa:	4806      	ldr	r0, [pc, #24]	; (3a14 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    39fc:	4a06      	ldr	r2, [pc, #24]	; (3a18 <z_data_copy+0x20>)
    39fe:	4907      	ldr	r1, [pc, #28]	; (3a1c <z_data_copy+0x24>)
    3a00:	1a12      	subs	r2, r2, r0
    3a02:	f002 f84a 	bl	5a9a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3a0a:	4a05      	ldr	r2, [pc, #20]	; (3a20 <z_data_copy+0x28>)
    3a0c:	4905      	ldr	r1, [pc, #20]	; (3a24 <z_data_copy+0x2c>)
    3a0e:	4806      	ldr	r0, [pc, #24]	; (3a28 <z_data_copy+0x30>)
    3a10:	f002 b843 	b.w	5a9a <memcpy>
    3a14:	20000000 	.word	0x20000000
    3a18:	20000164 	.word	0x20000164
    3a1c:	00007710 	.word	0x00007710
    3a20:	00000000 	.word	0x00000000
    3a24:	00007710 	.word	0x00007710
    3a28:	20000000 	.word	0x20000000

00003a2c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3a2c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    3a2e:	4b09      	ldr	r3, [pc, #36]	; (3a54 <bg_thread_main+0x28>)
    3a30:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3a32:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3a34:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3a36:	f7ff feed 	bl	3814 <z_sys_init_run_level>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3a3a:	2003      	movs	r0, #3
    3a3c:	f7ff feea 	bl	3814 <z_sys_init_run_level>

	z_init_static_threads();
    3a40:	f001 fa12 	bl	4e68 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    3a44:	f002 f87c 	bl	5b40 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3a48:	4a03      	ldr	r2, [pc, #12]	; (3a58 <bg_thread_main+0x2c>)
    3a4a:	7b13      	ldrb	r3, [r2, #12]
    3a4c:	f023 0301 	bic.w	r3, r3, #1
    3a50:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3a52:	bd08      	pop	{r3, pc}
    3a54:	20000bc3 	.word	0x20000bc3
    3a58:	20000528 	.word	0x20000528

00003a5c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    3a5c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3a60:	4b38      	ldr	r3, [pc, #224]	; (3b44 <z_cstart+0xe8>)
    3a62:	b0b1      	sub	sp, #196	; 0xc4
    3a64:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3a68:	4d37      	ldr	r5, [pc, #220]	; (3b48 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    3a6a:	4e38      	ldr	r6, [pc, #224]	; (3b4c <z_cstart+0xf0>)
    3a6c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3a6e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 3b6c <z_cstart+0x110>
	z_setup_new_thread(thread, stack,
    3a72:	4f37      	ldr	r7, [pc, #220]	; (3b50 <z_cstart+0xf4>)
    3a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a78:	2400      	movs	r4, #0
    3a7a:	616b      	str	r3, [r5, #20]
    3a7c:	23e0      	movs	r3, #224	; 0xe0
    3a7e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3a82:	77ec      	strb	r4, [r5, #31]
    3a84:	762c      	strb	r4, [r5, #24]
    3a86:	766c      	strb	r4, [r5, #25]
    3a88:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3a8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3a8c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3a90:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3a92:	f7fe fcb1 	bl	23f8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3a96:	f7fe fa47 	bl	1f28 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3a9a:	f04f 33ff 	mov.w	r3, #4294967295
    3a9e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3aa0:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3aa2:	4d2c      	ldr	r5, [pc, #176]	; (3b54 <z_cstart+0xf8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    3aa4:	f240 1301 	movw	r3, #257	; 0x101
    3aa8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
    3aac:	ab08      	add	r3, sp, #32
    3aae:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3ab0:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    3ab2:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
    3ab6:	f7ff fead 	bl	3814 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3aba:	2001      	movs	r0, #1
    3abc:	f7ff feaa 	bl	3814 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3ac0:	f04f 0a01 	mov.w	sl, #1
	z_sched_init();
    3ac4:	f000 ff04 	bl	48d0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3ac8:	4b23      	ldr	r3, [pc, #140]	; (3b58 <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
    3aca:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3acc:	4923      	ldr	r1, [pc, #140]	; (3b5c <z_cstart+0x100>)
    3ace:	9305      	str	r3, [sp, #20]
    3ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3ad4:	464b      	mov	r3, r9
    3ad6:	e9cd 4a03 	strd	r4, sl, [sp, #12]
    3ada:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3ade:	9400      	str	r4, [sp, #0]
    3ae0:	4630      	mov	r0, r6
    3ae2:	f001 f94f 	bl	4d84 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3ae6:	7b73      	ldrb	r3, [r6, #13]
    3ae8:	4680      	mov	r8, r0
    3aea:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    3aee:	4630      	mov	r0, r6
	snprintk(tname, 8, "idle %02d", i);
    3af0:	f10d 0b18 	add.w	fp, sp, #24
    3af4:	7373      	strb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    3af6:	f000 faa1 	bl	403c <z_ready_thread>
	snprintk(tname, 8, "idle %02d", i);
    3afa:	4a19      	ldr	r2, [pc, #100]	; (3b60 <z_cstart+0x104>)
    3afc:	4623      	mov	r3, r4
    3afe:	2108      	movs	r1, #8
    3b00:	4658      	mov	r0, fp
    3b02:	f001 fdfb 	bl	56fc <snprintk>
	z_setup_new_thread(thread, stack,
    3b06:	230f      	movs	r3, #15
    3b08:	e9cd 4302 	strd	r4, r3, [sp, #8]
    3b0c:	4915      	ldr	r1, [pc, #84]	; (3b64 <z_cstart+0x108>)
    3b0e:	4b16      	ldr	r3, [pc, #88]	; (3b68 <z_cstart+0x10c>)
    3b10:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3b14:	e9cd ab04 	strd	sl, fp, [sp, #16]
    3b18:	e9cd 4400 	strd	r4, r4, [sp]
    3b1c:	4638      	mov	r0, r7
    3b1e:	f001 f931 	bl	4d84 <z_setup_new_thread>
    3b22:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3b24:	60ef      	str	r7, [r5, #12]
    3b26:	f023 0304 	bic.w	r3, r3, #4
    3b2a:	737b      	strb	r3, [r7, #13]
		_kernel.cpus[i].irq_stack =
    3b2c:	4b05      	ldr	r3, [pc, #20]	; (3b44 <z_cstart+0xe8>)
    3b2e:	606b      	str	r3, [r5, #4]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3b30:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    3b34:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    3b38:	752c      	strb	r4, [r5, #20]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3b3a:	464a      	mov	r2, r9
    3b3c:	4641      	mov	r1, r8
    3b3e:	4630      	mov	r0, r6
    3b40:	f7fe f94c 	bl	1ddc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3b44:	20003220 	.word	0x20003220
    3b48:	e000ed00 	.word	0xe000ed00
    3b4c:	20000528 	.word	0x20000528
    3b50:	20000488 	.word	0x20000488
    3b54:	20000760 	.word	0x20000760
    3b58:	00007377 	.word	0x00007377
    3b5c:	20002080 	.word	0x20002080
    3b60:	0000737c 	.word	0x0000737c
    3b64:	200028a0 	.word	0x200028a0
    3b68:	000039b1 	.word	0x000039b1
    3b6c:	00003a2d 	.word	0x00003a2d

00003b70 <pended_on.isra.0>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
    3b70:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
    3b72:	b510      	push	{r4, lr}
    3b74:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    3b76:	b95b      	cbnz	r3, 3b90 <pended_on.isra.0+0x20>
    3b78:	4906      	ldr	r1, [pc, #24]	; (3b94 <pended_on.isra.0+0x24>)
    3b7a:	4807      	ldr	r0, [pc, #28]	; (3b98 <pended_on.isra.0+0x28>)
    3b7c:	4a07      	ldr	r2, [pc, #28]	; (3b9c <pended_on.isra.0+0x2c>)
    3b7e:	f240 13ed 	movw	r3, #493	; 0x1ed
    3b82:	f001 fdae 	bl	56e2 <printk>
    3b86:	4805      	ldr	r0, [pc, #20]	; (3b9c <pended_on.isra.0+0x2c>)
    3b88:	f240 11ed 	movw	r1, #493	; 0x1ed
    3b8c:	f001 feb4 	bl	58f8 <assert_post_action>

	return thread->base.pended_on;
}
    3b90:	6820      	ldr	r0, [r4, #0]
    3b92:	bd10      	pop	{r4, pc}
    3b94:	000073ab 	.word	0x000073ab
    3b98:	00005fa5 	.word	0x00005fa5
    3b9c:	00007389 	.word	0x00007389

00003ba0 <z_reset_time_slice>:
{
    3ba0:	b510      	push	{r4, lr}
	if (slice_time != 0) {
    3ba2:	4c08      	ldr	r4, [pc, #32]	; (3bc4 <z_reset_time_slice+0x24>)
    3ba4:	6823      	ldr	r3, [r4, #0]
    3ba6:	b15b      	cbz	r3, 3bc0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    3ba8:	f7fd ffa2 	bl	1af0 <z_clock_elapsed>
    3bac:	4603      	mov	r3, r0
    3bae:	6820      	ldr	r0, [r4, #0]
    3bb0:	4a05      	ldr	r2, [pc, #20]	; (3bc8 <z_reset_time_slice+0x28>)
    3bb2:	4403      	add	r3, r0
}
    3bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    3bb8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    3bba:	2100      	movs	r1, #0
    3bbc:	f001 bbc0 	b.w	5340 <z_set_timeout_expiry>
}
    3bc0:	bd10      	pop	{r4, pc}
    3bc2:	bf00      	nop
    3bc4:	2000079c 	.word	0x2000079c
    3bc8:	20000760 	.word	0x20000760

00003bcc <k_sched_time_slice_set>:
{
    3bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bce:	4605      	mov	r5, r0
    3bd0:	460c      	mov	r4, r1
    3bd2:	f04f 0320 	mov.w	r3, #32
    3bd6:	f3ef 8611 	mrs	r6, BASEPRI
    3bda:	f383 8811 	msr	BASEPRI, r3
    3bde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3be2:	4820      	ldr	r0, [pc, #128]	; (3c64 <k_sched_time_slice_set+0x98>)
    3be4:	f001 f9d0 	bl	4f88 <z_spin_lock_valid>
    3be8:	b968      	cbnz	r0, 3c06 <k_sched_time_slice_set+0x3a>
    3bea:	4a1f      	ldr	r2, [pc, #124]	; (3c68 <k_sched_time_slice_set+0x9c>)
    3bec:	491f      	ldr	r1, [pc, #124]	; (3c6c <k_sched_time_slice_set+0xa0>)
    3bee:	4820      	ldr	r0, [pc, #128]	; (3c70 <k_sched_time_slice_set+0xa4>)
    3bf0:	235c      	movs	r3, #92	; 0x5c
    3bf2:	f001 fd76 	bl	56e2 <printk>
    3bf6:	491b      	ldr	r1, [pc, #108]	; (3c64 <k_sched_time_slice_set+0x98>)
    3bf8:	481e      	ldr	r0, [pc, #120]	; (3c74 <k_sched_time_slice_set+0xa8>)
    3bfa:	f001 fd72 	bl	56e2 <printk>
    3bfe:	481a      	ldr	r0, [pc, #104]	; (3c68 <k_sched_time_slice_set+0x9c>)
    3c00:	215c      	movs	r1, #92	; 0x5c
    3c02:	f001 fe79 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    3c06:	4817      	ldr	r0, [pc, #92]	; (3c64 <k_sched_time_slice_set+0x98>)
    3c08:	f001 f9dc 	bl	4fc4 <z_spin_lock_set_owner>
		_current_cpu->slice_ticks = 0;
    3c0c:	4b1a      	ldr	r3, [pc, #104]	; (3c78 <k_sched_time_slice_set+0xac>)
    3c0e:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3c10:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    3c14:	f240 30e7 	movw	r0, #999	; 0x3e7
    3c18:	2100      	movs	r1, #0
    3c1a:	611a      	str	r2, [r3, #16]
    3c1c:	fbe7 0105 	umlal	r0, r1, r7, r5
    3c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3c24:	2300      	movs	r3, #0
    3c26:	f7fc fa59 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    3c2a:	4b14      	ldr	r3, [pc, #80]	; (3c7c <k_sched_time_slice_set+0xb0>)
    3c2c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    3c2e:	4b14      	ldr	r3, [pc, #80]	; (3c80 <k_sched_time_slice_set+0xb4>)
    3c30:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    3c32:	f7ff ffb5 	bl	3ba0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3c36:	480b      	ldr	r0, [pc, #44]	; (3c64 <k_sched_time_slice_set+0x98>)
    3c38:	f001 f9b4 	bl	4fa4 <z_spin_unlock_valid>
    3c3c:	b968      	cbnz	r0, 3c5a <k_sched_time_slice_set+0x8e>
    3c3e:	4a0a      	ldr	r2, [pc, #40]	; (3c68 <k_sched_time_slice_set+0x9c>)
    3c40:	4910      	ldr	r1, [pc, #64]	; (3c84 <k_sched_time_slice_set+0xb8>)
    3c42:	480b      	ldr	r0, [pc, #44]	; (3c70 <k_sched_time_slice_set+0xa4>)
    3c44:	2384      	movs	r3, #132	; 0x84
    3c46:	f001 fd4c 	bl	56e2 <printk>
    3c4a:	4906      	ldr	r1, [pc, #24]	; (3c64 <k_sched_time_slice_set+0x98>)
    3c4c:	480e      	ldr	r0, [pc, #56]	; (3c88 <k_sched_time_slice_set+0xbc>)
    3c4e:	f001 fd48 	bl	56e2 <printk>
    3c52:	4805      	ldr	r0, [pc, #20]	; (3c68 <k_sched_time_slice_set+0x9c>)
    3c54:	2184      	movs	r1, #132	; 0x84
    3c56:	f001 fe4f 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    3c5a:	f386 8811 	msr	BASEPRI, r6
    3c5e:	f3bf 8f6f 	isb	sy
}
    3c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c64:	20000794 	.word	0x20000794
    3c68:	00006562 	.word	0x00006562
    3c6c:	000065ad 	.word	0x000065ad
    3c70:	00005fa5 	.word	0x00005fa5
    3c74:	000065c2 	.word	0x000065c2
    3c78:	20000760 	.word	0x20000760
    3c7c:	2000079c 	.word	0x2000079c
    3c80:	20000798 	.word	0x20000798
    3c84:	00006581 	.word	0x00006581
    3c88:	00006598 	.word	0x00006598

00003c8c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    3c8c:	b538      	push	{r3, r4, r5, lr}
    3c8e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3c90:	460d      	mov	r5, r1
    3c92:	b9e9      	cbnz	r1, 3cd0 <z_reschedule+0x44>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3c94:	f3ef 8305 	mrs	r3, IPSR
    3c98:	b9d3      	cbnz	r3, 3cd0 <z_reschedule+0x44>
	return _kernel.ready_q.cache;
    3c9a:	4b19      	ldr	r3, [pc, #100]	; (3d00 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    3c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3c9e:	689b      	ldr	r3, [r3, #8]
    3ca0:	429a      	cmp	r2, r3
    3ca2:	d015      	beq.n	3cd0 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3ca4:	f001 f97e 	bl	4fa4 <z_spin_unlock_valid>
    3ca8:	b968      	cbnz	r0, 3cc6 <z_reschedule+0x3a>
    3caa:	4a16      	ldr	r2, [pc, #88]	; (3d04 <z_reschedule+0x78>)
    3cac:	4916      	ldr	r1, [pc, #88]	; (3d08 <z_reschedule+0x7c>)
    3cae:	4817      	ldr	r0, [pc, #92]	; (3d0c <z_reschedule+0x80>)
    3cb0:	239b      	movs	r3, #155	; 0x9b
    3cb2:	f001 fd16 	bl	56e2 <printk>
    3cb6:	4816      	ldr	r0, [pc, #88]	; (3d10 <z_reschedule+0x84>)
    3cb8:	4621      	mov	r1, r4
    3cba:	f001 fd12 	bl	56e2 <printk>
    3cbe:	4811      	ldr	r0, [pc, #68]	; (3d04 <z_reschedule+0x78>)
    3cc0:	219b      	movs	r1, #155	; 0x9b
    3cc2:	f001 fe19 	bl	58f8 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    3cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    3cca:	2000      	movs	r0, #0
    3ccc:	f7fd bfe2 	b.w	1c94 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3cd0:	4620      	mov	r0, r4
    3cd2:	f001 f967 	bl	4fa4 <z_spin_unlock_valid>
    3cd6:	b968      	cbnz	r0, 3cf4 <z_reschedule+0x68>
    3cd8:	4a0a      	ldr	r2, [pc, #40]	; (3d04 <z_reschedule+0x78>)
    3cda:	490b      	ldr	r1, [pc, #44]	; (3d08 <z_reschedule+0x7c>)
    3cdc:	480b      	ldr	r0, [pc, #44]	; (3d0c <z_reschedule+0x80>)
    3cde:	2384      	movs	r3, #132	; 0x84
    3ce0:	f001 fcff 	bl	56e2 <printk>
    3ce4:	480a      	ldr	r0, [pc, #40]	; (3d10 <z_reschedule+0x84>)
    3ce6:	4621      	mov	r1, r4
    3ce8:	f001 fcfb 	bl	56e2 <printk>
    3cec:	4805      	ldr	r0, [pc, #20]	; (3d04 <z_reschedule+0x78>)
    3cee:	2184      	movs	r1, #132	; 0x84
    3cf0:	f001 fe02 	bl	58f8 <assert_post_action>
    3cf4:	f385 8811 	msr	BASEPRI, r5
    3cf8:	f3bf 8f6f 	isb	sy
    3cfc:	bd38      	pop	{r3, r4, r5, pc}
    3cfe:	bf00      	nop
    3d00:	20000760 	.word	0x20000760
    3d04:	00006562 	.word	0x00006562
    3d08:	00006581 	.word	0x00006581
    3d0c:	00005fa5 	.word	0x00005fa5
    3d10:	00006598 	.word	0x00006598

00003d14 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    3d14:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3d16:	f04f 0320 	mov.w	r3, #32
    3d1a:	f3ef 8511 	mrs	r5, BASEPRI
    3d1e:	f383 8811 	msr	BASEPRI, r3
    3d22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3d26:	482b      	ldr	r0, [pc, #172]	; (3dd4 <k_sched_lock+0xc0>)
    3d28:	f001 f92e 	bl	4f88 <z_spin_lock_valid>
    3d2c:	b968      	cbnz	r0, 3d4a <k_sched_lock+0x36>
    3d2e:	4a2a      	ldr	r2, [pc, #168]	; (3dd8 <k_sched_lock+0xc4>)
    3d30:	492a      	ldr	r1, [pc, #168]	; (3ddc <k_sched_lock+0xc8>)
    3d32:	482b      	ldr	r0, [pc, #172]	; (3de0 <k_sched_lock+0xcc>)
    3d34:	235c      	movs	r3, #92	; 0x5c
    3d36:	f001 fcd4 	bl	56e2 <printk>
    3d3a:	4926      	ldr	r1, [pc, #152]	; (3dd4 <k_sched_lock+0xc0>)
    3d3c:	4829      	ldr	r0, [pc, #164]	; (3de4 <k_sched_lock+0xd0>)
    3d3e:	f001 fcd0 	bl	56e2 <printk>
    3d42:	4825      	ldr	r0, [pc, #148]	; (3dd8 <k_sched_lock+0xc4>)
    3d44:	215c      	movs	r1, #92	; 0x5c
    3d46:	f001 fdd7 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    3d4a:	4822      	ldr	r0, [pc, #136]	; (3dd4 <k_sched_lock+0xc0>)
    3d4c:	f001 f93a 	bl	4fc4 <z_spin_lock_set_owner>
    3d50:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
    3d54:	b173      	cbz	r3, 3d74 <k_sched_lock+0x60>
    3d56:	4924      	ldr	r1, [pc, #144]	; (3de8 <k_sched_lock+0xd4>)
    3d58:	4a24      	ldr	r2, [pc, #144]	; (3dec <k_sched_lock+0xd8>)
    3d5a:	4821      	ldr	r0, [pc, #132]	; (3de0 <k_sched_lock+0xcc>)
    3d5c:	f44f 7386 	mov.w	r3, #268	; 0x10c
    3d60:	f001 fcbf 	bl	56e2 <printk>
    3d64:	4822      	ldr	r0, [pc, #136]	; (3df0 <k_sched_lock+0xdc>)
    3d66:	f001 fcbc 	bl	56e2 <printk>
    3d6a:	4820      	ldr	r0, [pc, #128]	; (3dec <k_sched_lock+0xd8>)
    3d6c:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3d70:	f001 fdc2 	bl	58f8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
    3d74:	4c1f      	ldr	r4, [pc, #124]	; (3df4 <k_sched_lock+0xe0>)
    3d76:	68a2      	ldr	r2, [r4, #8]
    3d78:	7bd2      	ldrb	r2, [r2, #15]
    3d7a:	2a01      	cmp	r2, #1
    3d7c:	d10e      	bne.n	3d9c <k_sched_lock+0x88>
    3d7e:	491e      	ldr	r1, [pc, #120]	; (3df8 <k_sched_lock+0xe4>)
    3d80:	4a1a      	ldr	r2, [pc, #104]	; (3dec <k_sched_lock+0xd8>)
    3d82:	4817      	ldr	r0, [pc, #92]	; (3de0 <k_sched_lock+0xcc>)
    3d84:	f240 130d 	movw	r3, #269	; 0x10d
    3d88:	f001 fcab 	bl	56e2 <printk>
    3d8c:	4818      	ldr	r0, [pc, #96]	; (3df0 <k_sched_lock+0xdc>)
    3d8e:	f001 fca8 	bl	56e2 <printk>
    3d92:	4816      	ldr	r0, [pc, #88]	; (3dec <k_sched_lock+0xd8>)
    3d94:	f240 110d 	movw	r1, #269	; 0x10d
    3d98:	f001 fdae 	bl	58f8 <assert_post_action>

	--_current->base.sched_locked;
    3d9c:	68a2      	ldr	r2, [r4, #8]
    3d9e:	7bd3      	ldrb	r3, [r2, #15]
    3da0:	3b01      	subs	r3, #1
    3da2:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3da4:	480b      	ldr	r0, [pc, #44]	; (3dd4 <k_sched_lock+0xc0>)
    3da6:	f001 f8fd 	bl	4fa4 <z_spin_unlock_valid>
    3daa:	b968      	cbnz	r0, 3dc8 <k_sched_lock+0xb4>
    3dac:	4a0a      	ldr	r2, [pc, #40]	; (3dd8 <k_sched_lock+0xc4>)
    3dae:	4913      	ldr	r1, [pc, #76]	; (3dfc <k_sched_lock+0xe8>)
    3db0:	480b      	ldr	r0, [pc, #44]	; (3de0 <k_sched_lock+0xcc>)
    3db2:	2384      	movs	r3, #132	; 0x84
    3db4:	f001 fc95 	bl	56e2 <printk>
    3db8:	4906      	ldr	r1, [pc, #24]	; (3dd4 <k_sched_lock+0xc0>)
    3dba:	4811      	ldr	r0, [pc, #68]	; (3e00 <k_sched_lock+0xec>)
    3dbc:	f001 fc91 	bl	56e2 <printk>
    3dc0:	4805      	ldr	r0, [pc, #20]	; (3dd8 <k_sched_lock+0xc4>)
    3dc2:	2184      	movs	r1, #132	; 0x84
    3dc4:	f001 fd98 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    3dc8:	f385 8811 	msr	BASEPRI, r5
    3dcc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    3dd0:	bd38      	pop	{r3, r4, r5, pc}
    3dd2:	bf00      	nop
    3dd4:	20000794 	.word	0x20000794
    3dd8:	00006562 	.word	0x00006562
    3ddc:	000065ad 	.word	0x000065ad
    3de0:	00005fa5 	.word	0x00005fa5
    3de4:	000065c2 	.word	0x000065c2
    3de8:	000073e6 	.word	0x000073e6
    3dec:	000073c2 	.word	0x000073c2
    3df0:	000073f8 	.word	0x000073f8
    3df4:	20000760 	.word	0x20000760
    3df8:	000073fb 	.word	0x000073fb
    3dfc:	00006581 	.word	0x00006581
    3e00:	00006598 	.word	0x00006598

00003e04 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    3e04:	4b11      	ldr	r3, [pc, #68]	; (3e4c <z_priq_dumb_remove+0x48>)
    3e06:	f103 0228 	add.w	r2, r3, #40	; 0x28
    3e0a:	4282      	cmp	r2, r0
{
    3e0c:	b510      	push	{r4, lr}
    3e0e:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    3e10:	d105      	bne.n	3e1e <z_priq_dumb_remove+0x1a>
    3e12:	689b      	ldr	r3, [r3, #8]
    3e14:	428b      	cmp	r3, r1
    3e16:	d102      	bne.n	3e1e <z_priq_dumb_remove+0x1a>
    3e18:	7b4b      	ldrb	r3, [r1, #13]
    3e1a:	06db      	lsls	r3, r3, #27
    3e1c:	d115      	bne.n	3e4a <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3e1e:	4b0c      	ldr	r3, [pc, #48]	; (3e50 <z_priq_dumb_remove+0x4c>)
    3e20:	429c      	cmp	r4, r3
    3e22:	d10b      	bne.n	3e3c <z_priq_dumb_remove+0x38>
    3e24:	490b      	ldr	r1, [pc, #44]	; (3e54 <z_priq_dumb_remove+0x50>)
    3e26:	480c      	ldr	r0, [pc, #48]	; (3e58 <z_priq_dumb_remove+0x54>)
    3e28:	4a0c      	ldr	r2, [pc, #48]	; (3e5c <z_priq_dumb_remove+0x58>)
    3e2a:	f240 339f 	movw	r3, #927	; 0x39f
    3e2e:	f001 fc58 	bl	56e2 <printk>
    3e32:	480a      	ldr	r0, [pc, #40]	; (3e5c <z_priq_dumb_remove+0x58>)
    3e34:	f240 319f 	movw	r1, #927	; 0x39f
    3e38:	f001 fd5e 	bl	58f8 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    3e3c:	e9d4 3200 	ldrd	r3, r2, [r4]
    3e40:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    3e42:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3e44:	2300      	movs	r3, #0
	node->prev = NULL;
    3e46:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    3e4a:	bd10      	pop	{r4, pc}
    3e4c:	20000760 	.word	0x20000760
    3e50:	20000488 	.word	0x20000488
    3e54:	0000742b 	.word	0x0000742b
    3e58:	00005fa5 	.word	0x00005fa5
    3e5c:	00007389 	.word	0x00007389

00003e60 <update_cache>:
{
    3e60:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    3e62:	4c10      	ldr	r4, [pc, #64]	; (3ea4 <update_cache+0x44>)
{
    3e64:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    3e66:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3e6a:	f001 fee0 	bl	5c2e <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    3e6e:	68a3      	ldr	r3, [r4, #8]
    3e70:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    3e72:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    3e74:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    3e76:	bf44      	itt	mi
    3e78:	f041 0108 	orrmi.w	r1, r1, #8
    3e7c:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    3e7e:	b905      	cbnz	r5, 3e82 <update_cache+0x22>
    3e80:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    3e82:	b94e      	cbnz	r6, 3e98 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    3e84:	7b5a      	ldrb	r2, [r3, #13]
    3e86:	06d2      	lsls	r2, r2, #27
    3e88:	d106      	bne.n	3e98 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3e8a:	69aa      	ldr	r2, [r5, #24]
    3e8c:	b922      	cbnz	r2, 3e98 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    3e8e:	89da      	ldrh	r2, [r3, #14]
    3e90:	2a7f      	cmp	r2, #127	; 0x7f
    3e92:	d901      	bls.n	3e98 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    3e94:	6263      	str	r3, [r4, #36]	; 0x24
}
    3e96:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    3e98:	42ab      	cmp	r3, r5
    3e9a:	d001      	beq.n	3ea0 <update_cache+0x40>
			z_reset_time_slice();
    3e9c:	f7ff fe80 	bl	3ba0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3ea0:	6265      	str	r5, [r4, #36]	; 0x24
}
    3ea2:	e7f8      	b.n	3e96 <update_cache+0x36>
    3ea4:	20000760 	.word	0x20000760

00003ea8 <k_sched_unlock>:
{
    3ea8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3eaa:	f04f 0320 	mov.w	r3, #32
    3eae:	f3ef 8511 	mrs	r5, BASEPRI
    3eb2:	f383 8811 	msr	BASEPRI, r3
    3eb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3eba:	482d      	ldr	r0, [pc, #180]	; (3f70 <k_sched_unlock+0xc8>)
    3ebc:	f001 f864 	bl	4f88 <z_spin_lock_valid>
    3ec0:	b968      	cbnz	r0, 3ede <k_sched_unlock+0x36>
    3ec2:	4a2c      	ldr	r2, [pc, #176]	; (3f74 <k_sched_unlock+0xcc>)
    3ec4:	492c      	ldr	r1, [pc, #176]	; (3f78 <k_sched_unlock+0xd0>)
    3ec6:	482d      	ldr	r0, [pc, #180]	; (3f7c <k_sched_unlock+0xd4>)
    3ec8:	235c      	movs	r3, #92	; 0x5c
    3eca:	f001 fc0a 	bl	56e2 <printk>
    3ece:	4928      	ldr	r1, [pc, #160]	; (3f70 <k_sched_unlock+0xc8>)
    3ed0:	482b      	ldr	r0, [pc, #172]	; (3f80 <k_sched_unlock+0xd8>)
    3ed2:	f001 fc06 	bl	56e2 <printk>
    3ed6:	4827      	ldr	r0, [pc, #156]	; (3f74 <k_sched_unlock+0xcc>)
    3ed8:	215c      	movs	r1, #92	; 0x5c
    3eda:	f001 fd0d 	bl	58f8 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
    3ede:	4c29      	ldr	r4, [pc, #164]	; (3f84 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    3ee0:	4823      	ldr	r0, [pc, #140]	; (3f70 <k_sched_unlock+0xc8>)
    3ee2:	f001 f86f 	bl	4fc4 <z_spin_lock_set_owner>
    3ee6:	68a2      	ldr	r2, [r4, #8]
    3ee8:	7bd2      	ldrb	r2, [r2, #15]
    3eea:	b972      	cbnz	r2, 3f0a <k_sched_unlock+0x62>
    3eec:	4926      	ldr	r1, [pc, #152]	; (3f88 <k_sched_unlock+0xe0>)
    3eee:	4a27      	ldr	r2, [pc, #156]	; (3f8c <k_sched_unlock+0xe4>)
    3ef0:	4822      	ldr	r0, [pc, #136]	; (3f7c <k_sched_unlock+0xd4>)
    3ef2:	f240 333a 	movw	r3, #826	; 0x33a
    3ef6:	f001 fbf4 	bl	56e2 <printk>
    3efa:	4825      	ldr	r0, [pc, #148]	; (3f90 <k_sched_unlock+0xe8>)
    3efc:	f001 fbf1 	bl	56e2 <printk>
    3f00:	4822      	ldr	r0, [pc, #136]	; (3f8c <k_sched_unlock+0xe4>)
    3f02:	f240 313a 	movw	r1, #826	; 0x33a
    3f06:	f001 fcf7 	bl	58f8 <assert_post_action>
    3f0a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    3f0e:	b173      	cbz	r3, 3f2e <k_sched_unlock+0x86>
    3f10:	4920      	ldr	r1, [pc, #128]	; (3f94 <k_sched_unlock+0xec>)
    3f12:	4a1e      	ldr	r2, [pc, #120]	; (3f8c <k_sched_unlock+0xe4>)
    3f14:	4819      	ldr	r0, [pc, #100]	; (3f7c <k_sched_unlock+0xd4>)
    3f16:	f240 333b 	movw	r3, #827	; 0x33b
    3f1a:	f001 fbe2 	bl	56e2 <printk>
    3f1e:	481c      	ldr	r0, [pc, #112]	; (3f90 <k_sched_unlock+0xe8>)
    3f20:	f001 fbdf 	bl	56e2 <printk>
    3f24:	4819      	ldr	r0, [pc, #100]	; (3f8c <k_sched_unlock+0xe4>)
    3f26:	f240 313b 	movw	r1, #827	; 0x33b
    3f2a:	f001 fce5 	bl	58f8 <assert_post_action>
		++_current->base.sched_locked;
    3f2e:	68a2      	ldr	r2, [r4, #8]
    3f30:	7bd3      	ldrb	r3, [r2, #15]
    3f32:	3301      	adds	r3, #1
		update_cache(0);
    3f34:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    3f36:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3f38:	f7ff ff92 	bl	3e60 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3f3c:	480c      	ldr	r0, [pc, #48]	; (3f70 <k_sched_unlock+0xc8>)
    3f3e:	f001 f831 	bl	4fa4 <z_spin_unlock_valid>
    3f42:	b968      	cbnz	r0, 3f60 <k_sched_unlock+0xb8>
    3f44:	4a0b      	ldr	r2, [pc, #44]	; (3f74 <k_sched_unlock+0xcc>)
    3f46:	4914      	ldr	r1, [pc, #80]	; (3f98 <k_sched_unlock+0xf0>)
    3f48:	480c      	ldr	r0, [pc, #48]	; (3f7c <k_sched_unlock+0xd4>)
    3f4a:	2384      	movs	r3, #132	; 0x84
    3f4c:	f001 fbc9 	bl	56e2 <printk>
    3f50:	4907      	ldr	r1, [pc, #28]	; (3f70 <k_sched_unlock+0xc8>)
    3f52:	4812      	ldr	r0, [pc, #72]	; (3f9c <k_sched_unlock+0xf4>)
    3f54:	f001 fbc5 	bl	56e2 <printk>
    3f58:	4806      	ldr	r0, [pc, #24]	; (3f74 <k_sched_unlock+0xcc>)
    3f5a:	2184      	movs	r1, #132	; 0x84
    3f5c:	f001 fccc 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    3f60:	f385 8811 	msr	BASEPRI, r5
    3f64:	f3bf 8f6f 	isb	sy
}
    3f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    3f6c:	f001 be46 	b.w	5bfc <z_reschedule_unlocked>
    3f70:	20000794 	.word	0x20000794
    3f74:	00006562 	.word	0x00006562
    3f78:	000065ad 	.word	0x000065ad
    3f7c:	00005fa5 	.word	0x00005fa5
    3f80:	000065c2 	.word	0x000065c2
    3f84:	20000760 	.word	0x20000760
    3f88:	0000744c 	.word	0x0000744c
    3f8c:	00007389 	.word	0x00007389
    3f90:	000073f8 	.word	0x000073f8
    3f94:	000073e6 	.word	0x000073e6
    3f98:	00006581 	.word	0x00006581
    3f9c:	00006598 	.word	0x00006598

00003fa0 <ready_thread>:
{
    3fa0:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3fa2:	7b43      	ldrb	r3, [r0, #13]
    3fa4:	06db      	lsls	r3, r3, #27
    3fa6:	4604      	mov	r4, r0
    3fa8:	d13d      	bne.n	4026 <ready_thread+0x86>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    3faa:	6985      	ldr	r5, [r0, #24]
	if (z_is_thread_ready(thread)) {
    3fac:	2d00      	cmp	r5, #0
    3fae:	d13a      	bne.n	4026 <ready_thread+0x86>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3fb0:	4b1d      	ldr	r3, [pc, #116]	; (4028 <ready_thread+0x88>)
    3fb2:	4298      	cmp	r0, r3
    3fb4:	d10b      	bne.n	3fce <ready_thread+0x2e>
    3fb6:	491d      	ldr	r1, [pc, #116]	; (402c <ready_thread+0x8c>)
    3fb8:	481d      	ldr	r0, [pc, #116]	; (4030 <ready_thread+0x90>)
    3fba:	4a1e      	ldr	r2, [pc, #120]	; (4034 <ready_thread+0x94>)
    3fbc:	f240 3389 	movw	r3, #905	; 0x389
    3fc0:	f001 fb8f 	bl	56e2 <printk>
    3fc4:	481b      	ldr	r0, [pc, #108]	; (4034 <ready_thread+0x94>)
    3fc6:	f240 3189 	movw	r1, #905	; 0x389
    3fca:	f001 fc95 	bl	58f8 <assert_post_action>
	return list->head == list;
    3fce:	4a1a      	ldr	r2, [pc, #104]	; (4038 <ready_thread+0x98>)
    3fd0:	4613      	mov	r3, r2
    3fd2:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3fd6:	4298      	cmp	r0, r3
    3fd8:	bf18      	it	ne
    3fda:	4605      	movne	r5, r0
    3fdc:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3fde:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    3fe0:	4619      	mov	r1, r3
    3fe2:	462b      	mov	r3, r5
    3fe4:	bf38      	it	cc
    3fe6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3fe8:	b1bb      	cbz	r3, 401a <ready_thread+0x7a>
	if (thread_1->base.prio < thread_2->base.prio) {
    3fea:	f994 600e 	ldrsb.w	r6, [r4, #14]
    3fee:	f993 500e 	ldrsb.w	r5, [r3, #14]
    3ff2:	42ae      	cmp	r6, r5
    3ff4:	db03      	blt.n	3ffe <ready_thread+0x5e>
	return (node == list->tail) ? NULL : node->next;
    3ff6:	4298      	cmp	r0, r3
    3ff8:	d00f      	beq.n	401a <ready_thread+0x7a>
    3ffa:	681b      	ldr	r3, [r3, #0]
    3ffc:	e7f4      	b.n	3fe8 <ready_thread+0x48>
	node->prev = successor->prev;
    3ffe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4000:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    4004:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4006:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    4008:	7b63      	ldrb	r3, [r4, #13]
    400a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    400e:	7363      	strb	r3, [r4, #13]
		update_cache(0);
    4010:	2000      	movs	r0, #0
}
    4012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    4016:	f7ff bf23 	b.w	3e60 <update_cache>
	node->prev = list->tail;
    401a:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    401e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4020:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4022:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    4024:	e7f0      	b.n	4008 <ready_thread+0x68>
}
    4026:	bd70      	pop	{r4, r5, r6, pc}
    4028:	20000488 	.word	0x20000488
    402c:	0000742b 	.word	0x0000742b
    4030:	00005fa5 	.word	0x00005fa5
    4034:	00007389 	.word	0x00007389
    4038:	20000760 	.word	0x20000760

0000403c <z_ready_thread>:
{
    403c:	b538      	push	{r3, r4, r5, lr}
    403e:	4604      	mov	r4, r0
	__asm__ volatile(
    4040:	f04f 0320 	mov.w	r3, #32
    4044:	f3ef 8511 	mrs	r5, BASEPRI
    4048:	f383 8811 	msr	BASEPRI, r3
    404c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4050:	4817      	ldr	r0, [pc, #92]	; (40b0 <z_ready_thread+0x74>)
    4052:	f000 ff99 	bl	4f88 <z_spin_lock_valid>
    4056:	b968      	cbnz	r0, 4074 <z_ready_thread+0x38>
    4058:	4a16      	ldr	r2, [pc, #88]	; (40b4 <z_ready_thread+0x78>)
    405a:	4917      	ldr	r1, [pc, #92]	; (40b8 <z_ready_thread+0x7c>)
    405c:	4817      	ldr	r0, [pc, #92]	; (40bc <z_ready_thread+0x80>)
    405e:	235c      	movs	r3, #92	; 0x5c
    4060:	f001 fb3f 	bl	56e2 <printk>
    4064:	4912      	ldr	r1, [pc, #72]	; (40b0 <z_ready_thread+0x74>)
    4066:	4816      	ldr	r0, [pc, #88]	; (40c0 <z_ready_thread+0x84>)
    4068:	f001 fb3b 	bl	56e2 <printk>
    406c:	4811      	ldr	r0, [pc, #68]	; (40b4 <z_ready_thread+0x78>)
    406e:	215c      	movs	r1, #92	; 0x5c
    4070:	f001 fc42 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    4074:	480e      	ldr	r0, [pc, #56]	; (40b0 <z_ready_thread+0x74>)
    4076:	f000 ffa5 	bl	4fc4 <z_spin_lock_set_owner>
		ready_thread(thread);
    407a:	4620      	mov	r0, r4
    407c:	f7ff ff90 	bl	3fa0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4080:	480b      	ldr	r0, [pc, #44]	; (40b0 <z_ready_thread+0x74>)
    4082:	f000 ff8f 	bl	4fa4 <z_spin_unlock_valid>
    4086:	b968      	cbnz	r0, 40a4 <z_ready_thread+0x68>
    4088:	4a0a      	ldr	r2, [pc, #40]	; (40b4 <z_ready_thread+0x78>)
    408a:	490e      	ldr	r1, [pc, #56]	; (40c4 <z_ready_thread+0x88>)
    408c:	480b      	ldr	r0, [pc, #44]	; (40bc <z_ready_thread+0x80>)
    408e:	2384      	movs	r3, #132	; 0x84
    4090:	f001 fb27 	bl	56e2 <printk>
    4094:	4906      	ldr	r1, [pc, #24]	; (40b0 <z_ready_thread+0x74>)
    4096:	480c      	ldr	r0, [pc, #48]	; (40c8 <z_ready_thread+0x8c>)
    4098:	f001 fb23 	bl	56e2 <printk>
    409c:	4805      	ldr	r0, [pc, #20]	; (40b4 <z_ready_thread+0x78>)
    409e:	2184      	movs	r1, #132	; 0x84
    40a0:	f001 fc2a 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    40a4:	f385 8811 	msr	BASEPRI, r5
    40a8:	f3bf 8f6f 	isb	sy
}
    40ac:	bd38      	pop	{r3, r4, r5, pc}
    40ae:	bf00      	nop
    40b0:	20000794 	.word	0x20000794
    40b4:	00006562 	.word	0x00006562
    40b8:	000065ad 	.word	0x000065ad
    40bc:	00005fa5 	.word	0x00005fa5
    40c0:	000065c2 	.word	0x000065c2
    40c4:	00006581 	.word	0x00006581
    40c8:	00006598 	.word	0x00006598

000040cc <z_sched_start>:
{
    40cc:	b538      	push	{r3, r4, r5, lr}
    40ce:	4604      	mov	r4, r0
	__asm__ volatile(
    40d0:	f04f 0320 	mov.w	r3, #32
    40d4:	f3ef 8511 	mrs	r5, BASEPRI
    40d8:	f383 8811 	msr	BASEPRI, r3
    40dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    40e0:	481d      	ldr	r0, [pc, #116]	; (4158 <z_sched_start+0x8c>)
    40e2:	f000 ff51 	bl	4f88 <z_spin_lock_valid>
    40e6:	b968      	cbnz	r0, 4104 <z_sched_start+0x38>
    40e8:	4a1c      	ldr	r2, [pc, #112]	; (415c <z_sched_start+0x90>)
    40ea:	491d      	ldr	r1, [pc, #116]	; (4160 <z_sched_start+0x94>)
    40ec:	481d      	ldr	r0, [pc, #116]	; (4164 <z_sched_start+0x98>)
    40ee:	235c      	movs	r3, #92	; 0x5c
    40f0:	f001 faf7 	bl	56e2 <printk>
    40f4:	4918      	ldr	r1, [pc, #96]	; (4158 <z_sched_start+0x8c>)
    40f6:	481c      	ldr	r0, [pc, #112]	; (4168 <z_sched_start+0x9c>)
    40f8:	f001 faf3 	bl	56e2 <printk>
    40fc:	4817      	ldr	r0, [pc, #92]	; (415c <z_sched_start+0x90>)
    40fe:	215c      	movs	r1, #92	; 0x5c
    4100:	f001 fbfa 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    4104:	4814      	ldr	r0, [pc, #80]	; (4158 <z_sched_start+0x8c>)
    4106:	f000 ff5d 	bl	4fc4 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    410a:	7b63      	ldrb	r3, [r4, #13]
    410c:	075a      	lsls	r2, r3, #29
    410e:	d416      	bmi.n	413e <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4110:	4811      	ldr	r0, [pc, #68]	; (4158 <z_sched_start+0x8c>)
    4112:	f000 ff47 	bl	4fa4 <z_spin_unlock_valid>
    4116:	b968      	cbnz	r0, 4134 <z_sched_start+0x68>
    4118:	4a10      	ldr	r2, [pc, #64]	; (415c <z_sched_start+0x90>)
    411a:	4914      	ldr	r1, [pc, #80]	; (416c <z_sched_start+0xa0>)
    411c:	4811      	ldr	r0, [pc, #68]	; (4164 <z_sched_start+0x98>)
    411e:	2384      	movs	r3, #132	; 0x84
    4120:	f001 fadf 	bl	56e2 <printk>
    4124:	490c      	ldr	r1, [pc, #48]	; (4158 <z_sched_start+0x8c>)
    4126:	4812      	ldr	r0, [pc, #72]	; (4170 <z_sched_start+0xa4>)
    4128:	f001 fadb 	bl	56e2 <printk>
    412c:	480b      	ldr	r0, [pc, #44]	; (415c <z_sched_start+0x90>)
    412e:	2184      	movs	r1, #132	; 0x84
    4130:	f001 fbe2 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    4134:	f385 8811 	msr	BASEPRI, r5
    4138:	f3bf 8f6f 	isb	sy
}
    413c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    413e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    4142:	4620      	mov	r0, r4
    4144:	7363      	strb	r3, [r4, #13]
    4146:	f7ff ff2b 	bl	3fa0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    414a:	4629      	mov	r1, r5
    414c:	4802      	ldr	r0, [pc, #8]	; (4158 <z_sched_start+0x8c>)
}
    414e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    4152:	f7ff bd9b 	b.w	3c8c <z_reschedule>
    4156:	bf00      	nop
    4158:	20000794 	.word	0x20000794
    415c:	00006562 	.word	0x00006562
    4160:	000065ad 	.word	0x000065ad
    4164:	00005fa5 	.word	0x00005fa5
    4168:	000065c2 	.word	0x000065c2
    416c:	00006581 	.word	0x00006581
    4170:	00006598 	.word	0x00006598

00004174 <z_thread_timeout>:
{
    4174:	b570      	push	{r4, r5, r6, lr}
    4176:	4604      	mov	r4, r0
	__asm__ volatile(
    4178:	f04f 0320 	mov.w	r3, #32
    417c:	f3ef 8611 	mrs	r6, BASEPRI
    4180:	f383 8811 	msr	BASEPRI, r3
    4184:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4188:	481e      	ldr	r0, [pc, #120]	; (4204 <z_thread_timeout+0x90>)
    418a:	f000 fefd 	bl	4f88 <z_spin_lock_valid>
    418e:	b968      	cbnz	r0, 41ac <z_thread_timeout+0x38>
    4190:	4a1d      	ldr	r2, [pc, #116]	; (4208 <z_thread_timeout+0x94>)
    4192:	491e      	ldr	r1, [pc, #120]	; (420c <z_thread_timeout+0x98>)
    4194:	481e      	ldr	r0, [pc, #120]	; (4210 <z_thread_timeout+0x9c>)
    4196:	235c      	movs	r3, #92	; 0x5c
    4198:	f001 faa3 	bl	56e2 <printk>
    419c:	4919      	ldr	r1, [pc, #100]	; (4204 <z_thread_timeout+0x90>)
    419e:	481d      	ldr	r0, [pc, #116]	; (4214 <z_thread_timeout+0xa0>)
    41a0:	f001 fa9f 	bl	56e2 <printk>
    41a4:	4818      	ldr	r0, [pc, #96]	; (4208 <z_thread_timeout+0x94>)
    41a6:	215c      	movs	r1, #92	; 0x5c
    41a8:	f001 fba6 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    41ac:	4815      	ldr	r0, [pc, #84]	; (4204 <z_thread_timeout+0x90>)
    41ae:	f000 ff09 	bl	4fc4 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
    41b2:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    41b6:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
    41ba:	b113      	cbz	r3, 41c2 <z_thread_timeout+0x4e>
			unpend_thread_no_timeout(thread);
    41bc:	4628      	mov	r0, r5
    41be:	f001 fd27 	bl	5c10 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    41c2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    41c6:	f023 0314 	bic.w	r3, r3, #20
		ready_thread(thread);
    41ca:	4628      	mov	r0, r5
    41cc:	f804 3c0b 	strb.w	r3, [r4, #-11]
    41d0:	f7ff fee6 	bl	3fa0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    41d4:	480b      	ldr	r0, [pc, #44]	; (4204 <z_thread_timeout+0x90>)
    41d6:	f000 fee5 	bl	4fa4 <z_spin_unlock_valid>
    41da:	b968      	cbnz	r0, 41f8 <z_thread_timeout+0x84>
    41dc:	4a0a      	ldr	r2, [pc, #40]	; (4208 <z_thread_timeout+0x94>)
    41de:	490e      	ldr	r1, [pc, #56]	; (4218 <z_thread_timeout+0xa4>)
    41e0:	480b      	ldr	r0, [pc, #44]	; (4210 <z_thread_timeout+0x9c>)
    41e2:	2384      	movs	r3, #132	; 0x84
    41e4:	f001 fa7d 	bl	56e2 <printk>
    41e8:	4906      	ldr	r1, [pc, #24]	; (4204 <z_thread_timeout+0x90>)
    41ea:	480c      	ldr	r0, [pc, #48]	; (421c <z_thread_timeout+0xa8>)
    41ec:	f001 fa79 	bl	56e2 <printk>
    41f0:	4805      	ldr	r0, [pc, #20]	; (4208 <z_thread_timeout+0x94>)
    41f2:	2184      	movs	r1, #132	; 0x84
    41f4:	f001 fb80 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    41f8:	f386 8811 	msr	BASEPRI, r6
    41fc:	f3bf 8f6f 	isb	sy
}
    4200:	bd70      	pop	{r4, r5, r6, pc}
    4202:	bf00      	nop
    4204:	20000794 	.word	0x20000794
    4208:	00006562 	.word	0x00006562
    420c:	000065ad 	.word	0x000065ad
    4210:	00005fa5 	.word	0x00005fa5
    4214:	000065c2 	.word	0x000065c2
    4218:	00006581 	.word	0x00006581
    421c:	00006598 	.word	0x00006598

00004220 <move_thread_to_end_of_prio_q>:
{
    4220:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    4222:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4226:	2b00      	cmp	r3, #0
{
    4228:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    422a:	da03      	bge.n	4234 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    422c:	4601      	mov	r1, r0
    422e:	481f      	ldr	r0, [pc, #124]	; (42ac <move_thread_to_end_of_prio_q+0x8c>)
    4230:	f7ff fde8 	bl	3e04 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4234:	4b1e      	ldr	r3, [pc, #120]	; (42b0 <move_thread_to_end_of_prio_q+0x90>)
    4236:	429c      	cmp	r4, r3
    4238:	d10b      	bne.n	4252 <move_thread_to_end_of_prio_q+0x32>
    423a:	491e      	ldr	r1, [pc, #120]	; (42b4 <move_thread_to_end_of_prio_q+0x94>)
    423c:	481e      	ldr	r0, [pc, #120]	; (42b8 <move_thread_to_end_of_prio_q+0x98>)
    423e:	4a1f      	ldr	r2, [pc, #124]	; (42bc <move_thread_to_end_of_prio_q+0x9c>)
    4240:	f240 3389 	movw	r3, #905	; 0x389
    4244:	f001 fa4d 	bl	56e2 <printk>
    4248:	481c      	ldr	r0, [pc, #112]	; (42bc <move_thread_to_end_of_prio_q+0x9c>)
    424a:	f240 3189 	movw	r1, #905	; 0x389
    424e:	f001 fb53 	bl	58f8 <assert_post_action>
	return list->head == list;
    4252:	4a1b      	ldr	r2, [pc, #108]	; (42c0 <move_thread_to_end_of_prio_q+0xa0>)
    4254:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4256:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	return list->head == list;
    4258:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    425c:	428b      	cmp	r3, r1
    425e:	bf08      	it	eq
    4260:	2300      	moveq	r3, #0
    4262:	2b00      	cmp	r3, #0
    4264:	bf38      	it	cc
    4266:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4268:	b1d3      	cbz	r3, 42a0 <move_thread_to_end_of_prio_q+0x80>
	if (thread_1->base.prio < thread_2->base.prio) {
    426a:	f994 600e 	ldrsb.w	r6, [r4, #14]
    426e:	f993 500e 	ldrsb.w	r5, [r3, #14]
    4272:	42ae      	cmp	r6, r5
    4274:	db03      	blt.n	427e <move_thread_to_end_of_prio_q+0x5e>
	return (node == list->tail) ? NULL : node->next;
    4276:	4298      	cmp	r0, r3
    4278:	d012      	beq.n	42a0 <move_thread_to_end_of_prio_q+0x80>
    427a:	681b      	ldr	r3, [r3, #0]
    427c:	e7f4      	b.n	4268 <move_thread_to_end_of_prio_q+0x48>
	node->prev = successor->prev;
    427e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4280:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    4284:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4286:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    4288:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
    428a:	6890      	ldr	r0, [r2, #8]
    428c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4290:	7363      	strb	r3, [r4, #13]
    4292:	1b03      	subs	r3, r0, r4
    4294:	4258      	negs	r0, r3
}
    4296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    429a:	4158      	adcs	r0, r3
    429c:	f7ff bde0 	b.w	3e60 <update_cache>
	node->prev = list->tail;
    42a0:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    42a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    42a6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    42a8:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    42aa:	e7ed      	b.n	4288 <move_thread_to_end_of_prio_q+0x68>
    42ac:	20000788 	.word	0x20000788
    42b0:	20000488 	.word	0x20000488
    42b4:	0000742b 	.word	0x0000742b
    42b8:	00005fa5 	.word	0x00005fa5
    42bc:	00007389 	.word	0x00007389
    42c0:	20000760 	.word	0x20000760

000042c4 <z_time_slice>:
{
    42c4:	b570      	push	{r4, r5, r6, lr}
    42c6:	4604      	mov	r4, r0
	__asm__ volatile(
    42c8:	f04f 0320 	mov.w	r3, #32
    42cc:	f3ef 8511 	mrs	r5, BASEPRI
    42d0:	f383 8811 	msr	BASEPRI, r3
    42d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    42d8:	482a      	ldr	r0, [pc, #168]	; (4384 <z_time_slice+0xc0>)
    42da:	f000 fe55 	bl	4f88 <z_spin_lock_valid>
    42de:	b968      	cbnz	r0, 42fc <z_time_slice+0x38>
    42e0:	4a29      	ldr	r2, [pc, #164]	; (4388 <z_time_slice+0xc4>)
    42e2:	492a      	ldr	r1, [pc, #168]	; (438c <z_time_slice+0xc8>)
    42e4:	482a      	ldr	r0, [pc, #168]	; (4390 <z_time_slice+0xcc>)
    42e6:	235c      	movs	r3, #92	; 0x5c
    42e8:	f001 f9fb 	bl	56e2 <printk>
    42ec:	4925      	ldr	r1, [pc, #148]	; (4384 <z_time_slice+0xc0>)
    42ee:	4829      	ldr	r0, [pc, #164]	; (4394 <z_time_slice+0xd0>)
    42f0:	f001 f9f7 	bl	56e2 <printk>
    42f4:	4824      	ldr	r0, [pc, #144]	; (4388 <z_time_slice+0xc4>)
    42f6:	215c      	movs	r1, #92	; 0x5c
    42f8:	f001 fafe 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    42fc:	4821      	ldr	r0, [pc, #132]	; (4384 <z_time_slice+0xc0>)
    42fe:	f000 fe61 	bl	4fc4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    4302:	4b25      	ldr	r3, [pc, #148]	; (4398 <z_time_slice+0xd4>)
    4304:	4a25      	ldr	r2, [pc, #148]	; (439c <z_time_slice+0xd8>)
    4306:	6898      	ldr	r0, [r3, #8]
    4308:	6811      	ldr	r1, [r2, #0]
    430a:	4288      	cmp	r0, r1
    430c:	4619      	mov	r1, r3
    430e:	d118      	bne.n	4342 <z_time_slice+0x7e>
			z_reset_time_slice();
    4310:	f7ff fc46 	bl	3ba0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4314:	481b      	ldr	r0, [pc, #108]	; (4384 <z_time_slice+0xc0>)
    4316:	f000 fe45 	bl	4fa4 <z_spin_unlock_valid>
    431a:	b968      	cbnz	r0, 4338 <z_time_slice+0x74>
    431c:	4a1a      	ldr	r2, [pc, #104]	; (4388 <z_time_slice+0xc4>)
    431e:	4920      	ldr	r1, [pc, #128]	; (43a0 <z_time_slice+0xdc>)
    4320:	481b      	ldr	r0, [pc, #108]	; (4390 <z_time_slice+0xcc>)
    4322:	2384      	movs	r3, #132	; 0x84
    4324:	f001 f9dd 	bl	56e2 <printk>
    4328:	4916      	ldr	r1, [pc, #88]	; (4384 <z_time_slice+0xc0>)
    432a:	481e      	ldr	r0, [pc, #120]	; (43a4 <z_time_slice+0xe0>)
    432c:	f001 f9d9 	bl	56e2 <printk>
    4330:	4815      	ldr	r0, [pc, #84]	; (4388 <z_time_slice+0xc4>)
    4332:	2184      	movs	r1, #132	; 0x84
    4334:	f001 fae0 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    4338:	f385 8811 	msr	BASEPRI, r5
    433c:	f3bf 8f6f 	isb	sy
}
    4340:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    4342:	2600      	movs	r6, #0
    4344:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4346:	4a18      	ldr	r2, [pc, #96]	; (43a8 <z_time_slice+0xe4>)
    4348:	6812      	ldr	r2, [r2, #0]
    434a:	b1ba      	cbz	r2, 437c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    434c:	89c2      	ldrh	r2, [r0, #14]
    434e:	2a7f      	cmp	r2, #127	; 0x7f
    4350:	d814      	bhi.n	437c <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    4352:	7b42      	ldrb	r2, [r0, #13]
    4354:	06d2      	lsls	r2, r2, #27
    4356:	d111      	bne.n	437c <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4358:	4a14      	ldr	r2, [pc, #80]	; (43ac <z_time_slice+0xe8>)
    435a:	f990 600e 	ldrsb.w	r6, [r0, #14]
    435e:	6812      	ldr	r2, [r2, #0]
    4360:	4296      	cmp	r6, r2
    4362:	db0b      	blt.n	437c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    4364:	4a12      	ldr	r2, [pc, #72]	; (43b0 <z_time_slice+0xec>)
    4366:	4290      	cmp	r0, r2
    4368:	d008      	beq.n	437c <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    436a:	691a      	ldr	r2, [r3, #16]
    436c:	42a2      	cmp	r2, r4
    436e:	dc02      	bgt.n	4376 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    4370:	f7ff ff56 	bl	4220 <move_thread_to_end_of_prio_q>
    4374:	e7cc      	b.n	4310 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    4376:	1b12      	subs	r2, r2, r4
    4378:	611a      	str	r2, [r3, #16]
    437a:	e7cb      	b.n	4314 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    437c:	2300      	movs	r3, #0
    437e:	610b      	str	r3, [r1, #16]
    4380:	e7c8      	b.n	4314 <z_time_slice+0x50>
    4382:	bf00      	nop
    4384:	20000794 	.word	0x20000794
    4388:	00006562 	.word	0x00006562
    438c:	000065ad 	.word	0x000065ad
    4390:	00005fa5 	.word	0x00005fa5
    4394:	000065c2 	.word	0x000065c2
    4398:	20000760 	.word	0x20000760
    439c:	20000790 	.word	0x20000790
    43a0:	00006581 	.word	0x00006581
    43a4:	00006598 	.word	0x00006598
    43a8:	2000079c 	.word	0x2000079c
    43ac:	20000798 	.word	0x20000798
    43b0:	20000488 	.word	0x20000488

000043b4 <z_impl_k_thread_suspend>:
{
    43b4:	b570      	push	{r4, r5, r6, lr}
    43b6:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    43b8:	3018      	adds	r0, #24
    43ba:	f000 ff2b 	bl	5214 <z_abort_timeout>
	__asm__ volatile(
    43be:	f04f 0320 	mov.w	r3, #32
    43c2:	f3ef 8611 	mrs	r6, BASEPRI
    43c6:	f383 8811 	msr	BASEPRI, r3
    43ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    43ce:	4825      	ldr	r0, [pc, #148]	; (4464 <z_impl_k_thread_suspend+0xb0>)
    43d0:	f000 fdda 	bl	4f88 <z_spin_lock_valid>
    43d4:	b968      	cbnz	r0, 43f2 <z_impl_k_thread_suspend+0x3e>
    43d6:	4a24      	ldr	r2, [pc, #144]	; (4468 <z_impl_k_thread_suspend+0xb4>)
    43d8:	4924      	ldr	r1, [pc, #144]	; (446c <z_impl_k_thread_suspend+0xb8>)
    43da:	4825      	ldr	r0, [pc, #148]	; (4470 <z_impl_k_thread_suspend+0xbc>)
    43dc:	235c      	movs	r3, #92	; 0x5c
    43de:	f001 f980 	bl	56e2 <printk>
    43e2:	4920      	ldr	r1, [pc, #128]	; (4464 <z_impl_k_thread_suspend+0xb0>)
    43e4:	4823      	ldr	r0, [pc, #140]	; (4474 <z_impl_k_thread_suspend+0xc0>)
    43e6:	f001 f97c 	bl	56e2 <printk>
    43ea:	481f      	ldr	r0, [pc, #124]	; (4468 <z_impl_k_thread_suspend+0xb4>)
    43ec:	215c      	movs	r1, #92	; 0x5c
    43ee:	f001 fa83 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    43f2:	481c      	ldr	r0, [pc, #112]	; (4464 <z_impl_k_thread_suspend+0xb0>)
    43f4:	f000 fde6 	bl	4fc4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    43f8:	f994 300d 	ldrsb.w	r3, [r4, #13]
    43fc:	2b00      	cmp	r3, #0
    43fe:	da07      	bge.n	4410 <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4400:	481d      	ldr	r0, [pc, #116]	; (4478 <z_impl_k_thread_suspend+0xc4>)
    4402:	4621      	mov	r1, r4
    4404:	f7ff fcfe 	bl	3e04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4408:	7b63      	ldrb	r3, [r4, #13]
    440a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    440e:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    4410:	4d1a      	ldr	r5, [pc, #104]	; (447c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4412:	7b63      	ldrb	r3, [r4, #13]
    4414:	68a8      	ldr	r0, [r5, #8]
    4416:	f043 0310 	orr.w	r3, r3, #16
    441a:	7363      	strb	r3, [r4, #13]
    441c:	1b03      	subs	r3, r0, r4
    441e:	4258      	negs	r0, r3
    4420:	4158      	adcs	r0, r3
    4422:	f7ff fd1d 	bl	3e60 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4426:	480f      	ldr	r0, [pc, #60]	; (4464 <z_impl_k_thread_suspend+0xb0>)
    4428:	f000 fdbc 	bl	4fa4 <z_spin_unlock_valid>
    442c:	b968      	cbnz	r0, 444a <z_impl_k_thread_suspend+0x96>
    442e:	4a0e      	ldr	r2, [pc, #56]	; (4468 <z_impl_k_thread_suspend+0xb4>)
    4430:	4913      	ldr	r1, [pc, #76]	; (4480 <z_impl_k_thread_suspend+0xcc>)
    4432:	480f      	ldr	r0, [pc, #60]	; (4470 <z_impl_k_thread_suspend+0xbc>)
    4434:	2384      	movs	r3, #132	; 0x84
    4436:	f001 f954 	bl	56e2 <printk>
    443a:	490a      	ldr	r1, [pc, #40]	; (4464 <z_impl_k_thread_suspend+0xb0>)
    443c:	4811      	ldr	r0, [pc, #68]	; (4484 <z_impl_k_thread_suspend+0xd0>)
    443e:	f001 f950 	bl	56e2 <printk>
    4442:	4809      	ldr	r0, [pc, #36]	; (4468 <z_impl_k_thread_suspend+0xb4>)
    4444:	2184      	movs	r1, #132	; 0x84
    4446:	f001 fa57 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    444a:	f386 8811 	msr	BASEPRI, r6
    444e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4452:	68ab      	ldr	r3, [r5, #8]
    4454:	42a3      	cmp	r3, r4
    4456:	d103      	bne.n	4460 <z_impl_k_thread_suspend+0xac>
}
    4458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    445c:	f001 bbce 	b.w	5bfc <z_reschedule_unlocked>
}
    4460:	bd70      	pop	{r4, r5, r6, pc}
    4462:	bf00      	nop
    4464:	20000794 	.word	0x20000794
    4468:	00006562 	.word	0x00006562
    446c:	000065ad 	.word	0x000065ad
    4470:	00005fa5 	.word	0x00005fa5
    4474:	000065c2 	.word	0x000065c2
    4478:	20000788 	.word	0x20000788
    447c:	20000760 	.word	0x20000760
    4480:	00006581 	.word	0x00006581
    4484:	00006598 	.word	0x00006598

00004488 <z_thread_single_abort>:
{
    4488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    448c:	7b03      	ldrb	r3, [r0, #12]
    448e:	07dd      	lsls	r5, r3, #31
{
    4490:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    4492:	d50e      	bpl.n	44b2 <z_thread_single_abort+0x2a>
    4494:	4949      	ldr	r1, [pc, #292]	; (45bc <z_thread_single_abort+0x134>)
    4496:	4a4a      	ldr	r2, [pc, #296]	; (45c0 <z_thread_single_abort+0x138>)
    4498:	484a      	ldr	r0, [pc, #296]	; (45c4 <z_thread_single_abort+0x13c>)
    449a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    449e:	f001 f920 	bl	56e2 <printk>
    44a2:	4849      	ldr	r0, [pc, #292]	; (45c8 <z_thread_single_abort+0x140>)
    44a4:	f001 f91d 	bl	56e2 <printk>
    44a8:	4845      	ldr	r0, [pc, #276]	; (45c0 <z_thread_single_abort+0x138>)
    44aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    44ae:	f001 fa23 	bl	58f8 <assert_post_action>
	if (thread->fn_abort != NULL) {
    44b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
    44b4:	b103      	cbz	r3, 44b8 <z_thread_single_abort+0x30>
		thread->fn_abort();
    44b6:	4798      	blx	r3
    44b8:	f104 0018 	add.w	r0, r4, #24
    44bc:	f000 feaa 	bl	5214 <z_abort_timeout>
	__asm__ volatile(
    44c0:	f04f 0320 	mov.w	r3, #32
    44c4:	f3ef 8611 	mrs	r6, BASEPRI
    44c8:	f383 8811 	msr	BASEPRI, r3
    44cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    44d0:	483e      	ldr	r0, [pc, #248]	; (45cc <z_thread_single_abort+0x144>)
    44d2:	f000 fd59 	bl	4f88 <z_spin_lock_valid>
    44d6:	b968      	cbnz	r0, 44f4 <z_thread_single_abort+0x6c>
    44d8:	4a3d      	ldr	r2, [pc, #244]	; (45d0 <z_thread_single_abort+0x148>)
    44da:	493e      	ldr	r1, [pc, #248]	; (45d4 <z_thread_single_abort+0x14c>)
    44dc:	4839      	ldr	r0, [pc, #228]	; (45c4 <z_thread_single_abort+0x13c>)
    44de:	235c      	movs	r3, #92	; 0x5c
    44e0:	f001 f8ff 	bl	56e2 <printk>
    44e4:	4939      	ldr	r1, [pc, #228]	; (45cc <z_thread_single_abort+0x144>)
    44e6:	483c      	ldr	r0, [pc, #240]	; (45d8 <z_thread_single_abort+0x150>)
    44e8:	f001 f8fb 	bl	56e2 <printk>
    44ec:	4838      	ldr	r0, [pc, #224]	; (45d0 <z_thread_single_abort+0x148>)
    44ee:	215c      	movs	r1, #92	; 0x5c
    44f0:	f001 fa02 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    44f4:	4835      	ldr	r0, [pc, #212]	; (45cc <z_thread_single_abort+0x144>)
    44f6:	f000 fd65 	bl	4fc4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    44fa:	7b63      	ldrb	r3, [r4, #13]
    44fc:	06d8      	lsls	r0, r3, #27
    44fe:	d136      	bne.n	456e <z_thread_single_abort+0xe6>
		if (z_is_thread_ready(thread)) {
    4500:	69a2      	ldr	r2, [r4, #24]
    4502:	2a00      	cmp	r2, #0
    4504:	d133      	bne.n	456e <z_thread_single_abort+0xe6>
			if (z_is_thread_queued(thread)) {
    4506:	0619      	lsls	r1, r3, #24
    4508:	d507      	bpl.n	451a <z_thread_single_abort+0x92>
				_priq_run_remove(&_kernel.ready_q.runq,
    450a:	4834      	ldr	r0, [pc, #208]	; (45dc <z_thread_single_abort+0x154>)
    450c:	4621      	mov	r1, r4
    450e:	f7ff fc79 	bl	3e04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4512:	7b63      	ldrb	r3, [r4, #13]
    4514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4518:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    451a:	4b31      	ldr	r3, [pc, #196]	; (45e0 <z_thread_single_abort+0x158>)
    451c:	6898      	ldr	r0, [r3, #8]
    451e:	1b02      	subs	r2, r0, r4
    4520:	4250      	negs	r0, r2
    4522:	4150      	adcs	r0, r2
    4524:	f7ff fc9c 	bl	3e60 <update_cache>
		thread->base.thread_state |= mask;
    4528:	7b63      	ldrb	r3, [r4, #13]
    452a:	f043 0308 	orr.w	r3, r3, #8
    452e:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4530:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
    4534:	2700      	movs	r7, #0
	return list->head == list;
    4536:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4538:	4545      	cmp	r5, r8
    453a:	d000      	beq.n	453e <z_thread_single_abort+0xb6>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    453c:	bb3d      	cbnz	r5, 458e <z_thread_single_abort+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    453e:	4823      	ldr	r0, [pc, #140]	; (45cc <z_thread_single_abort+0x144>)
    4540:	f000 fd30 	bl	4fa4 <z_spin_unlock_valid>
    4544:	b968      	cbnz	r0, 4562 <z_thread_single_abort+0xda>
    4546:	4a22      	ldr	r2, [pc, #136]	; (45d0 <z_thread_single_abort+0x148>)
    4548:	4926      	ldr	r1, [pc, #152]	; (45e4 <z_thread_single_abort+0x15c>)
    454a:	481e      	ldr	r0, [pc, #120]	; (45c4 <z_thread_single_abort+0x13c>)
    454c:	2384      	movs	r3, #132	; 0x84
    454e:	f001 f8c8 	bl	56e2 <printk>
    4552:	491e      	ldr	r1, [pc, #120]	; (45cc <z_thread_single_abort+0x144>)
    4554:	4824      	ldr	r0, [pc, #144]	; (45e8 <z_thread_single_abort+0x160>)
    4556:	f001 f8c4 	bl	56e2 <printk>
    455a:	481d      	ldr	r0, [pc, #116]	; (45d0 <z_thread_single_abort+0x148>)
    455c:	2184      	movs	r1, #132	; 0x84
    455e:	f001 f9cb 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    4562:	f386 8811 	msr	BASEPRI, r6
    4566:	f3bf 8f6f 	isb	sy
}
    456a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    456e:	079b      	lsls	r3, r3, #30
    4570:	d5da      	bpl.n	4528 <z_thread_single_abort+0xa0>
				_priq_wait_remove(&pended_on(thread)->waitq,
    4572:	f104 0008 	add.w	r0, r4, #8
    4576:	f7ff fafb 	bl	3b70 <pended_on.isra.0>
    457a:	4621      	mov	r1, r4
    457c:	f7ff fc42 	bl	3e04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4580:	7b63      	ldrb	r3, [r4, #13]
    4582:	f023 0302 	bic.w	r3, r3, #2
    4586:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    4588:	2300      	movs	r3, #0
    458a:	60a3      	str	r3, [r4, #8]
    458c:	e7cc      	b.n	4528 <z_thread_single_abort+0xa0>
    458e:	f105 0018 	add.w	r0, r5, #24
    4592:	f000 fe3f 	bl	5214 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    4596:	f105 0008 	add.w	r0, r5, #8
    459a:	f7ff fae9 	bl	3b70 <pended_on.isra.0>
    459e:	4629      	mov	r1, r5
    45a0:	f7ff fc30 	bl	3e04 <z_priq_dumb_remove>
    45a4:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    45a6:	60af      	str	r7, [r5, #8]
    45a8:	f023 0302 	bic.w	r3, r3, #2
    45ac:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    45ae:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
			ready_thread(waiter);
    45b2:	4628      	mov	r0, r5
    45b4:	f7ff fcf4 	bl	3fa0 <ready_thread>
    45b8:	e7bd      	b.n	4536 <z_thread_single_abort+0xae>
    45ba:	bf00      	nop
    45bc:	0000747c 	.word	0x0000747c
    45c0:	00007389 	.word	0x00007389
    45c4:	00005fa5 	.word	0x00005fa5
    45c8:	000074aa 	.word	0x000074aa
    45cc:	20000794 	.word	0x20000794
    45d0:	00006562 	.word	0x00006562
    45d4:	000065ad 	.word	0x000065ad
    45d8:	000065c2 	.word	0x000065c2
    45dc:	20000788 	.word	0x20000788
    45e0:	20000760 	.word	0x20000760
    45e4:	00006581 	.word	0x00006581
    45e8:	00006598 	.word	0x00006598

000045ec <unready_thread>:
{
    45ec:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    45ee:	f990 300d 	ldrsb.w	r3, [r0, #13]
    45f2:	2b00      	cmp	r3, #0
{
    45f4:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    45f6:	da07      	bge.n	4608 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    45f8:	4601      	mov	r1, r0
    45fa:	4808      	ldr	r0, [pc, #32]	; (461c <unready_thread+0x30>)
    45fc:	f7ff fc02 	bl	3e04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4600:	7b63      	ldrb	r3, [r4, #13]
    4602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4606:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
    4608:	4b05      	ldr	r3, [pc, #20]	; (4620 <unready_thread+0x34>)
    460a:	6898      	ldr	r0, [r3, #8]
    460c:	1b03      	subs	r3, r0, r4
    460e:	4258      	negs	r0, r3
}
    4610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    4614:	4158      	adcs	r0, r3
    4616:	f7ff bc23 	b.w	3e60 <update_cache>
    461a:	bf00      	nop
    461c:	20000788 	.word	0x20000788
    4620:	20000760 	.word	0x20000760

00004624 <add_to_waitq_locked>:
{
    4624:	b538      	push	{r3, r4, r5, lr}
    4626:	4604      	mov	r4, r0
    4628:	460d      	mov	r5, r1
	unready_thread(thread);
    462a:	f7ff ffdf 	bl	45ec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    462e:	7b63      	ldrb	r3, [r4, #13]
    4630:	f043 0302 	orr.w	r3, r3, #2
    4634:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4636:	b33d      	cbz	r5, 4688 <add_to_waitq_locked+0x64>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4638:	4b17      	ldr	r3, [pc, #92]	; (4698 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    463a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    463c:	429c      	cmp	r4, r3
    463e:	d10b      	bne.n	4658 <add_to_waitq_locked+0x34>
    4640:	4916      	ldr	r1, [pc, #88]	; (469c <add_to_waitq_locked+0x78>)
    4642:	4817      	ldr	r0, [pc, #92]	; (46a0 <add_to_waitq_locked+0x7c>)
    4644:	4a17      	ldr	r2, [pc, #92]	; (46a4 <add_to_waitq_locked+0x80>)
    4646:	f240 3389 	movw	r3, #905	; 0x389
    464a:	f001 f84a 	bl	56e2 <printk>
    464e:	4815      	ldr	r0, [pc, #84]	; (46a4 <add_to_waitq_locked+0x80>)
    4650:	f240 3189 	movw	r1, #905	; 0x389
    4654:	f001 f950 	bl	58f8 <assert_post_action>
	return list->head == list;
    4658:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    465a:	429d      	cmp	r5, r3
    465c:	bf08      	it	eq
    465e:	2300      	moveq	r3, #0
    4660:	2b00      	cmp	r3, #0
    4662:	bf38      	it	cc
    4664:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4666:	b183      	cbz	r3, 468a <add_to_waitq_locked+0x66>
	if (thread_1->base.prio < thread_2->base.prio) {
    4668:	f994 100e 	ldrsb.w	r1, [r4, #14]
    466c:	f993 200e 	ldrsb.w	r2, [r3, #14]
    4670:	4291      	cmp	r1, r2
    4672:	db04      	blt.n	467e <add_to_waitq_locked+0x5a>
	return (node == list->tail) ? NULL : node->next;
    4674:	686a      	ldr	r2, [r5, #4]
    4676:	429a      	cmp	r2, r3
    4678:	d007      	beq.n	468a <add_to_waitq_locked+0x66>
    467a:	681b      	ldr	r3, [r3, #0]
    467c:	e7f3      	b.n	4666 <add_to_waitq_locked+0x42>
	node->prev = successor->prev;
    467e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4680:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    4684:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4686:	605c      	str	r4, [r3, #4]
}
    4688:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    468a:	686b      	ldr	r3, [r5, #4]
    468c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    468e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    4690:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    4692:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4694:	606c      	str	r4, [r5, #4]
    4696:	e7f7      	b.n	4688 <add_to_waitq_locked+0x64>
    4698:	20000488 	.word	0x20000488
    469c:	0000742b 	.word	0x0000742b
    46a0:	00005fa5 	.word	0x00005fa5
    46a4:	00007389 	.word	0x00007389

000046a8 <pend>:
{
    46a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46ac:	4604      	mov	r4, r0
    46ae:	460d      	mov	r5, r1
    46b0:	4616      	mov	r6, r2
    46b2:	461f      	mov	r7, r3
	__asm__ volatile(
    46b4:	f04f 0320 	mov.w	r3, #32
    46b8:	f3ef 8811 	mrs	r8, BASEPRI
    46bc:	f383 8811 	msr	BASEPRI, r3
    46c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    46c4:	481f      	ldr	r0, [pc, #124]	; (4744 <pend+0x9c>)
    46c6:	f000 fc5f 	bl	4f88 <z_spin_lock_valid>
    46ca:	b968      	cbnz	r0, 46e8 <pend+0x40>
    46cc:	4a1e      	ldr	r2, [pc, #120]	; (4748 <pend+0xa0>)
    46ce:	491f      	ldr	r1, [pc, #124]	; (474c <pend+0xa4>)
    46d0:	481f      	ldr	r0, [pc, #124]	; (4750 <pend+0xa8>)
    46d2:	235c      	movs	r3, #92	; 0x5c
    46d4:	f001 f805 	bl	56e2 <printk>
    46d8:	491a      	ldr	r1, [pc, #104]	; (4744 <pend+0x9c>)
    46da:	481e      	ldr	r0, [pc, #120]	; (4754 <pend+0xac>)
    46dc:	f001 f801 	bl	56e2 <printk>
    46e0:	4819      	ldr	r0, [pc, #100]	; (4748 <pend+0xa0>)
    46e2:	215c      	movs	r1, #92	; 0x5c
    46e4:	f001 f908 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    46e8:	4816      	ldr	r0, [pc, #88]	; (4744 <pend+0x9c>)
    46ea:	f000 fc6b 	bl	4fc4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    46ee:	4620      	mov	r0, r4
    46f0:	4629      	mov	r1, r5
    46f2:	f7ff ff97 	bl	4624 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    46f6:	4813      	ldr	r0, [pc, #76]	; (4744 <pend+0x9c>)
    46f8:	f000 fc54 	bl	4fa4 <z_spin_unlock_valid>
    46fc:	b968      	cbnz	r0, 471a <pend+0x72>
    46fe:	4a12      	ldr	r2, [pc, #72]	; (4748 <pend+0xa0>)
    4700:	4915      	ldr	r1, [pc, #84]	; (4758 <pend+0xb0>)
    4702:	4813      	ldr	r0, [pc, #76]	; (4750 <pend+0xa8>)
    4704:	2384      	movs	r3, #132	; 0x84
    4706:	f000 ffec 	bl	56e2 <printk>
    470a:	490e      	ldr	r1, [pc, #56]	; (4744 <pend+0x9c>)
    470c:	4813      	ldr	r0, [pc, #76]	; (475c <pend+0xb4>)
    470e:	f000 ffe8 	bl	56e2 <printk>
    4712:	480d      	ldr	r0, [pc, #52]	; (4748 <pend+0xa0>)
    4714:	2184      	movs	r1, #132	; 0x84
    4716:	f001 f8ef 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    471a:	f388 8811 	msr	BASEPRI, r8
    471e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4722:	1c7b      	adds	r3, r7, #1
    4724:	bf08      	it	eq
    4726:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    472a:	d008      	beq.n	473e <pend+0x96>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    472c:	4632      	mov	r2, r6
    472e:	463b      	mov	r3, r7
    4730:	f104 0018 	add.w	r0, r4, #24
    4734:	490a      	ldr	r1, [pc, #40]	; (4760 <pend+0xb8>)
}
    4736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    473a:	f000 bc97 	b.w	506c <z_add_timeout>
    473e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4742:	bf00      	nop
    4744:	20000794 	.word	0x20000794
    4748:	00006562 	.word	0x00006562
    474c:	000065ad 	.word	0x000065ad
    4750:	00005fa5 	.word	0x00005fa5
    4754:	000065c2 	.word	0x000065c2
    4758:	00006581 	.word	0x00006581
    475c:	00006598 	.word	0x00006598
    4760:	00004175 	.word	0x00004175

00004764 <z_pend_curr>:
{
    4764:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    4766:	4b11      	ldr	r3, [pc, #68]	; (47ac <z_pend_curr+0x48>)
{
    4768:	4604      	mov	r4, r0
	pending_current = _current;
    476a:	6898      	ldr	r0, [r3, #8]
    476c:	4b10      	ldr	r3, [pc, #64]	; (47b0 <z_pend_curr+0x4c>)
{
    476e:	460d      	mov	r5, r1
	pending_current = _current;
    4770:	6018      	str	r0, [r3, #0]
{
    4772:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    4774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4778:	f7ff ff96 	bl	46a8 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    477c:	4620      	mov	r0, r4
    477e:	f000 fc11 	bl	4fa4 <z_spin_unlock_valid>
    4782:	b968      	cbnz	r0, 47a0 <z_pend_curr+0x3c>
    4784:	4a0b      	ldr	r2, [pc, #44]	; (47b4 <z_pend_curr+0x50>)
    4786:	490c      	ldr	r1, [pc, #48]	; (47b8 <z_pend_curr+0x54>)
    4788:	480c      	ldr	r0, [pc, #48]	; (47bc <z_pend_curr+0x58>)
    478a:	239b      	movs	r3, #155	; 0x9b
    478c:	f000 ffa9 	bl	56e2 <printk>
    4790:	480b      	ldr	r0, [pc, #44]	; (47c0 <z_pend_curr+0x5c>)
    4792:	4621      	mov	r1, r4
    4794:	f000 ffa5 	bl	56e2 <printk>
    4798:	4806      	ldr	r0, [pc, #24]	; (47b4 <z_pend_curr+0x50>)
    479a:	219b      	movs	r1, #155	; 0x9b
    479c:	f001 f8ac 	bl	58f8 <assert_post_action>
    47a0:	4628      	mov	r0, r5
}
    47a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    47a6:	f7fd ba75 	b.w	1c94 <arch_swap>
    47aa:	bf00      	nop
    47ac:	20000760 	.word	0x20000760
    47b0:	20000790 	.word	0x20000790
    47b4:	00006562 	.word	0x00006562
    47b8:	00006581 	.word	0x00006581
    47bc:	00005fa5 	.word	0x00005fa5
    47c0:	00006598 	.word	0x00006598

000047c4 <z_unpend_first_thread>:
{
    47c4:	b538      	push	{r3, r4, r5, lr}
    47c6:	4604      	mov	r4, r0
	__asm__ volatile(
    47c8:	f04f 0320 	mov.w	r3, #32
    47cc:	f3ef 8511 	mrs	r5, BASEPRI
    47d0:	f383 8811 	msr	BASEPRI, r3
    47d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    47d8:	4836      	ldr	r0, [pc, #216]	; (48b4 <z_unpend_first_thread+0xf0>)
    47da:	f000 fbd5 	bl	4f88 <z_spin_lock_valid>
    47de:	b968      	cbnz	r0, 47fc <z_unpend_first_thread+0x38>
    47e0:	4a35      	ldr	r2, [pc, #212]	; (48b8 <z_unpend_first_thread+0xf4>)
    47e2:	4936      	ldr	r1, [pc, #216]	; (48bc <z_unpend_first_thread+0xf8>)
    47e4:	4836      	ldr	r0, [pc, #216]	; (48c0 <z_unpend_first_thread+0xfc>)
    47e6:	235c      	movs	r3, #92	; 0x5c
    47e8:	f000 ff7b 	bl	56e2 <printk>
    47ec:	4931      	ldr	r1, [pc, #196]	; (48b4 <z_unpend_first_thread+0xf0>)
    47ee:	4835      	ldr	r0, [pc, #212]	; (48c4 <z_unpend_first_thread+0x100>)
    47f0:	f000 ff77 	bl	56e2 <printk>
    47f4:	4830      	ldr	r0, [pc, #192]	; (48b8 <z_unpend_first_thread+0xf4>)
    47f6:	215c      	movs	r1, #92	; 0x5c
    47f8:	f001 f87e 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    47fc:	482d      	ldr	r0, [pc, #180]	; (48b4 <z_unpend_first_thread+0xf0>)
    47fe:	f000 fbe1 	bl	4fc4 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
    4802:	4620      	mov	r0, r4
    4804:	f001 fa13 	bl	5c2e <z_priq_dumb_best>
    4808:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    480a:	482a      	ldr	r0, [pc, #168]	; (48b4 <z_unpend_first_thread+0xf0>)
    480c:	f000 fbca 	bl	4fa4 <z_spin_unlock_valid>
    4810:	b968      	cbnz	r0, 482e <z_unpend_first_thread+0x6a>
    4812:	4a29      	ldr	r2, [pc, #164]	; (48b8 <z_unpend_first_thread+0xf4>)
    4814:	492c      	ldr	r1, [pc, #176]	; (48c8 <z_unpend_first_thread+0x104>)
    4816:	482a      	ldr	r0, [pc, #168]	; (48c0 <z_unpend_first_thread+0xfc>)
    4818:	2384      	movs	r3, #132	; 0x84
    481a:	f000 ff62 	bl	56e2 <printk>
    481e:	4925      	ldr	r1, [pc, #148]	; (48b4 <z_unpend_first_thread+0xf0>)
    4820:	482a      	ldr	r0, [pc, #168]	; (48cc <z_unpend_first_thread+0x108>)
    4822:	f000 ff5e 	bl	56e2 <printk>
    4826:	4824      	ldr	r0, [pc, #144]	; (48b8 <z_unpend_first_thread+0xf4>)
    4828:	2184      	movs	r1, #132	; 0x84
    482a:	f001 f865 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    482e:	f385 8811 	msr	BASEPRI, r5
    4832:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    4836:	2c00      	cmp	r4, #0
    4838:	d039      	beq.n	48ae <z_unpend_first_thread+0xea>
	__asm__ volatile(
    483a:	f04f 0320 	mov.w	r3, #32
    483e:	f3ef 8511 	mrs	r5, BASEPRI
    4842:	f383 8811 	msr	BASEPRI, r3
    4846:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    484a:	481a      	ldr	r0, [pc, #104]	; (48b4 <z_unpend_first_thread+0xf0>)
    484c:	f000 fb9c 	bl	4f88 <z_spin_lock_valid>
    4850:	b968      	cbnz	r0, 486e <z_unpend_first_thread+0xaa>
    4852:	4a19      	ldr	r2, [pc, #100]	; (48b8 <z_unpend_first_thread+0xf4>)
    4854:	4919      	ldr	r1, [pc, #100]	; (48bc <z_unpend_first_thread+0xf8>)
    4856:	481a      	ldr	r0, [pc, #104]	; (48c0 <z_unpend_first_thread+0xfc>)
    4858:	235c      	movs	r3, #92	; 0x5c
    485a:	f000 ff42 	bl	56e2 <printk>
    485e:	4915      	ldr	r1, [pc, #84]	; (48b4 <z_unpend_first_thread+0xf0>)
    4860:	4818      	ldr	r0, [pc, #96]	; (48c4 <z_unpend_first_thread+0x100>)
    4862:	f000 ff3e 	bl	56e2 <printk>
    4866:	4814      	ldr	r0, [pc, #80]	; (48b8 <z_unpend_first_thread+0xf4>)
    4868:	215c      	movs	r1, #92	; 0x5c
    486a:	f001 f845 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    486e:	4811      	ldr	r0, [pc, #68]	; (48b4 <z_unpend_first_thread+0xf0>)
    4870:	f000 fba8 	bl	4fc4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
    4874:	4620      	mov	r0, r4
    4876:	f001 f9cb 	bl	5c10 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    487a:	480e      	ldr	r0, [pc, #56]	; (48b4 <z_unpend_first_thread+0xf0>)
    487c:	f000 fb92 	bl	4fa4 <z_spin_unlock_valid>
    4880:	b968      	cbnz	r0, 489e <z_unpend_first_thread+0xda>
    4882:	4a0d      	ldr	r2, [pc, #52]	; (48b8 <z_unpend_first_thread+0xf4>)
    4884:	4910      	ldr	r1, [pc, #64]	; (48c8 <z_unpend_first_thread+0x104>)
    4886:	480e      	ldr	r0, [pc, #56]	; (48c0 <z_unpend_first_thread+0xfc>)
    4888:	2384      	movs	r3, #132	; 0x84
    488a:	f000 ff2a 	bl	56e2 <printk>
    488e:	4909      	ldr	r1, [pc, #36]	; (48b4 <z_unpend_first_thread+0xf0>)
    4890:	480e      	ldr	r0, [pc, #56]	; (48cc <z_unpend_first_thread+0x108>)
    4892:	f000 ff26 	bl	56e2 <printk>
    4896:	4808      	ldr	r0, [pc, #32]	; (48b8 <z_unpend_first_thread+0xf4>)
    4898:	2184      	movs	r1, #132	; 0x84
    489a:	f001 f82d 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    489e:	f385 8811 	msr	BASEPRI, r5
    48a2:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    48a6:	f104 0018 	add.w	r0, r4, #24
    48aa:	f000 fcb3 	bl	5214 <z_abort_timeout>
}
    48ae:	4620      	mov	r0, r4
    48b0:	bd38      	pop	{r3, r4, r5, pc}
    48b2:	bf00      	nop
    48b4:	20000794 	.word	0x20000794
    48b8:	00006562 	.word	0x00006562
    48bc:	000065ad 	.word	0x000065ad
    48c0:	00005fa5 	.word	0x00005fa5
    48c4:	000065c2 	.word	0x000065c2
    48c8:	00006581 	.word	0x00006581
    48cc:	00006598 	.word	0x00006598

000048d0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    48d0:	4b04      	ldr	r3, [pc, #16]	; (48e4 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    48d2:	2100      	movs	r1, #0
    48d4:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    48d8:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    48dc:	4608      	mov	r0, r1
    48de:	f7ff b975 	b.w	3bcc <k_sched_time_slice_set>
    48e2:	bf00      	nop
    48e4:	20000760 	.word	0x20000760

000048e8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    48e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48ea:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    48ee:	b173      	cbz	r3, 490e <z_impl_k_yield+0x26>
    48f0:	4946      	ldr	r1, [pc, #280]	; (4a0c <z_impl_k_yield+0x124>)
    48f2:	4a47      	ldr	r2, [pc, #284]	; (4a10 <z_impl_k_yield+0x128>)
    48f4:	4847      	ldr	r0, [pc, #284]	; (4a14 <z_impl_k_yield+0x12c>)
    48f6:	f240 4394 	movw	r3, #1172	; 0x494
    48fa:	f000 fef2 	bl	56e2 <printk>
    48fe:	4846      	ldr	r0, [pc, #280]	; (4a18 <z_impl_k_yield+0x130>)
    4900:	f000 feef 	bl	56e2 <printk>
    4904:	4842      	ldr	r0, [pc, #264]	; (4a10 <z_impl_k_yield+0x128>)
    4906:	f240 4194 	movw	r1, #1172	; 0x494
    490a:	f000 fff5 	bl	58f8 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
    490e:	4c43      	ldr	r4, [pc, #268]	; (4a1c <z_impl_k_yield+0x134>)
    4910:	4e43      	ldr	r6, [pc, #268]	; (4a20 <z_impl_k_yield+0x138>)
    4912:	68a2      	ldr	r2, [r4, #8]
    4914:	42b2      	cmp	r2, r6
    4916:	d067      	beq.n	49e8 <z_impl_k_yield+0x100>
	__asm__ volatile(
    4918:	f04f 0320 	mov.w	r3, #32
    491c:	f3ef 8711 	mrs	r7, BASEPRI
    4920:	f383 8811 	msr	BASEPRI, r3
    4924:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4928:	483e      	ldr	r0, [pc, #248]	; (4a24 <z_impl_k_yield+0x13c>)
    492a:	f000 fb2d 	bl	4f88 <z_spin_lock_valid>
    492e:	b968      	cbnz	r0, 494c <z_impl_k_yield+0x64>
    4930:	4a3d      	ldr	r2, [pc, #244]	; (4a28 <z_impl_k_yield+0x140>)
    4932:	493e      	ldr	r1, [pc, #248]	; (4a2c <z_impl_k_yield+0x144>)
    4934:	4837      	ldr	r0, [pc, #220]	; (4a14 <z_impl_k_yield+0x12c>)
    4936:	235c      	movs	r3, #92	; 0x5c
    4938:	f000 fed3 	bl	56e2 <printk>
    493c:	4939      	ldr	r1, [pc, #228]	; (4a24 <z_impl_k_yield+0x13c>)
    493e:	483c      	ldr	r0, [pc, #240]	; (4a30 <z_impl_k_yield+0x148>)
    4940:	f000 fecf 	bl	56e2 <printk>
    4944:	4838      	ldr	r0, [pc, #224]	; (4a28 <z_impl_k_yield+0x140>)
    4946:	215c      	movs	r1, #92	; 0x5c
    4948:	f000 ffd6 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    494c:	4835      	ldr	r0, [pc, #212]	; (4a24 <z_impl_k_yield+0x13c>)
    494e:	f000 fb39 	bl	4fc4 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
    4952:	68a1      	ldr	r1, [r4, #8]
    4954:	4837      	ldr	r0, [pc, #220]	; (4a34 <z_impl_k_yield+0x14c>)
    4956:	f7ff fa55 	bl	3e04 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
    495a:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    495c:	42b5      	cmp	r5, r6
    495e:	d10b      	bne.n	4978 <z_impl_k_yield+0x90>
    4960:	4935      	ldr	r1, [pc, #212]	; (4a38 <z_impl_k_yield+0x150>)
    4962:	482c      	ldr	r0, [pc, #176]	; (4a14 <z_impl_k_yield+0x12c>)
    4964:	4a2a      	ldr	r2, [pc, #168]	; (4a10 <z_impl_k_yield+0x128>)
    4966:	f240 3389 	movw	r3, #905	; 0x389
    496a:	f000 feba 	bl	56e2 <printk>
    496e:	4828      	ldr	r0, [pc, #160]	; (4a10 <z_impl_k_yield+0x128>)
    4970:	f240 3189 	movw	r1, #905	; 0x389
    4974:	f000 ffc0 	bl	58f8 <assert_post_action>
	return list->head == list;
    4978:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    497a:	492e      	ldr	r1, [pc, #184]	; (4a34 <z_impl_k_yield+0x14c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    497c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    497e:	428b      	cmp	r3, r1
    4980:	bf08      	it	eq
    4982:	2300      	moveq	r3, #0
    4984:	2b00      	cmp	r3, #0
    4986:	bf38      	it	cc
    4988:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    498a:	2b00      	cmp	r3, #0
    498c:	d038      	beq.n	4a00 <z_impl_k_yield+0x118>
	if (thread_1->base.prio < thread_2->base.prio) {
    498e:	f995 600e 	ldrsb.w	r6, [r5, #14]
    4992:	f993 000e 	ldrsb.w	r0, [r3, #14]
    4996:	4286      	cmp	r6, r0
    4998:	db03      	blt.n	49a2 <z_impl_k_yield+0xba>
	return (node == list->tail) ? NULL : node->next;
    499a:	4293      	cmp	r3, r2
    499c:	d030      	beq.n	4a00 <z_impl_k_yield+0x118>
    499e:	681b      	ldr	r3, [r3, #0]
    49a0:	e7f3      	b.n	498a <z_impl_k_yield+0xa2>
	node->prev = successor->prev;
    49a2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    49a4:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
    49a8:	6015      	str	r5, [r2, #0]
	successor->prev = node;
    49aa:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
    49ac:	68a2      	ldr	r2, [r4, #8]
	thread->base.thread_state |= states;
    49ae:	7b53      	ldrb	r3, [r2, #13]
    49b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
			update_cache(1);
    49b4:	2001      	movs	r0, #1
    49b6:	7353      	strb	r3, [r2, #13]
    49b8:	f7ff fa52 	bl	3e60 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    49bc:	4819      	ldr	r0, [pc, #100]	; (4a24 <z_impl_k_yield+0x13c>)
    49be:	f000 faf1 	bl	4fa4 <z_spin_unlock_valid>
    49c2:	b968      	cbnz	r0, 49e0 <z_impl_k_yield+0xf8>
    49c4:	4a18      	ldr	r2, [pc, #96]	; (4a28 <z_impl_k_yield+0x140>)
    49c6:	491d      	ldr	r1, [pc, #116]	; (4a3c <z_impl_k_yield+0x154>)
    49c8:	4812      	ldr	r0, [pc, #72]	; (4a14 <z_impl_k_yield+0x12c>)
    49ca:	2384      	movs	r3, #132	; 0x84
    49cc:	f000 fe89 	bl	56e2 <printk>
    49d0:	4914      	ldr	r1, [pc, #80]	; (4a24 <z_impl_k_yield+0x13c>)
    49d2:	481b      	ldr	r0, [pc, #108]	; (4a40 <z_impl_k_yield+0x158>)
    49d4:	f000 fe85 	bl	56e2 <printk>
    49d8:	4813      	ldr	r0, [pc, #76]	; (4a28 <z_impl_k_yield+0x140>)
    49da:	2184      	movs	r1, #132	; 0x84
    49dc:	f000 ff8c 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    49e0:	f387 8811 	msr	BASEPRI, r7
    49e4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    49e8:	f04f 0320 	mov.w	r3, #32
    49ec:	f3ef 8011 	mrs	r0, BASEPRI
    49f0:	f383 8811 	msr	BASEPRI, r3
    49f4:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
    49f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    49fc:	f7fd b94a 	b.w	1c94 <arch_swap>
	node->prev = list->tail;
    4a00:	e9c5 1200 	strd	r1, r2, [r5]
	list->tail->next = node;
    4a04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4a06:	601d      	str	r5, [r3, #0]
	list->tail = node;
    4a08:	62e5      	str	r5, [r4, #44]	; 0x2c
}
    4a0a:	e7cf      	b.n	49ac <z_impl_k_yield+0xc4>
    4a0c:	000073e6 	.word	0x000073e6
    4a10:	00007389 	.word	0x00007389
    4a14:	00005fa5 	.word	0x00005fa5
    4a18:	000073f8 	.word	0x000073f8
    4a1c:	20000760 	.word	0x20000760
    4a20:	20000488 	.word	0x20000488
    4a24:	20000794 	.word	0x20000794
    4a28:	00006562 	.word	0x00006562
    4a2c:	000065ad 	.word	0x000065ad
    4a30:	000065c2 	.word	0x000065c2
    4a34:	20000788 	.word	0x20000788
    4a38:	0000742b 	.word	0x0000742b
    4a3c:	00006581 	.word	0x00006581
    4a40:	00006598 	.word	0x00006598

00004a44 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
{
    4a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a48:	4604      	mov	r4, r0
    4a4a:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
    4a4e:	b173      	cbz	r3, 4a6e <z_tick_sleep+0x2a>
    4a50:	493b      	ldr	r1, [pc, #236]	; (4b40 <z_tick_sleep+0xfc>)
    4a52:	4a3c      	ldr	r2, [pc, #240]	; (4b44 <z_tick_sleep+0x100>)
    4a54:	483c      	ldr	r0, [pc, #240]	; (4b48 <z_tick_sleep+0x104>)
    4a56:	f240 43b2 	movw	r3, #1202	; 0x4b2
    4a5a:	f000 fe42 	bl	56e2 <printk>
    4a5e:	483b      	ldr	r0, [pc, #236]	; (4b4c <z_tick_sleep+0x108>)
    4a60:	f000 fe3f 	bl	56e2 <printk>
    4a64:	4837      	ldr	r0, [pc, #220]	; (4b44 <z_tick_sleep+0x100>)
    4a66:	f240 41b2 	movw	r1, #1202	; 0x4b2
    4a6a:	f000 ff45 	bl	58f8 <assert_post_action>

	LOG_DBG("thread %p for %d ticks", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4a6e:	b924      	cbnz	r4, 4a7a <z_tick_sleep+0x36>
	z_impl_k_yield();
    4a70:	f7ff ff3a 	bl	48e8 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
    4a74:	4620      	mov	r0, r4
    4a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
    4a7a:	f001 f8ec 	bl	5c56 <z_tick_get_32>
	timeout = Z_TIMEOUT_TICKS(ticks);
    4a7e:	4626      	mov	r6, r4
    4a80:	17e7      	asrs	r7, r4, #31
	expected_wakeup_time = ticks + z_tick_get_32();
    4a82:	4404      	add	r4, r0
    4a84:	f04f 0320 	mov.w	r3, #32
    4a88:	f3ef 8811 	mrs	r8, BASEPRI
    4a8c:	f383 8811 	msr	BASEPRI, r3
    4a90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a94:	482e      	ldr	r0, [pc, #184]	; (4b50 <z_tick_sleep+0x10c>)
    4a96:	f000 fa77 	bl	4f88 <z_spin_lock_valid>
    4a9a:	b968      	cbnz	r0, 4ab8 <z_tick_sleep+0x74>
    4a9c:	4a2d      	ldr	r2, [pc, #180]	; (4b54 <z_tick_sleep+0x110>)
    4a9e:	492e      	ldr	r1, [pc, #184]	; (4b58 <z_tick_sleep+0x114>)
    4aa0:	4829      	ldr	r0, [pc, #164]	; (4b48 <z_tick_sleep+0x104>)
    4aa2:	235c      	movs	r3, #92	; 0x5c
    4aa4:	f000 fe1d 	bl	56e2 <printk>
    4aa8:	4929      	ldr	r1, [pc, #164]	; (4b50 <z_tick_sleep+0x10c>)
    4aaa:	482c      	ldr	r0, [pc, #176]	; (4b5c <z_tick_sleep+0x118>)
    4aac:	f000 fe19 	bl	56e2 <printk>
    4ab0:	4828      	ldr	r0, [pc, #160]	; (4b54 <z_tick_sleep+0x110>)
    4ab2:	215c      	movs	r1, #92	; 0x5c
    4ab4:	f000 ff20 	bl	58f8 <assert_post_action>
	pending_current = _current;
    4ab8:	4d29      	ldr	r5, [pc, #164]	; (4b60 <z_tick_sleep+0x11c>)
	z_spin_lock_set_owner(l);
    4aba:	4825      	ldr	r0, [pc, #148]	; (4b50 <z_tick_sleep+0x10c>)
    4abc:	f000 fa82 	bl	4fc4 <z_spin_lock_set_owner>
    4ac0:	4b28      	ldr	r3, [pc, #160]	; (4b64 <z_tick_sleep+0x120>)
    4ac2:	68a8      	ldr	r0, [r5, #8]
    4ac4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4ac6:	f7ff fd91 	bl	45ec <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4aca:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    4acc:	4926      	ldr	r1, [pc, #152]	; (4b68 <z_tick_sleep+0x124>)
    4ace:	4632      	mov	r2, r6
    4ad0:	463b      	mov	r3, r7
    4ad2:	3018      	adds	r0, #24
    4ad4:	f000 faca 	bl	506c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4ad8:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ada:	481d      	ldr	r0, [pc, #116]	; (4b50 <z_tick_sleep+0x10c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4adc:	7b53      	ldrb	r3, [r2, #13]
    4ade:	f043 0310 	orr.w	r3, r3, #16
    4ae2:	7353      	strb	r3, [r2, #13]
    4ae4:	f000 fa5e 	bl	4fa4 <z_spin_unlock_valid>
    4ae8:	b968      	cbnz	r0, 4b06 <z_tick_sleep+0xc2>
    4aea:	4a1a      	ldr	r2, [pc, #104]	; (4b54 <z_tick_sleep+0x110>)
    4aec:	491f      	ldr	r1, [pc, #124]	; (4b6c <z_tick_sleep+0x128>)
    4aee:	4816      	ldr	r0, [pc, #88]	; (4b48 <z_tick_sleep+0x104>)
    4af0:	239b      	movs	r3, #155	; 0x9b
    4af2:	f000 fdf6 	bl	56e2 <printk>
    4af6:	4916      	ldr	r1, [pc, #88]	; (4b50 <z_tick_sleep+0x10c>)
    4af8:	481d      	ldr	r0, [pc, #116]	; (4b70 <z_tick_sleep+0x12c>)
    4afa:	f000 fdf2 	bl	56e2 <printk>
    4afe:	4815      	ldr	r0, [pc, #84]	; (4b54 <z_tick_sleep+0x110>)
    4b00:	219b      	movs	r1, #155	; 0x9b
    4b02:	f000 fef9 	bl	58f8 <assert_post_action>
    4b06:	4640      	mov	r0, r8
    4b08:	f7fd f8c4 	bl	1c94 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    4b0c:	68ab      	ldr	r3, [r5, #8]
    4b0e:	7b5b      	ldrb	r3, [r3, #13]
    4b10:	06db      	lsls	r3, r3, #27
    4b12:	d50e      	bpl.n	4b32 <z_tick_sleep+0xee>
    4b14:	4917      	ldr	r1, [pc, #92]	; (4b74 <z_tick_sleep+0x130>)
    4b16:	4a0b      	ldr	r2, [pc, #44]	; (4b44 <z_tick_sleep+0x100>)
    4b18:	480b      	ldr	r0, [pc, #44]	; (4b48 <z_tick_sleep+0x104>)
    4b1a:	f240 43d2 	movw	r3, #1234	; 0x4d2
    4b1e:	f000 fde0 	bl	56e2 <printk>
    4b22:	480a      	ldr	r0, [pc, #40]	; (4b4c <z_tick_sleep+0x108>)
    4b24:	f000 fddd 	bl	56e2 <printk>
    4b28:	4806      	ldr	r0, [pc, #24]	; (4b44 <z_tick_sleep+0x100>)
    4b2a:	f240 41d2 	movw	r1, #1234	; 0x4d2
    4b2e:	f000 fee3 	bl	58f8 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
    4b32:	f001 f890 	bl	5c56 <z_tick_get_32>
    4b36:	1a24      	subs	r4, r4, r0
    4b38:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    4b3c:	e79a      	b.n	4a74 <z_tick_sleep+0x30>
    4b3e:	bf00      	nop
    4b40:	000073e6 	.word	0x000073e6
    4b44:	00007389 	.word	0x00007389
    4b48:	00005fa5 	.word	0x00005fa5
    4b4c:	000073f8 	.word	0x000073f8
    4b50:	20000794 	.word	0x20000794
    4b54:	00006562 	.word	0x00006562
    4b58:	000065ad 	.word	0x000065ad
    4b5c:	000065c2 	.word	0x000065c2
    4b60:	20000760 	.word	0x20000760
    4b64:	20000790 	.word	0x20000790
    4b68:	00004175 	.word	0x00004175
    4b6c:	00006581 	.word	0x00006581
    4b70:	00006598 	.word	0x00006598
    4b74:	000074c5 	.word	0x000074c5

00004b78 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    4b78:	b538      	push	{r3, r4, r5, lr}
    4b7a:	4604      	mov	r4, r0
    4b7c:	460d      	mov	r5, r1
    4b7e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    4b82:	b173      	cbz	r3, 4ba2 <z_impl_k_sleep+0x2a>
    4b84:	4912      	ldr	r1, [pc, #72]	; (4bd0 <z_impl_k_sleep+0x58>)
    4b86:	4a13      	ldr	r2, [pc, #76]	; (4bd4 <z_impl_k_sleep+0x5c>)
    4b88:	4813      	ldr	r0, [pc, #76]	; (4bd8 <z_impl_k_sleep+0x60>)
    4b8a:	f240 43e1 	movw	r3, #1249	; 0x4e1
    4b8e:	f000 fda8 	bl	56e2 <printk>
    4b92:	4812      	ldr	r0, [pc, #72]	; (4bdc <z_impl_k_sleep+0x64>)
    4b94:	f000 fda5 	bl	56e2 <printk>
    4b98:	480e      	ldr	r0, [pc, #56]	; (4bd4 <z_impl_k_sleep+0x5c>)
    4b9a:	f240 41e1 	movw	r1, #1249	; 0x4e1
    4b9e:	f000 feab 	bl	58f8 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4ba2:	3501      	adds	r5, #1
    4ba4:	bf08      	it	eq
    4ba6:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    4baa:	d106      	bne.n	4bba <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    4bac:	4b0c      	ldr	r3, [pc, #48]	; (4be0 <z_impl_k_sleep+0x68>)
    4bae:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4bb0:	f7ff fc00 	bl	43b4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4bb4:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    4bb8:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    4bba:	4620      	mov	r0, r4
    4bbc:	f7ff ff42 	bl	4a44 <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
    4bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4bc4:	fb80 3403 	smull	r3, r4, r0, r3
    4bc8:	0bd8      	lsrs	r0, r3, #15
    4bca:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    4bce:	e7f3      	b.n	4bb8 <z_impl_k_sleep+0x40>
    4bd0:	000073e6 	.word	0x000073e6
    4bd4:	00007389 	.word	0x00007389
    4bd8:	00005fa5 	.word	0x00005fa5
    4bdc:	000073f8 	.word	0x000073f8
    4be0:	20000760 	.word	0x20000760

00004be4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4be4:	4b01      	ldr	r3, [pc, #4]	; (4bec <z_impl_k_current_get+0x8>)
    4be6:	6898      	ldr	r0, [r3, #8]
    4be8:	4770      	bx	lr
    4bea:	bf00      	nop
    4bec:	20000760 	.word	0x20000760

00004bf0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4bf0:	b538      	push	{r3, r4, r5, lr}
    4bf2:	4604      	mov	r4, r0
    4bf4:	f04f 0320 	mov.w	r3, #32
    4bf8:	f3ef 8511 	mrs	r5, BASEPRI
    4bfc:	f383 8811 	msr	BASEPRI, r3
    4c00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4c04:	4815      	ldr	r0, [pc, #84]	; (4c5c <z_impl_k_sem_give+0x6c>)
    4c06:	f000 f9bf 	bl	4f88 <z_spin_lock_valid>
    4c0a:	b968      	cbnz	r0, 4c28 <z_impl_k_sem_give+0x38>
    4c0c:	4a14      	ldr	r2, [pc, #80]	; (4c60 <z_impl_k_sem_give+0x70>)
    4c0e:	4915      	ldr	r1, [pc, #84]	; (4c64 <z_impl_k_sem_give+0x74>)
    4c10:	4815      	ldr	r0, [pc, #84]	; (4c68 <z_impl_k_sem_give+0x78>)
    4c12:	235c      	movs	r3, #92	; 0x5c
    4c14:	f000 fd65 	bl	56e2 <printk>
    4c18:	4910      	ldr	r1, [pc, #64]	; (4c5c <z_impl_k_sem_give+0x6c>)
    4c1a:	4814      	ldr	r0, [pc, #80]	; (4c6c <z_impl_k_sem_give+0x7c>)
    4c1c:	f000 fd61 	bl	56e2 <printk>
    4c20:	480f      	ldr	r0, [pc, #60]	; (4c60 <z_impl_k_sem_give+0x70>)
    4c22:	215c      	movs	r1, #92	; 0x5c
    4c24:	f000 fe68 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    4c28:	480c      	ldr	r0, [pc, #48]	; (4c5c <z_impl_k_sem_give+0x6c>)
    4c2a:	f000 f9cb 	bl	4fc4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    4c2e:	4620      	mov	r0, r4
    4c30:	f7ff fdc8 	bl	47c4 <z_unpend_first_thread>

	if (thread != NULL) {
    4c34:	b150      	cbz	r0, 4c4c <z_impl_k_sem_give+0x5c>
    4c36:	2200      	movs	r2, #0
    4c38:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4c3c:	f7ff f9fe 	bl	403c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4c40:	4629      	mov	r1, r5
    4c42:	4806      	ldr	r0, [pc, #24]	; (4c5c <z_impl_k_sem_give+0x6c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    4c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4c48:	f7ff b820 	b.w	3c8c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4c4c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4c50:	429a      	cmp	r2, r3
    4c52:	bf18      	it	ne
    4c54:	3301      	addne	r3, #1
    4c56:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    4c58:	e7f2      	b.n	4c40 <z_impl_k_sem_give+0x50>
    4c5a:	bf00      	nop
    4c5c:	200007a0 	.word	0x200007a0
    4c60:	00006562 	.word	0x00006562
    4c64:	000065ad 	.word	0x000065ad
    4c68:	00005fa5 	.word	0x00005fa5
    4c6c:	000065c2 	.word	0x000065c2

00004c70 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4c72:	4604      	mov	r4, r0
    4c74:	4616      	mov	r6, r2
    4c76:	461f      	mov	r7, r3
    4c78:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    4c7c:	b17b      	cbz	r3, 4c9e <z_impl_k_sem_take+0x2e>
    4c7e:	ea56 0307 	orrs.w	r3, r6, r7
    4c82:	d00c      	beq.n	4c9e <z_impl_k_sem_take+0x2e>
    4c84:	4935      	ldr	r1, [pc, #212]	; (4d5c <z_impl_k_sem_take+0xec>)
    4c86:	4a36      	ldr	r2, [pc, #216]	; (4d60 <z_impl_k_sem_take+0xf0>)
    4c88:	4836      	ldr	r0, [pc, #216]	; (4d64 <z_impl_k_sem_take+0xf4>)
    4c8a:	238c      	movs	r3, #140	; 0x8c
    4c8c:	f000 fd29 	bl	56e2 <printk>
    4c90:	4835      	ldr	r0, [pc, #212]	; (4d68 <z_impl_k_sem_take+0xf8>)
    4c92:	f000 fd26 	bl	56e2 <printk>
    4c96:	4832      	ldr	r0, [pc, #200]	; (4d60 <z_impl_k_sem_take+0xf0>)
    4c98:	218c      	movs	r1, #140	; 0x8c
    4c9a:	f000 fe2d 	bl	58f8 <assert_post_action>
    4c9e:	f04f 0320 	mov.w	r3, #32
    4ca2:	f3ef 8511 	mrs	r5, BASEPRI
    4ca6:	f383 8811 	msr	BASEPRI, r3
    4caa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4cae:	482f      	ldr	r0, [pc, #188]	; (4d6c <z_impl_k_sem_take+0xfc>)
    4cb0:	f000 f96a 	bl	4f88 <z_spin_lock_valid>
    4cb4:	b968      	cbnz	r0, 4cd2 <z_impl_k_sem_take+0x62>
    4cb6:	4a2e      	ldr	r2, [pc, #184]	; (4d70 <z_impl_k_sem_take+0x100>)
    4cb8:	492e      	ldr	r1, [pc, #184]	; (4d74 <z_impl_k_sem_take+0x104>)
    4cba:	482a      	ldr	r0, [pc, #168]	; (4d64 <z_impl_k_sem_take+0xf4>)
    4cbc:	235c      	movs	r3, #92	; 0x5c
    4cbe:	f000 fd10 	bl	56e2 <printk>
    4cc2:	492a      	ldr	r1, [pc, #168]	; (4d6c <z_impl_k_sem_take+0xfc>)
    4cc4:	482c      	ldr	r0, [pc, #176]	; (4d78 <z_impl_k_sem_take+0x108>)
    4cc6:	f000 fd0c 	bl	56e2 <printk>
    4cca:	4829      	ldr	r0, [pc, #164]	; (4d70 <z_impl_k_sem_take+0x100>)
    4ccc:	215c      	movs	r1, #92	; 0x5c
    4cce:	f000 fe13 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    4cd2:	4826      	ldr	r0, [pc, #152]	; (4d6c <z_impl_k_sem_take+0xfc>)
    4cd4:	f000 f976 	bl	4fc4 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    4cd8:	68a3      	ldr	r3, [r4, #8]
    4cda:	b1d3      	cbz	r3, 4d12 <z_impl_k_sem_take+0xa2>
		sem->count--;
    4cdc:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4cde:	4823      	ldr	r0, [pc, #140]	; (4d6c <z_impl_k_sem_take+0xfc>)
    4ce0:	60a3      	str	r3, [r4, #8]
    4ce2:	f000 f95f 	bl	4fa4 <z_spin_unlock_valid>
    4ce6:	b968      	cbnz	r0, 4d04 <z_impl_k_sem_take+0x94>
    4ce8:	4a21      	ldr	r2, [pc, #132]	; (4d70 <z_impl_k_sem_take+0x100>)
    4cea:	4924      	ldr	r1, [pc, #144]	; (4d7c <z_impl_k_sem_take+0x10c>)
    4cec:	481d      	ldr	r0, [pc, #116]	; (4d64 <z_impl_k_sem_take+0xf4>)
    4cee:	2384      	movs	r3, #132	; 0x84
    4cf0:	f000 fcf7 	bl	56e2 <printk>
    4cf4:	491d      	ldr	r1, [pc, #116]	; (4d6c <z_impl_k_sem_take+0xfc>)
    4cf6:	4822      	ldr	r0, [pc, #136]	; (4d80 <z_impl_k_sem_take+0x110>)
    4cf8:	f000 fcf3 	bl	56e2 <printk>
    4cfc:	481c      	ldr	r0, [pc, #112]	; (4d70 <z_impl_k_sem_take+0x100>)
    4cfe:	2184      	movs	r1, #132	; 0x84
    4d00:	f000 fdfa 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    4d04:	f385 8811 	msr	BASEPRI, r5
    4d08:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4d0c:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    4d0e:	b003      	add	sp, #12
    4d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4d12:	ea56 0307 	orrs.w	r3, r6, r7
    4d16:	d118      	bne.n	4d4a <z_impl_k_sem_take+0xda>
    4d18:	4814      	ldr	r0, [pc, #80]	; (4d6c <z_impl_k_sem_take+0xfc>)
    4d1a:	f000 f943 	bl	4fa4 <z_spin_unlock_valid>
    4d1e:	b968      	cbnz	r0, 4d3c <z_impl_k_sem_take+0xcc>
    4d20:	4a13      	ldr	r2, [pc, #76]	; (4d70 <z_impl_k_sem_take+0x100>)
    4d22:	4916      	ldr	r1, [pc, #88]	; (4d7c <z_impl_k_sem_take+0x10c>)
    4d24:	480f      	ldr	r0, [pc, #60]	; (4d64 <z_impl_k_sem_take+0xf4>)
    4d26:	2384      	movs	r3, #132	; 0x84
    4d28:	f000 fcdb 	bl	56e2 <printk>
    4d2c:	490f      	ldr	r1, [pc, #60]	; (4d6c <z_impl_k_sem_take+0xfc>)
    4d2e:	4814      	ldr	r0, [pc, #80]	; (4d80 <z_impl_k_sem_take+0x110>)
    4d30:	f000 fcd7 	bl	56e2 <printk>
    4d34:	480e      	ldr	r0, [pc, #56]	; (4d70 <z_impl_k_sem_take+0x100>)
    4d36:	2184      	movs	r1, #132	; 0x84
    4d38:	f000 fdde 	bl	58f8 <assert_post_action>
    4d3c:	f385 8811 	msr	BASEPRI, r5
    4d40:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4d44:	f06f 000f 	mvn.w	r0, #15
    4d48:	e7e1      	b.n	4d0e <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4d4a:	e9cd 6700 	strd	r6, r7, [sp]
    4d4e:	4622      	mov	r2, r4
    4d50:	4629      	mov	r1, r5
    4d52:	4806      	ldr	r0, [pc, #24]	; (4d6c <z_impl_k_sem_take+0xfc>)
    4d54:	f7ff fd06 	bl	4764 <z_pend_curr>
	return ret;
    4d58:	e7d9      	b.n	4d0e <z_impl_k_sem_take+0x9e>
    4d5a:	bf00      	nop
    4d5c:	00007525 	.word	0x00007525
    4d60:	00007505 	.word	0x00007505
    4d64:	00005fa5 	.word	0x00005fa5
    4d68:	000073f8 	.word	0x000073f8
    4d6c:	200007a0 	.word	0x200007a0
    4d70:	00006562 	.word	0x00006562
    4d74:	000065ad 	.word	0x000065ad
    4d78:	000065c2 	.word	0x000065c2
    4d7c:	00006581 	.word	0x00006581
    4d80:	00006598 	.word	0x00006598

00004d84 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    4d88:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    4d8a:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    4d8e:	2e0f      	cmp	r6, #15
{
    4d90:	4604      	mov	r4, r0
    4d92:	460f      	mov	r7, r1
    4d94:	4615      	mov	r5, r2
    4d96:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    4d98:	d13f      	bne.n	4e1a <z_setup_new_thread+0x96>
    4d9a:	4b2d      	ldr	r3, [pc, #180]	; (4e50 <z_setup_new_thread+0xcc>)
    4d9c:	4598      	cmp	r8, r3
    4d9e:	d140      	bne.n	4e22 <z_setup_new_thread+0x9e>
	sys_dlist_init(&w->waitq);
    4da0:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
    4da4:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    4da8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4daa:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4dac:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    4dae:	2304      	movs	r3, #4
    4db0:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4db2:	f025 0507 	bic.w	r5, r5, #7

#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    4db6:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    4dba:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4dc0:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4dc2:	f105 0a20 	add.w	sl, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34

	thread_base->prio = priority;
    4dc8:	73a6      	strb	r6, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4dca:	9301      	str	r3, [sp, #4]

	thread_base->sched_locked = 0U;
    4dcc:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4dd0:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    4dd2:	44ba      	add	sl, r7
	node->prev = NULL;
    4dd4:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->sched_locked = 0U;
    4dd8:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    4dda:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4dde:	4643      	mov	r3, r8
    4de0:	4652      	mov	r2, sl
    4de2:	4639      	mov	r1, r7
    4de4:	4620      	mov	r0, r4
    4de6:	f7fc ffc1 	bl	1d6c <arch_new_thread>
	new_thread->fn_abort = NULL;
    4dea:	e9c4 6617 	strd	r6, r6, [r4, #92]	; 0x5c
	if (name != NULL) {
    4dee:	f1b9 0f00 	cmp.w	r9, #0
    4df2:	d02a      	beq.n	4e4a <z_setup_new_thread+0xc6>
		strncpy(new_thread->name, name,
    4df4:	221f      	movs	r2, #31
    4df6:	4649      	mov	r1, r9
    4df8:	f104 0064 	add.w	r0, r4, #100	; 0x64
    4dfc:	f000 fe2e 	bl	5a5c <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    4e00:	f884 6083 	strb.w	r6, [r4, #131]	; 0x83
	if (!_current) {
    4e04:	4b13      	ldr	r3, [pc, #76]	; (4e54 <z_setup_new_thread+0xd0>)
    4e06:	689b      	ldr	r3, [r3, #8]
    4e08:	b10b      	cbz	r3, 4e0e <z_setup_new_thread+0x8a>
	new_thread->resource_pool = _current->resource_pool;
    4e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	return stack_ptr;
    4e0e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
    4e12:	4650      	mov	r0, sl
    4e14:	b004      	add	sp, #16
    4e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    4e1a:	f106 0310 	add.w	r3, r6, #16
    4e1e:	2b1e      	cmp	r3, #30
    4e20:	d9be      	bls.n	4da0 <z_setup_new_thread+0x1c>
    4e22:	4a0d      	ldr	r2, [pc, #52]	; (4e58 <z_setup_new_thread+0xd4>)
    4e24:	490d      	ldr	r1, [pc, #52]	; (4e5c <z_setup_new_thread+0xd8>)
    4e26:	480e      	ldr	r0, [pc, #56]	; (4e60 <z_setup_new_thread+0xdc>)
    4e28:	f240 2313 	movw	r3, #531	; 0x213
    4e2c:	f000 fc59 	bl	56e2 <printk>
    4e30:	4631      	mov	r1, r6
    4e32:	480c      	ldr	r0, [pc, #48]	; (4e64 <z_setup_new_thread+0xe0>)
    4e34:	f06f 030f 	mvn.w	r3, #15
    4e38:	220e      	movs	r2, #14
    4e3a:	f000 fc52 	bl	56e2 <printk>
    4e3e:	4806      	ldr	r0, [pc, #24]	; (4e58 <z_setup_new_thread+0xd4>)
    4e40:	f240 2113 	movw	r1, #531	; 0x213
    4e44:	f000 fd58 	bl	58f8 <assert_post_action>
    4e48:	e7aa      	b.n	4da0 <z_setup_new_thread+0x1c>
		new_thread->name[0] = '\0';
    4e4a:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
    4e4e:	e7d9      	b.n	4e04 <z_setup_new_thread+0x80>
    4e50:	000039b1 	.word	0x000039b1
    4e54:	20000760 	.word	0x20000760
    4e58:	00007572 	.word	0x00007572
    4e5c:	00007595 	.word	0x00007595
    4e60:	00005fa5 	.word	0x00005fa5
    4e64:	00007615 	.word	0x00007615

00004e68 <z_init_static_threads>:
{
    4e68:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    4e6c:	4f3f      	ldr	r7, [pc, #252]	; (4f6c <z_init_static_threads+0x104>)
    4e6e:	4d40      	ldr	r5, [pc, #256]	; (4f70 <z_init_static_threads+0x108>)
    4e70:	f8df 810c 	ldr.w	r8, [pc, #268]	; 4f80 <z_init_static_threads+0x118>
{
    4e74:	b086      	sub	sp, #24
    4e76:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    4e78:	42bd      	cmp	r5, r7
    4e7a:	d90e      	bls.n	4e9a <z_init_static_threads+0x32>
    4e7c:	493d      	ldr	r1, [pc, #244]	; (4f74 <z_init_static_threads+0x10c>)
    4e7e:	483e      	ldr	r0, [pc, #248]	; (4f78 <z_init_static_threads+0x110>)
    4e80:	f240 23e1 	movw	r3, #737	; 0x2e1
    4e84:	4642      	mov	r2, r8
    4e86:	f000 fc2c 	bl	56e2 <printk>
    4e8a:	483c      	ldr	r0, [pc, #240]	; (4f7c <z_init_static_threads+0x114>)
    4e8c:	f000 fc29 	bl	56e2 <printk>
    4e90:	f240 21e1 	movw	r1, #737	; 0x2e1
    4e94:	4640      	mov	r0, r8
    4e96:	f000 fd2f 	bl	58f8 <assert_post_action>
    4e9a:	42b5      	cmp	r5, r6
    4e9c:	f105 0430 	add.w	r4, r5, #48	; 0x30
    4ea0:	d31f      	bcc.n	4ee2 <z_init_static_threads+0x7a>
	k_sched_lock();
    4ea2:	f7fe ff37 	bl	3d14 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4ea6:	4c32      	ldr	r4, [pc, #200]	; (4f70 <z_init_static_threads+0x108>)
    4ea8:	4d35      	ldr	r5, [pc, #212]	; (4f80 <z_init_static_threads+0x118>)
    4eaa:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 4f74 <z_init_static_threads+0x10c>
    4eae:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 4f78 <z_init_static_threads+0x110>
    4eb2:	42b4      	cmp	r4, r6
    4eb4:	d90e      	bls.n	4ed4 <z_init_static_threads+0x6c>
    4eb6:	4641      	mov	r1, r8
    4eb8:	f44f 7340 	mov.w	r3, #768	; 0x300
    4ebc:	462a      	mov	r2, r5
    4ebe:	4648      	mov	r0, r9
    4ec0:	f000 fc0f 	bl	56e2 <printk>
    4ec4:	482d      	ldr	r0, [pc, #180]	; (4f7c <z_init_static_threads+0x114>)
    4ec6:	f000 fc0c 	bl	56e2 <printk>
    4eca:	f44f 7140 	mov.w	r1, #768	; 0x300
    4ece:	4628      	mov	r0, r5
    4ed0:	f000 fd12 	bl	58f8 <assert_post_action>
    4ed4:	42b4      	cmp	r4, r6
    4ed6:	d321      	bcc.n	4f1c <z_init_static_threads+0xb4>
}
    4ed8:	b006      	add	sp, #24
    4eda:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    4ede:	f7fe bfe3 	b.w	3ea8 <k_sched_unlock>
		z_setup_new_thread(
    4ee2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4ee6:	9305      	str	r3, [sp, #20]
    4ee8:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4eec:	9304      	str	r3, [sp, #16]
    4eee:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4ef2:	9303      	str	r3, [sp, #12]
    4ef4:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4ef8:	9302      	str	r3, [sp, #8]
    4efa:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4efe:	9301      	str	r3, [sp, #4]
    4f00:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4f04:	9300      	str	r3, [sp, #0]
    4f06:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4f0a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4f0e:	f7ff ff39 	bl	4d84 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4f12:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4f16:	65dd      	str	r5, [r3, #92]	; 0x5c
    4f18:	4625      	mov	r5, r4
    4f1a:	e7ad      	b.n	4e78 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4f1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4f1e:	1c4b      	adds	r3, r1, #1
    4f20:	d014      	beq.n	4f4c <z_init_static_threads+0xe4>
    4f22:	f240 32e7 	movw	r2, #999	; 0x3e7
    4f26:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    4f28:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    4f2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    4f30:	4693      	mov	fp, r2
    4f32:	469c      	mov	ip, r3
    4f34:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4f38:	459c      	cmp	ip, r3
    4f3a:	bf08      	it	eq
    4f3c:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    4f3e:	6827      	ldr	r7, [r4, #0]
    4f40:	4658      	mov	r0, fp
    4f42:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4f44:	d104      	bne.n	4f50 <z_init_static_threads+0xe8>
	z_sched_start(thread);
    4f46:	4638      	mov	r0, r7
    4f48:	f7ff f8c0 	bl	40cc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4f4c:	3430      	adds	r4, #48	; 0x30
    4f4e:	e7b0      	b.n	4eb2 <z_init_static_threads+0x4a>
    4f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4f54:	2300      	movs	r3, #0
    4f56:	f7fb f8c1 	bl	dc <__aeabi_uldivmod>
    4f5a:	4602      	mov	r2, r0
    4f5c:	460b      	mov	r3, r1
    4f5e:	f107 0018 	add.w	r0, r7, #24
    4f62:	4908      	ldr	r1, [pc, #32]	; (4f84 <z_init_static_threads+0x11c>)
    4f64:	f000 f882 	bl	506c <z_add_timeout>
    4f68:	e7f0      	b.n	4f4c <z_init_static_threads+0xe4>
    4f6a:	bf00      	nop
    4f6c:	20000164 	.word	0x20000164
    4f70:	20000074 	.word	0x20000074
    4f74:	00007646 	.word	0x00007646
    4f78:	00005fa5 	.word	0x00005fa5
    4f7c:	00007673 	.word	0x00007673
    4f80:	00007572 	.word	0x00007572
    4f84:	00004175 	.word	0x00004175

00004f88 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    4f88:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
    4f8a:	b138      	cbz	r0, 4f9c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
    4f8c:	4b04      	ldr	r3, [pc, #16]	; (4fa0 <z_spin_lock_valid+0x18>)
    4f8e:	7d1b      	ldrb	r3, [r3, #20]
    4f90:	f000 0003 	and.w	r0, r0, #3
    4f94:	1ac0      	subs	r0, r0, r3
    4f96:	bf18      	it	ne
    4f98:	2001      	movne	r0, #1
    4f9a:	4770      	bx	lr
			return false;
		}
	}
	return true;
    4f9c:	2001      	movs	r0, #1
}
    4f9e:	4770      	bx	lr
    4fa0:	20000760 	.word	0x20000760

00004fa4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4fa4:	4906      	ldr	r1, [pc, #24]	; (4fc0 <z_spin_unlock_valid+0x1c>)
{
    4fa6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4fa8:	688a      	ldr	r2, [r1, #8]
    4faa:	7d08      	ldrb	r0, [r1, #20]
    4fac:	6819      	ldr	r1, [r3, #0]
    4fae:	4302      	orrs	r2, r0
    4fb0:	4291      	cmp	r1, r2
    4fb2:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    4fb6:	bf04      	itt	eq
    4fb8:	6018      	streq	r0, [r3, #0]
	return true;
    4fba:	2001      	moveq	r0, #1
}
    4fbc:	4770      	bx	lr
    4fbe:	bf00      	nop
    4fc0:	20000760 	.word	0x20000760

00004fc4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    4fc4:	4a02      	ldr	r2, [pc, #8]	; (4fd0 <z_spin_lock_set_owner+0xc>)
    4fc6:	7d11      	ldrb	r1, [r2, #20]
    4fc8:	6893      	ldr	r3, [r2, #8]
    4fca:	430b      	orrs	r3, r1
    4fcc:	6003      	str	r3, [r0, #0]
}
    4fce:	4770      	bx	lr
    4fd0:	20000760 	.word	0x20000760

00004fd4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    4fd4:	4b03      	ldr	r3, [pc, #12]	; (4fe4 <elapsed+0x10>)
    4fd6:	681b      	ldr	r3, [r3, #0]
    4fd8:	b90b      	cbnz	r3, 4fde <elapsed+0xa>
    4fda:	f7fc bd89 	b.w	1af0 <z_clock_elapsed>
}
    4fde:	2000      	movs	r0, #0
    4fe0:	4770      	bx	lr
    4fe2:	bf00      	nop
    4fe4:	200007a4 	.word	0x200007a4

00004fe8 <remove_timeout>:
{
    4fe8:	b530      	push	{r4, r5, lr}
    4fea:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4fec:	b168      	cbz	r0, 500a <remove_timeout+0x22>
    4fee:	4a0a      	ldr	r2, [pc, #40]	; (5018 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    4ff0:	6852      	ldr	r2, [r2, #4]
    4ff2:	4290      	cmp	r0, r2
    4ff4:	d009      	beq.n	500a <remove_timeout+0x22>
	if (next(t) != NULL) {
    4ff6:	b143      	cbz	r3, 500a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4ff8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4ffc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5000:	1912      	adds	r2, r2, r4
    5002:	eb45 0101 	adc.w	r1, r5, r1
    5006:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    500a:	6842      	ldr	r2, [r0, #4]
    500c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    500e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5010:	2300      	movs	r3, #0
	node->prev = NULL;
    5012:	e9c0 3300 	strd	r3, r3, [r0]
}
    5016:	bd30      	pop	{r4, r5, pc}
    5018:	20000014 	.word	0x20000014

0000501c <next_timeout>:

static int32_t next_timeout(void)
{
    501c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    501e:	4b11      	ldr	r3, [pc, #68]	; (5064 <next_timeout+0x48>)
    5020:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5022:	429c      	cmp	r4, r3
    5024:	bf08      	it	eq
    5026:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5028:	f7ff ffd4 	bl	4fd4 <elapsed>
    502c:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    502e:	b1ac      	cbz	r4, 505c <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    5030:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5034:	1b40      	subs	r0, r0, r5
    5036:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    503a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    503e:	f171 0300 	sbcs.w	r3, r1, #0
    5042:	da0b      	bge.n	505c <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    5044:	2800      	cmp	r0, #0
    5046:	f171 0300 	sbcs.w	r3, r1, #0
    504a:	da00      	bge.n	504e <next_timeout+0x32>
    504c:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    504e:	4b06      	ldr	r3, [pc, #24]	; (5068 <next_timeout+0x4c>)
    5050:	691b      	ldr	r3, [r3, #16]
    5052:	b113      	cbz	r3, 505a <next_timeout+0x3e>
    5054:	4298      	cmp	r0, r3
    5056:	bfa8      	it	ge
    5058:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    505a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    505c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5060:	e7f5      	b.n	504e <next_timeout+0x32>
    5062:	bf00      	nop
    5064:	20000014 	.word	0x20000014
    5068:	20000760 	.word	0x20000760

0000506c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    506c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5070:	9101      	str	r1, [sp, #4]
    5072:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5074:	1c4b      	adds	r3, r1, #1
    5076:	bf08      	it	eq
    5078:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    507c:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    507e:	f000 80a3 	beq.w	51c8 <z_add_timeout+0x15c>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    5082:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    5084:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
    5088:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    508c:	f04f 3bff 	mov.w	fp, #4294967295
    5090:	ebb3 0804 	subs.w	r8, r3, r4
    5094:	eb6b 0905 	sbc.w	r9, fp, r5
    5098:	f1b8 0f00 	cmp.w	r8, #0
    509c:	f179 0300 	sbcs.w	r3, r9, #0
    50a0:	db0f      	blt.n	50c2 <z_add_timeout+0x56>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    50a2:	f7ff ff97 	bl	4fd4 <elapsed>
    50a6:	4a4f      	ldr	r2, [pc, #316]	; (51e4 <z_add_timeout+0x178>)
    50a8:	e9d2 1c00 	ldrd	r1, ip, [r2]
    50ac:	f06f 0301 	mvn.w	r3, #1
    50b0:	1a5b      	subs	r3, r3, r1
    50b2:	eb6b 020c 	sbc.w	r2, fp, ip
    50b6:	1b1e      	subs	r6, r3, r4
    50b8:	eb62 0705 	sbc.w	r7, r2, r5
    50bc:	1a34      	subs	r4, r6, r0
    50be:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    50c2:	f8da 3000 	ldr.w	r3, [sl]
    50c6:	b163      	cbz	r3, 50e2 <z_add_timeout+0x76>
    50c8:	4947      	ldr	r1, [pc, #284]	; (51e8 <z_add_timeout+0x17c>)
    50ca:	4a48      	ldr	r2, [pc, #288]	; (51ec <z_add_timeout+0x180>)
    50cc:	4848      	ldr	r0, [pc, #288]	; (51f0 <z_add_timeout+0x184>)
    50ce:	2368      	movs	r3, #104	; 0x68
    50d0:	f000 fb07 	bl	56e2 <printk>
    50d4:	4847      	ldr	r0, [pc, #284]	; (51f4 <z_add_timeout+0x188>)
    50d6:	f000 fb04 	bl	56e2 <printk>
    50da:	4844      	ldr	r0, [pc, #272]	; (51ec <z_add_timeout+0x180>)
    50dc:	2168      	movs	r1, #104	; 0x68
    50de:	f000 fc0b 	bl	58f8 <assert_post_action>
	to->fn = fn;
    50e2:	9b01      	ldr	r3, [sp, #4]
    50e4:	f8ca 3008 	str.w	r3, [sl, #8]
	ticks = MAX(1, ticks);
    50e8:	2c01      	cmp	r4, #1
    50ea:	f175 0300 	sbcs.w	r3, r5, #0
    50ee:	bfbc      	itt	lt
    50f0:	2401      	movlt	r4, #1
    50f2:	2500      	movlt	r5, #0
	__asm__ volatile(
    50f4:	f04f 0320 	mov.w	r3, #32
    50f8:	f3ef 8611 	mrs	r6, BASEPRI
    50fc:	f383 8811 	msr	BASEPRI, r3
    5100:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5104:	483c      	ldr	r0, [pc, #240]	; (51f8 <z_add_timeout+0x18c>)
    5106:	f7ff ff3f 	bl	4f88 <z_spin_lock_valid>
    510a:	b968      	cbnz	r0, 5128 <z_add_timeout+0xbc>
    510c:	4a3b      	ldr	r2, [pc, #236]	; (51fc <z_add_timeout+0x190>)
    510e:	493c      	ldr	r1, [pc, #240]	; (5200 <z_add_timeout+0x194>)
    5110:	4837      	ldr	r0, [pc, #220]	; (51f0 <z_add_timeout+0x184>)
    5112:	235c      	movs	r3, #92	; 0x5c
    5114:	f000 fae5 	bl	56e2 <printk>
    5118:	4937      	ldr	r1, [pc, #220]	; (51f8 <z_add_timeout+0x18c>)
    511a:	483a      	ldr	r0, [pc, #232]	; (5204 <z_add_timeout+0x198>)
    511c:	f000 fae1 	bl	56e2 <printk>
    5120:	4836      	ldr	r0, [pc, #216]	; (51fc <z_add_timeout+0x190>)
    5122:	215c      	movs	r1, #92	; 0x5c
    5124:	f000 fbe8 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    5128:	4833      	ldr	r0, [pc, #204]	; (51f8 <z_add_timeout+0x18c>)
    512a:	f7ff ff4b 	bl	4fc4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    512e:	f7ff ff51 	bl	4fd4 <elapsed>
	return list->head == list;
    5132:	4b35      	ldr	r3, [pc, #212]	; (5208 <z_add_timeout+0x19c>)
    5134:	681a      	ldr	r2, [r3, #0]
    5136:	1824      	adds	r4, r4, r0
    5138:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    513c:	429a      	cmp	r2, r3
    513e:	e9ca 4504 	strd	r4, r5, [sl, #16]
    5142:	d001      	beq.n	5148 <z_add_timeout+0xdc>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5144:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    5146:	b952      	cbnz	r2, 515e <z_add_timeout+0xf2>
	node->prev = list->tail;
    5148:	685a      	ldr	r2, [r3, #4]
    514a:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    514e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    5150:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
    5154:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    5158:	f8c3 a004 	str.w	sl, [r3, #4]
}
    515c:	e014      	b.n	5188 <z_add_timeout+0x11c>
			if (t->dticks > to->dticks) {
    515e:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    5162:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    5166:	4544      	cmp	r4, r8
    5168:	eb75 0109 	sbcs.w	r1, r5, r9
    516c:	da2f      	bge.n	51ce <z_add_timeout+0x162>
				t->dticks -= to->dticks;
    516e:	ebb8 0004 	subs.w	r0, r8, r4
    5172:	eb69 0105 	sbc.w	r1, r9, r5
    5176:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    517a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    517c:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    5180:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    5184:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    5188:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    518a:	429a      	cmp	r2, r3
    518c:	d006      	beq.n	519c <z_add_timeout+0x130>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    518e:	4592      	cmp	sl, r2
    5190:	d104      	bne.n	519c <z_add_timeout+0x130>
			z_clock_set_timeout(next_timeout(), false);
    5192:	f7ff ff43 	bl	501c <next_timeout>
    5196:	2100      	movs	r1, #0
    5198:	f7fc fc48 	bl	1a2c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    519c:	4816      	ldr	r0, [pc, #88]	; (51f8 <z_add_timeout+0x18c>)
    519e:	f7ff ff01 	bl	4fa4 <z_spin_unlock_valid>
    51a2:	b968      	cbnz	r0, 51c0 <z_add_timeout+0x154>
    51a4:	4a15      	ldr	r2, [pc, #84]	; (51fc <z_add_timeout+0x190>)
    51a6:	4919      	ldr	r1, [pc, #100]	; (520c <z_add_timeout+0x1a0>)
    51a8:	4811      	ldr	r0, [pc, #68]	; (51f0 <z_add_timeout+0x184>)
    51aa:	2384      	movs	r3, #132	; 0x84
    51ac:	f000 fa99 	bl	56e2 <printk>
    51b0:	4911      	ldr	r1, [pc, #68]	; (51f8 <z_add_timeout+0x18c>)
    51b2:	4817      	ldr	r0, [pc, #92]	; (5210 <z_add_timeout+0x1a4>)
    51b4:	f000 fa95 	bl	56e2 <printk>
    51b8:	4810      	ldr	r0, [pc, #64]	; (51fc <z_add_timeout+0x190>)
    51ba:	2184      	movs	r1, #132	; 0x84
    51bc:	f000 fb9c 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    51c0:	f386 8811 	msr	BASEPRI, r6
    51c4:	f3bf 8f6f 	isb	sy
		}
	}
}
    51c8:	b003      	add	sp, #12
    51ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    51ce:	ebb4 0008 	subs.w	r0, r4, r8
    51d2:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    51d6:	42ba      	cmp	r2, r7
    51d8:	e9ca 0104 	strd	r0, r1, [sl, #16]
    51dc:	d0b4      	beq.n	5148 <z_add_timeout+0xdc>
    51de:	6812      	ldr	r2, [r2, #0]
    51e0:	e7b1      	b.n	5146 <z_add_timeout+0xda>
    51e2:	bf00      	nop
    51e4:	200005c8 	.word	0x200005c8
    51e8:	000076b6 	.word	0x000076b6
    51ec:	00007692 	.word	0x00007692
    51f0:	00005fa5 	.word	0x00005fa5
    51f4:	000073f8 	.word	0x000073f8
    51f8:	200007a8 	.word	0x200007a8
    51fc:	00006562 	.word	0x00006562
    5200:	000065ad 	.word	0x000065ad
    5204:	000065c2 	.word	0x000065c2
    5208:	20000014 	.word	0x20000014
    520c:	00006581 	.word	0x00006581
    5210:	00006598 	.word	0x00006598

00005214 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    5214:	b538      	push	{r3, r4, r5, lr}
    5216:	4604      	mov	r4, r0
	__asm__ volatile(
    5218:	f04f 0320 	mov.w	r3, #32
    521c:	f3ef 8511 	mrs	r5, BASEPRI
    5220:	f383 8811 	msr	BASEPRI, r3
    5224:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5228:	481a      	ldr	r0, [pc, #104]	; (5294 <z_abort_timeout+0x80>)
    522a:	f7ff fead 	bl	4f88 <z_spin_lock_valid>
    522e:	b968      	cbnz	r0, 524c <z_abort_timeout+0x38>
    5230:	4a19      	ldr	r2, [pc, #100]	; (5298 <z_abort_timeout+0x84>)
    5232:	491a      	ldr	r1, [pc, #104]	; (529c <z_abort_timeout+0x88>)
    5234:	481a      	ldr	r0, [pc, #104]	; (52a0 <z_abort_timeout+0x8c>)
    5236:	235c      	movs	r3, #92	; 0x5c
    5238:	f000 fa53 	bl	56e2 <printk>
    523c:	4915      	ldr	r1, [pc, #84]	; (5294 <z_abort_timeout+0x80>)
    523e:	4819      	ldr	r0, [pc, #100]	; (52a4 <z_abort_timeout+0x90>)
    5240:	f000 fa4f 	bl	56e2 <printk>
    5244:	4814      	ldr	r0, [pc, #80]	; (5298 <z_abort_timeout+0x84>)
    5246:	215c      	movs	r1, #92	; 0x5c
    5248:	f000 fb56 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    524c:	4811      	ldr	r0, [pc, #68]	; (5294 <z_abort_timeout+0x80>)
    524e:	f7ff feb9 	bl	4fc4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    5252:	6823      	ldr	r3, [r4, #0]
    5254:	b1db      	cbz	r3, 528e <z_abort_timeout+0x7a>
			remove_timeout(to);
    5256:	4620      	mov	r0, r4
    5258:	f7ff fec6 	bl	4fe8 <remove_timeout>
			ret = 0;
    525c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    525e:	480d      	ldr	r0, [pc, #52]	; (5294 <z_abort_timeout+0x80>)
    5260:	f7ff fea0 	bl	4fa4 <z_spin_unlock_valid>
    5264:	b968      	cbnz	r0, 5282 <z_abort_timeout+0x6e>
    5266:	4a0c      	ldr	r2, [pc, #48]	; (5298 <z_abort_timeout+0x84>)
    5268:	490f      	ldr	r1, [pc, #60]	; (52a8 <z_abort_timeout+0x94>)
    526a:	480d      	ldr	r0, [pc, #52]	; (52a0 <z_abort_timeout+0x8c>)
    526c:	2384      	movs	r3, #132	; 0x84
    526e:	f000 fa38 	bl	56e2 <printk>
    5272:	4908      	ldr	r1, [pc, #32]	; (5294 <z_abort_timeout+0x80>)
    5274:	480d      	ldr	r0, [pc, #52]	; (52ac <z_abort_timeout+0x98>)
    5276:	f000 fa34 	bl	56e2 <printk>
    527a:	4807      	ldr	r0, [pc, #28]	; (5298 <z_abort_timeout+0x84>)
    527c:	2184      	movs	r1, #132	; 0x84
    527e:	f000 fb3b 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    5282:	f385 8811 	msr	BASEPRI, r5
    5286:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    528a:	4620      	mov	r0, r4
    528c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    528e:	f06f 0415 	mvn.w	r4, #21
    5292:	e7e4      	b.n	525e <z_abort_timeout+0x4a>
    5294:	200007a8 	.word	0x200007a8
    5298:	00006562 	.word	0x00006562
    529c:	000065ad 	.word	0x000065ad
    52a0:	00005fa5 	.word	0x00005fa5
    52a4:	000065c2 	.word	0x000065c2
    52a8:	00006581 	.word	0x00006581
    52ac:	00006598 	.word	0x00006598

000052b0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    52b0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    52b2:	f04f 0320 	mov.w	r3, #32
    52b6:	f3ef 8511 	mrs	r5, BASEPRI
    52ba:	f383 8811 	msr	BASEPRI, r3
    52be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    52c2:	4818      	ldr	r0, [pc, #96]	; (5324 <z_get_next_timeout_expiry+0x74>)
    52c4:	f7ff fe60 	bl	4f88 <z_spin_lock_valid>
    52c8:	b968      	cbnz	r0, 52e6 <z_get_next_timeout_expiry+0x36>
    52ca:	4a17      	ldr	r2, [pc, #92]	; (5328 <z_get_next_timeout_expiry+0x78>)
    52cc:	4917      	ldr	r1, [pc, #92]	; (532c <z_get_next_timeout_expiry+0x7c>)
    52ce:	4818      	ldr	r0, [pc, #96]	; (5330 <z_get_next_timeout_expiry+0x80>)
    52d0:	235c      	movs	r3, #92	; 0x5c
    52d2:	f000 fa06 	bl	56e2 <printk>
    52d6:	4913      	ldr	r1, [pc, #76]	; (5324 <z_get_next_timeout_expiry+0x74>)
    52d8:	4816      	ldr	r0, [pc, #88]	; (5334 <z_get_next_timeout_expiry+0x84>)
    52da:	f000 fa02 	bl	56e2 <printk>
    52de:	4812      	ldr	r0, [pc, #72]	; (5328 <z_get_next_timeout_expiry+0x78>)
    52e0:	215c      	movs	r1, #92	; 0x5c
    52e2:	f000 fb09 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    52e6:	480f      	ldr	r0, [pc, #60]	; (5324 <z_get_next_timeout_expiry+0x74>)
    52e8:	f7ff fe6c 	bl	4fc4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    52ec:	f7ff fe96 	bl	501c <next_timeout>
    52f0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    52f2:	480c      	ldr	r0, [pc, #48]	; (5324 <z_get_next_timeout_expiry+0x74>)
    52f4:	f7ff fe56 	bl	4fa4 <z_spin_unlock_valid>
    52f8:	b968      	cbnz	r0, 5316 <z_get_next_timeout_expiry+0x66>
    52fa:	4a0b      	ldr	r2, [pc, #44]	; (5328 <z_get_next_timeout_expiry+0x78>)
    52fc:	490e      	ldr	r1, [pc, #56]	; (5338 <z_get_next_timeout_expiry+0x88>)
    52fe:	480c      	ldr	r0, [pc, #48]	; (5330 <z_get_next_timeout_expiry+0x80>)
    5300:	2384      	movs	r3, #132	; 0x84
    5302:	f000 f9ee 	bl	56e2 <printk>
    5306:	4907      	ldr	r1, [pc, #28]	; (5324 <z_get_next_timeout_expiry+0x74>)
    5308:	480c      	ldr	r0, [pc, #48]	; (533c <z_get_next_timeout_expiry+0x8c>)
    530a:	f000 f9ea 	bl	56e2 <printk>
    530e:	4806      	ldr	r0, [pc, #24]	; (5328 <z_get_next_timeout_expiry+0x78>)
    5310:	2184      	movs	r1, #132	; 0x84
    5312:	f000 faf1 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    5316:	f385 8811 	msr	BASEPRI, r5
    531a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    531e:	4620      	mov	r0, r4
    5320:	bd38      	pop	{r3, r4, r5, pc}
    5322:	bf00      	nop
    5324:	200007a8 	.word	0x200007a8
    5328:	00006562 	.word	0x00006562
    532c:	000065ad 	.word	0x000065ad
    5330:	00005fa5 	.word	0x00005fa5
    5334:	000065c2 	.word	0x000065c2
    5338:	00006581 	.word	0x00006581
    533c:	00006598 	.word	0x00006598

00005340 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    5340:	b570      	push	{r4, r5, r6, lr}
    5342:	4604      	mov	r4, r0
    5344:	460d      	mov	r5, r1
	__asm__ volatile(
    5346:	f04f 0320 	mov.w	r3, #32
    534a:	f3ef 8611 	mrs	r6, BASEPRI
    534e:	f383 8811 	msr	BASEPRI, r3
    5352:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5356:	481b      	ldr	r0, [pc, #108]	; (53c4 <z_set_timeout_expiry+0x84>)
    5358:	f7ff fe16 	bl	4f88 <z_spin_lock_valid>
    535c:	b968      	cbnz	r0, 537a <z_set_timeout_expiry+0x3a>
    535e:	4a1a      	ldr	r2, [pc, #104]	; (53c8 <z_set_timeout_expiry+0x88>)
    5360:	491a      	ldr	r1, [pc, #104]	; (53cc <z_set_timeout_expiry+0x8c>)
    5362:	481b      	ldr	r0, [pc, #108]	; (53d0 <z_set_timeout_expiry+0x90>)
    5364:	235c      	movs	r3, #92	; 0x5c
    5366:	f000 f9bc 	bl	56e2 <printk>
    536a:	4916      	ldr	r1, [pc, #88]	; (53c4 <z_set_timeout_expiry+0x84>)
    536c:	4819      	ldr	r0, [pc, #100]	; (53d4 <z_set_timeout_expiry+0x94>)
    536e:	f000 f9b8 	bl	56e2 <printk>
    5372:	4815      	ldr	r0, [pc, #84]	; (53c8 <z_set_timeout_expiry+0x88>)
    5374:	215c      	movs	r1, #92	; 0x5c
    5376:	f000 fabf 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    537a:	4812      	ldr	r0, [pc, #72]	; (53c4 <z_set_timeout_expiry+0x84>)
    537c:	f7ff fe22 	bl	4fc4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    5380:	f7ff fe4c 	bl	501c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    5384:	2801      	cmp	r0, #1
    5386:	dd05      	ble.n	5394 <z_set_timeout_expiry+0x54>
    5388:	42a0      	cmp	r0, r4
    538a:	dd03      	ble.n	5394 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, is_idle);
    538c:	4629      	mov	r1, r5
    538e:	4620      	mov	r0, r4
    5390:	f7fc fb4c 	bl	1a2c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5394:	480b      	ldr	r0, [pc, #44]	; (53c4 <z_set_timeout_expiry+0x84>)
    5396:	f7ff fe05 	bl	4fa4 <z_spin_unlock_valid>
    539a:	b968      	cbnz	r0, 53b8 <z_set_timeout_expiry+0x78>
    539c:	4a0a      	ldr	r2, [pc, #40]	; (53c8 <z_set_timeout_expiry+0x88>)
    539e:	490e      	ldr	r1, [pc, #56]	; (53d8 <z_set_timeout_expiry+0x98>)
    53a0:	480b      	ldr	r0, [pc, #44]	; (53d0 <z_set_timeout_expiry+0x90>)
    53a2:	2384      	movs	r3, #132	; 0x84
    53a4:	f000 f99d 	bl	56e2 <printk>
    53a8:	4906      	ldr	r1, [pc, #24]	; (53c4 <z_set_timeout_expiry+0x84>)
    53aa:	480c      	ldr	r0, [pc, #48]	; (53dc <z_set_timeout_expiry+0x9c>)
    53ac:	f000 f999 	bl	56e2 <printk>
    53b0:	4805      	ldr	r0, [pc, #20]	; (53c8 <z_set_timeout_expiry+0x88>)
    53b2:	2184      	movs	r1, #132	; 0x84
    53b4:	f000 faa0 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    53b8:	f386 8811 	msr	BASEPRI, r6
    53bc:	f3bf 8f6f 	isb	sy
		}
	}
}
    53c0:	bd70      	pop	{r4, r5, r6, pc}
    53c2:	bf00      	nop
    53c4:	200007a8 	.word	0x200007a8
    53c8:	00006562 	.word	0x00006562
    53cc:	000065ad 	.word	0x000065ad
    53d0:	00005fa5 	.word	0x00005fa5
    53d4:	000065c2 	.word	0x000065c2
    53d8:	00006581 	.word	0x00006581
    53dc:	00006598 	.word	0x00006598

000053e0 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
    53e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53e4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    53e6:	f7fe ff6d 	bl	42c4 <z_time_slice>
	__asm__ volatile(
    53ea:	f04f 0320 	mov.w	r3, #32
    53ee:	f3ef 8711 	mrs	r7, BASEPRI
    53f2:	f383 8811 	msr	BASEPRI, r3
    53f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    53fa:	4855      	ldr	r0, [pc, #340]	; (5550 <z_clock_announce+0x170>)
    53fc:	f7ff fdc4 	bl	4f88 <z_spin_lock_valid>
    5400:	b968      	cbnz	r0, 541e <z_clock_announce+0x3e>
    5402:	4a54      	ldr	r2, [pc, #336]	; (5554 <z_clock_announce+0x174>)
    5404:	4954      	ldr	r1, [pc, #336]	; (5558 <z_clock_announce+0x178>)
    5406:	4855      	ldr	r0, [pc, #340]	; (555c <z_clock_announce+0x17c>)
    5408:	235c      	movs	r3, #92	; 0x5c
    540a:	f000 f96a 	bl	56e2 <printk>
    540e:	4950      	ldr	r1, [pc, #320]	; (5550 <z_clock_announce+0x170>)
    5410:	4853      	ldr	r0, [pc, #332]	; (5560 <z_clock_announce+0x180>)
    5412:	f000 f966 	bl	56e2 <printk>
    5416:	484f      	ldr	r0, [pc, #316]	; (5554 <z_clock_announce+0x174>)
    5418:	215c      	movs	r1, #92	; 0x5c
    541a:	f000 fa6d 	bl	58f8 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    541e:	4d51      	ldr	r5, [pc, #324]	; (5564 <z_clock_announce+0x184>)
    5420:	4e51      	ldr	r6, [pc, #324]	; (5568 <z_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    5422:	484b      	ldr	r0, [pc, #300]	; (5550 <z_clock_announce+0x170>)
	return list->head == list;
    5424:	f8df a14c 	ldr.w	sl, [pc, #332]	; 5574 <z_clock_announce+0x194>
    5428:	f7ff fdcc 	bl	4fc4 <z_spin_lock_set_owner>
    542c:	46b3      	mov	fp, r6
    542e:	602c      	str	r4, [r5, #0]
    5430:	e9d6 2300 	ldrd	r2, r3, [r6]
    5434:	f8d5 c000 	ldr.w	ip, [r5]
    5438:	f8da 4000 	ldr.w	r4, [sl]
    543c:	e9cd 2300 	strd	r2, r3, [sp]
    5440:	4662      	mov	r2, ip
    5442:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5444:	4554      	cmp	r4, sl
    5446:	46e0      	mov	r8, ip
    5448:	4699      	mov	r9, r3
    544a:	d00c      	beq.n	5466 <z_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    544c:	b15c      	cbz	r4, 5466 <z_clock_announce+0x86>
    544e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    5452:	458c      	cmp	ip, r1
    5454:	eb79 0302 	sbcs.w	r3, r9, r2
    5458:	da2e      	bge.n	54b8 <z_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    545a:	ebb1 000c 	subs.w	r0, r1, ip
    545e:	eb62 0109 	sbc.w	r1, r2, r9
    5462:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    5466:	9a00      	ldr	r2, [sp, #0]
    5468:	9901      	ldr	r1, [sp, #4]
    546a:	eb18 0202 	adds.w	r2, r8, r2
    546e:	464b      	mov	r3, r9
    5470:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    5474:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    5476:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    547a:	602c      	str	r4, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    547c:	f7ff fdce 	bl	501c <next_timeout>
    5480:	4621      	mov	r1, r4
    5482:	f7fc fad3 	bl	1a2c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5486:	4832      	ldr	r0, [pc, #200]	; (5550 <z_clock_announce+0x170>)
    5488:	f7ff fd8c 	bl	4fa4 <z_spin_unlock_valid>
    548c:	b968      	cbnz	r0, 54aa <z_clock_announce+0xca>
    548e:	4a31      	ldr	r2, [pc, #196]	; (5554 <z_clock_announce+0x174>)
    5490:	4936      	ldr	r1, [pc, #216]	; (556c <z_clock_announce+0x18c>)
    5492:	4832      	ldr	r0, [pc, #200]	; (555c <z_clock_announce+0x17c>)
    5494:	2384      	movs	r3, #132	; 0x84
    5496:	f000 f924 	bl	56e2 <printk>
    549a:	492d      	ldr	r1, [pc, #180]	; (5550 <z_clock_announce+0x170>)
    549c:	4834      	ldr	r0, [pc, #208]	; (5570 <z_clock_announce+0x190>)
    549e:	f000 f920 	bl	56e2 <printk>
    54a2:	482c      	ldr	r0, [pc, #176]	; (5554 <z_clock_announce+0x174>)
    54a4:	2184      	movs	r1, #132	; 0x84
    54a6:	f000 fa27 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    54aa:	f387 8811 	msr	BASEPRI, r7
    54ae:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    54b2:	b003      	add	sp, #12
    54b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    54b8:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    54bc:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    54c0:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    54c4:	f04f 0200 	mov.w	r2, #0
    54c8:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    54cc:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    54d0:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    54d2:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    54d6:	4620      	mov	r0, r4
		curr_tick += dt;
    54d8:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    54dc:	f7ff fd84 	bl	4fe8 <remove_timeout>
    54e0:	481b      	ldr	r0, [pc, #108]	; (5550 <z_clock_announce+0x170>)
    54e2:	f7ff fd5f 	bl	4fa4 <z_spin_unlock_valid>
    54e6:	b968      	cbnz	r0, 5504 <z_clock_announce+0x124>
    54e8:	4a1a      	ldr	r2, [pc, #104]	; (5554 <z_clock_announce+0x174>)
    54ea:	4920      	ldr	r1, [pc, #128]	; (556c <z_clock_announce+0x18c>)
    54ec:	481b      	ldr	r0, [pc, #108]	; (555c <z_clock_announce+0x17c>)
    54ee:	2384      	movs	r3, #132	; 0x84
    54f0:	f000 f8f7 	bl	56e2 <printk>
    54f4:	4916      	ldr	r1, [pc, #88]	; (5550 <z_clock_announce+0x170>)
    54f6:	481e      	ldr	r0, [pc, #120]	; (5570 <z_clock_announce+0x190>)
    54f8:	f000 f8f3 	bl	56e2 <printk>
    54fc:	4815      	ldr	r0, [pc, #84]	; (5554 <z_clock_announce+0x174>)
    54fe:	2184      	movs	r1, #132	; 0x84
    5500:	f000 f9fa 	bl	58f8 <assert_post_action>
    5504:	f387 8811 	msr	BASEPRI, r7
    5508:	f3bf 8f6f 	isb	sy
		t->fn(t);
    550c:	68a3      	ldr	r3, [r4, #8]
    550e:	4620      	mov	r0, r4
    5510:	4798      	blx	r3
	__asm__ volatile(
    5512:	f04f 0320 	mov.w	r3, #32
    5516:	f3ef 8711 	mrs	r7, BASEPRI
    551a:	f383 8811 	msr	BASEPRI, r3
    551e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5522:	480b      	ldr	r0, [pc, #44]	; (5550 <z_clock_announce+0x170>)
    5524:	f7ff fd30 	bl	4f88 <z_spin_lock_valid>
    5528:	b968      	cbnz	r0, 5546 <z_clock_announce+0x166>
    552a:	4a0a      	ldr	r2, [pc, #40]	; (5554 <z_clock_announce+0x174>)
    552c:	490a      	ldr	r1, [pc, #40]	; (5558 <z_clock_announce+0x178>)
    552e:	480b      	ldr	r0, [pc, #44]	; (555c <z_clock_announce+0x17c>)
    5530:	235c      	movs	r3, #92	; 0x5c
    5532:	f000 f8d6 	bl	56e2 <printk>
    5536:	4906      	ldr	r1, [pc, #24]	; (5550 <z_clock_announce+0x170>)
    5538:	4809      	ldr	r0, [pc, #36]	; (5560 <z_clock_announce+0x180>)
    553a:	f000 f8d2 	bl	56e2 <printk>
    553e:	4805      	ldr	r0, [pc, #20]	; (5554 <z_clock_announce+0x174>)
    5540:	215c      	movs	r1, #92	; 0x5c
    5542:	f000 f9d9 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    5546:	4802      	ldr	r0, [pc, #8]	; (5550 <z_clock_announce+0x170>)
    5548:	f7ff fd3c 	bl	4fc4 <z_spin_lock_set_owner>
	return k;
    554c:	e770      	b.n	5430 <z_clock_announce+0x50>
    554e:	bf00      	nop
    5550:	200007a8 	.word	0x200007a8
    5554:	00006562 	.word	0x00006562
    5558:	000065ad 	.word	0x000065ad
    555c:	00005fa5 	.word	0x00005fa5
    5560:	000065c2 	.word	0x000065c2
    5564:	200007a4 	.word	0x200007a4
    5568:	200005c8 	.word	0x200005c8
    556c:	00006581 	.word	0x00006581
    5570:	00006598 	.word	0x00006598
    5574:	20000014 	.word	0x20000014

00005578 <z_tick_get>:

int64_t z_tick_get(void)
{
    5578:	b570      	push	{r4, r5, r6, lr}
    557a:	f04f 0320 	mov.w	r3, #32
    557e:	f3ef 8611 	mrs	r6, BASEPRI
    5582:	f383 8811 	msr	BASEPRI, r3
    5586:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    558a:	481b      	ldr	r0, [pc, #108]	; (55f8 <z_tick_get+0x80>)
    558c:	f7ff fcfc 	bl	4f88 <z_spin_lock_valid>
    5590:	b968      	cbnz	r0, 55ae <z_tick_get+0x36>
    5592:	4a1a      	ldr	r2, [pc, #104]	; (55fc <z_tick_get+0x84>)
    5594:	491a      	ldr	r1, [pc, #104]	; (5600 <z_tick_get+0x88>)
    5596:	481b      	ldr	r0, [pc, #108]	; (5604 <z_tick_get+0x8c>)
    5598:	235c      	movs	r3, #92	; 0x5c
    559a:	f000 f8a2 	bl	56e2 <printk>
    559e:	4916      	ldr	r1, [pc, #88]	; (55f8 <z_tick_get+0x80>)
    55a0:	4819      	ldr	r0, [pc, #100]	; (5608 <z_tick_get+0x90>)
    55a2:	f000 f89e 	bl	56e2 <printk>
    55a6:	4815      	ldr	r0, [pc, #84]	; (55fc <z_tick_get+0x84>)
    55a8:	215c      	movs	r1, #92	; 0x5c
    55aa:	f000 f9a5 	bl	58f8 <assert_post_action>
	z_spin_lock_set_owner(l);
    55ae:	4812      	ldr	r0, [pc, #72]	; (55f8 <z_tick_get+0x80>)
    55b0:	f7ff fd08 	bl	4fc4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    55b4:	f7fc fa9c 	bl	1af0 <z_clock_elapsed>
    55b8:	4b14      	ldr	r3, [pc, #80]	; (560c <z_tick_get+0x94>)
    55ba:	e9d3 4500 	ldrd	r4, r5, [r3]
    55be:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    55c0:	480d      	ldr	r0, [pc, #52]	; (55f8 <z_tick_get+0x80>)
    55c2:	f145 0500 	adc.w	r5, r5, #0
    55c6:	f7ff fced 	bl	4fa4 <z_spin_unlock_valid>
    55ca:	b968      	cbnz	r0, 55e8 <z_tick_get+0x70>
    55cc:	4a0b      	ldr	r2, [pc, #44]	; (55fc <z_tick_get+0x84>)
    55ce:	4910      	ldr	r1, [pc, #64]	; (5610 <z_tick_get+0x98>)
    55d0:	480c      	ldr	r0, [pc, #48]	; (5604 <z_tick_get+0x8c>)
    55d2:	2384      	movs	r3, #132	; 0x84
    55d4:	f000 f885 	bl	56e2 <printk>
    55d8:	4907      	ldr	r1, [pc, #28]	; (55f8 <z_tick_get+0x80>)
    55da:	480e      	ldr	r0, [pc, #56]	; (5614 <z_tick_get+0x9c>)
    55dc:	f000 f881 	bl	56e2 <printk>
    55e0:	4806      	ldr	r0, [pc, #24]	; (55fc <z_tick_get+0x84>)
    55e2:	2184      	movs	r1, #132	; 0x84
    55e4:	f000 f988 	bl	58f8 <assert_post_action>
	__asm__ volatile(
    55e8:	f386 8811 	msr	BASEPRI, r6
    55ec:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    55f0:	4620      	mov	r0, r4
    55f2:	4629      	mov	r1, r5
    55f4:	bd70      	pop	{r4, r5, r6, pc}
    55f6:	bf00      	nop
    55f8:	200007a8 	.word	0x200007a8
    55fc:	00006562 	.word	0x00006562
    5600:	000065ad 	.word	0x000065ad
    5604:	00005fa5 	.word	0x00005fa5
    5608:	000065c2 	.word	0x000065c2
    560c:	200005c8 	.word	0x200005c8
    5610:	00006581 	.word	0x00006581
    5614:	00006598 	.word	0x00006598

00005618 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    5618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    561a:	4d0f      	ldr	r5, [pc, #60]	; (5658 <statics_init+0x40>)
    561c:	4c0f      	ldr	r4, [pc, #60]	; (565c <statics_init+0x44>)
    561e:	4e10      	ldr	r6, [pc, #64]	; (5660 <statics_init+0x48>)
    5620:	462f      	mov	r7, r5
    5622:	42ac      	cmp	r4, r5
    5624:	d90c      	bls.n	5640 <statics_init+0x28>
    5626:	490f      	ldr	r1, [pc, #60]	; (5664 <statics_init+0x4c>)
    5628:	480f      	ldr	r0, [pc, #60]	; (5668 <statics_init+0x50>)
    562a:	2315      	movs	r3, #21
    562c:	4632      	mov	r2, r6
    562e:	f000 f858 	bl	56e2 <printk>
    5632:	480e      	ldr	r0, [pc, #56]	; (566c <statics_init+0x54>)
    5634:	f000 f855 	bl	56e2 <printk>
    5638:	2115      	movs	r1, #21
    563a:	4630      	mov	r0, r6
    563c:	f000 f95c 	bl	58f8 <assert_post_action>
    5640:	42bc      	cmp	r4, r7
    5642:	d301      	bcc.n	5648 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    5644:	2000      	movs	r0, #0
    5646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    5648:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    564c:	4620      	mov	r0, r4
    564e:	f000 fb06 	bl	5c5e <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    5652:	3418      	adds	r4, #24
    5654:	e7e5      	b.n	5622 <statics_init+0xa>
    5656:	bf00      	nop
    5658:	20000164 	.word	0x20000164
    565c:	20000164 	.word	0x20000164
    5660:	000076d6 	.word	0x000076d6
    5664:	000076f8 	.word	0x000076f8
    5668:	00005fa5 	.word	0x00005fa5
    566c:	00007673 	.word	0x00007673

00005670 <k_msleep>:
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
    5670:	b538      	push	{r3, r4, r5, lr}
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    5672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    5676:	f240 34e7 	movw	r4, #999	; 0x3e7
    567a:	2500      	movs	r5, #0
    567c:	fbc1 4500 	smlal	r4, r5, r1, r0
    5680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5684:	2300      	movs	r3, #0
    5686:	4620      	mov	r0, r4
    5688:	4629      	mov	r1, r5
    568a:	f7fa fd27 	bl	dc <__aeabi_uldivmod>
	return k_sleep(Z_TIMEOUT_MS(ms));
}
    568e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    5692:	f7ff ba71 	b.w	4b78 <z_impl_k_sleep>

00005696 <sys_notify_validate>:
	if (notify == NULL) {
    5696:	4603      	mov	r3, r0
    5698:	b158      	cbz	r0, 56b2 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    569a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    569c:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    56a0:	2a01      	cmp	r2, #1
    56a2:	d003      	beq.n	56ac <sys_notify_validate+0x16>
    56a4:	2a03      	cmp	r2, #3
    56a6:	d104      	bne.n	56b2 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    56a8:	6802      	ldr	r2, [r0, #0]
    56aa:	b112      	cbz	r2, 56b2 <sys_notify_validate+0x1c>
		notify->result = 0;
    56ac:	2000      	movs	r0, #0
    56ae:	6098      	str	r0, [r3, #8]
    56b0:	4770      	bx	lr
		return -EINVAL;
    56b2:	f06f 0015 	mvn.w	r0, #21
}
    56b6:	4770      	bx	lr

000056b8 <arch_printk_char_out>:
}
    56b8:	2000      	movs	r0, #0
    56ba:	4770      	bx	lr

000056bc <str_out>:
{
    56bc:	b530      	push	{r4, r5, lr}
    56be:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    56c0:	680c      	ldr	r4, [r1, #0]
    56c2:	1c55      	adds	r5, r2, #1
    56c4:	b114      	cbz	r4, 56cc <str_out+0x10>
    56c6:	684b      	ldr	r3, [r1, #4]
    56c8:	4293      	cmp	r3, r2
    56ca:	dc01      	bgt.n	56d0 <str_out+0x14>
		ctx->count++;
    56cc:	608d      	str	r5, [r1, #8]
}
    56ce:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    56d0:	3b01      	subs	r3, #1
    56d2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    56d4:	bf08      	it	eq
    56d6:	2200      	moveq	r2, #0
    56d8:	608d      	str	r5, [r1, #8]
    56da:	bf0c      	ite	eq
    56dc:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    56de:	54a0      	strbne	r0, [r4, r2]
    56e0:	e7f5      	b.n	56ce <str_out+0x12>

000056e2 <printk>:
{
    56e2:	b40f      	push	{r0, r1, r2, r3}
    56e4:	b507      	push	{r0, r1, r2, lr}
    56e6:	a904      	add	r1, sp, #16
    56e8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    56ec:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    56ee:	f7fb fae5 	bl	cbc <vprintk>
}
    56f2:	b003      	add	sp, #12
    56f4:	f85d eb04 	ldr.w	lr, [sp], #4
    56f8:	b004      	add	sp, #16
    56fa:	4770      	bx	lr

000056fc <snprintk>:
{
    56fc:	b40c      	push	{r2, r3}
    56fe:	b507      	push	{r0, r1, r2, lr}
    5700:	ab04      	add	r3, sp, #16
    5702:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    5706:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    5708:	f7fb fae6 	bl	cd8 <vsnprintk>
}
    570c:	b003      	add	sp, #12
    570e:	f85d eb04 	ldr.w	lr, [sp], #4
    5712:	b002      	add	sp, #8
    5714:	4770      	bx	lr

00005716 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5716:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    5718:	f013 0307 	ands.w	r3, r3, #7
    571c:	d105      	bne.n	572a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    571e:	6803      	ldr	r3, [r0, #0]
    5720:	2b00      	cmp	r3, #0
		evt = EVT_START;
    5722:	bf0c      	ite	eq
    5724:	2000      	moveq	r0, #0
    5726:	2003      	movne	r0, #3
    5728:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    572a:	2b02      	cmp	r3, #2
    572c:	d105      	bne.n	573a <process_recheck+0x24>
		   && (mgr->refs == 0)) {
    572e:	8bc3      	ldrh	r3, [r0, #30]
    5730:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    5732:	bf14      	ite	ne
    5734:	2000      	movne	r0, #0
    5736:	2004      	moveq	r0, #4
    5738:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    573a:	2b01      	cmp	r3, #1
    573c:	d105      	bne.n	574a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    573e:	6803      	ldr	r3, [r0, #0]
    5740:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    5742:	bf0c      	ite	eq
    5744:	2000      	moveq	r0, #0
    5746:	2005      	movne	r0, #5
    5748:	4770      	bx	lr
	int evt = EVT_NOP;
    574a:	2000      	movs	r0, #0
}
    574c:	4770      	bx	lr

0000574e <notify_one>:
{
    574e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5752:	460d      	mov	r5, r1
    5754:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5756:	4619      	mov	r1, r3
    5758:	1d28      	adds	r0, r5, #4
{
    575a:	4690      	mov	r8, r2
    575c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    575e:	f7fb f905 	bl	96c <sys_notify_finalize>
	if (cb) {
    5762:	4604      	mov	r4, r0
    5764:	b138      	cbz	r0, 5776 <notify_one+0x28>
		cb(mgr, cli, state, res);
    5766:	4633      	mov	r3, r6
    5768:	4642      	mov	r2, r8
    576a:	4629      	mov	r1, r5
    576c:	4638      	mov	r0, r7
    576e:	46a4      	mov	ip, r4
}
    5770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5774:	4760      	bx	ip
}
    5776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000577a <validate_args>:
{
    577a:	b510      	push	{r4, lr}
    577c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    577e:	b140      	cbz	r0, 5792 <validate_args+0x18>
    5780:	b139      	cbz	r1, 5792 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    5782:	1d08      	adds	r0, r1, #4
    5784:	f7ff ff87 	bl	5696 <sys_notify_validate>
	if ((rv == 0)
    5788:	b928      	cbnz	r0, 5796 <validate_args+0x1c>
	    && ((cli->notify.flags
    578a:	68a3      	ldr	r3, [r4, #8]
    578c:	f033 0303 	bics.w	r3, r3, #3
    5790:	d001      	beq.n	5796 <validate_args+0x1c>
		rv = -EINVAL;
    5792:	f06f 0015 	mvn.w	r0, #21
}
    5796:	bd10      	pop	{r4, pc}

00005798 <onoff_manager_init>:
{
    5798:	b538      	push	{r3, r4, r5, lr}
    579a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    579c:	4605      	mov	r5, r0
    579e:	b158      	cbz	r0, 57b8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    57a0:	b151      	cbz	r1, 57b8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    57a2:	680b      	ldr	r3, [r1, #0]
    57a4:	b143      	cbz	r3, 57b8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    57a6:	684b      	ldr	r3, [r1, #4]
    57a8:	b133      	cbz	r3, 57b8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    57aa:	2220      	movs	r2, #32
    57ac:	2100      	movs	r1, #0
    57ae:	f000 f99f 	bl	5af0 <memset>
    57b2:	612c      	str	r4, [r5, #16]
	return 0;
    57b4:	2000      	movs	r0, #0
}
    57b6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    57b8:	f06f 0015 	mvn.w	r0, #21
    57bc:	e7fb      	b.n	57b6 <onoff_manager_init+0x1e>

000057be <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    57be:	4604      	mov	r4, r0
    57c0:	b508      	push	{r3, lr}
    57c2:	4608      	mov	r0, r1
    57c4:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    57c6:	461a      	mov	r2, r3
    57c8:	47a0      	blx	r4
	return z_impl_k_current_get();
    57ca:	f7ff fa0b 	bl	4be4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    57ce:	f7fc fe27 	bl	2420 <z_impl_k_thread_abort>

000057d2 <chunk_field>:
	if (big_heap(h)) {
    57d2:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    57d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    57d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    57dc:	bf2c      	ite	cs
    57de:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
    57e2:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
    57e6:	4770      	bx	lr

000057e8 <chunk_set>:
	void *cmem = &buf[c];
    57e8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    57ec:	6880      	ldr	r0, [r0, #8]
    57ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
    57f2:	bf2c      	ite	cs
    57f4:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
    57f8:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
    57fc:	4770      	bx	lr

000057fe <chunk_size>:
{
    57fe:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    5800:	2201      	movs	r2, #1
    5802:	f7ff ffe6 	bl	57d2 <chunk_field>
}
    5806:	0840      	lsrs	r0, r0, #1
    5808:	bd08      	pop	{r3, pc}

0000580a <set_chunk_used>:
	if (big_heap(h)) {
    580a:	6883      	ldr	r3, [r0, #8]
    580c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
    5810:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    5814:	d308      	bcc.n	5828 <set_chunk_used+0x1e>
		if (used) {
    5816:	684b      	ldr	r3, [r1, #4]
    5818:	b11a      	cbz	r2, 5822 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
    581a:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
    581e:	604b      	str	r3, [r1, #4]
    5820:	4770      	bx	lr
    5822:	f023 0301 	bic.w	r3, r3, #1
    5826:	e7fa      	b.n	581e <set_chunk_used+0x14>
		if (used) {
    5828:	884b      	ldrh	r3, [r1, #2]
    582a:	b11a      	cbz	r2, 5834 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
    582c:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    5830:	804b      	strh	r3, [r1, #2]
}
    5832:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    5834:	f023 0301 	bic.w	r3, r3, #1
    5838:	e7fa      	b.n	5830 <set_chunk_used+0x26>

0000583a <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    583a:	0053      	lsls	r3, r2, #1
    583c:	2201      	movs	r2, #1
    583e:	f7ff bfd3 	b.w	57e8 <chunk_set>

00005842 <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
    5842:	6883      	ldr	r3, [r0, #8]
    5844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5848:	bf2c      	ite	cs
    584a:	2008      	movcs	r0, #8
    584c:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    584e:	3107      	adds	r1, #7
    5850:	4408      	add	r0, r1
}
    5852:	08c0      	lsrs	r0, r0, #3
    5854:	4770      	bx	lr

00005856 <bucket_idx>:
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
    5856:	460a      	mov	r2, r1
    5858:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
    585a:	2101      	movs	r1, #1
    585c:	f7ff fff1 	bl	5842 <bytes_to_chunksz>
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    5860:	3201      	adds	r2, #1
    5862:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
    5864:	fab2 f082 	clz	r0, r2
}
    5868:	f1c0 001f 	rsb	r0, r0, #31
    586c:	bd08      	pop	{r3, pc}

0000586e <free_list_add>:
{
    586e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5872:	4604      	mov	r4, r0
    5874:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
    5876:	f7ff ffc2 	bl	57fe <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
    587a:	68a3      	ldr	r3, [r4, #8]
    587c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5880:	4601      	mov	r1, r0
    5882:	d301      	bcc.n	5888 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    5884:	2801      	cmp	r0, #1
    5886:	d035      	beq.n	58f4 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    5888:	4620      	mov	r0, r4
    588a:	f7ff ffe4 	bl	5856 <bucket_idx>
	if (b->next == 0) {
    588e:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    5892:	6916      	ldr	r6, [r2, #16]
    5894:	b99e      	cbnz	r6, 58be <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    5896:	2301      	movs	r3, #1
    5898:	fa03 f000 	lsl.w	r0, r3, r0
    589c:	68e3      	ldr	r3, [r4, #12]
    589e:	4303      	orrs	r3, r0
    58a0:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    58a2:	4629      	mov	r1, r5
		b->next = c;
    58a4:	6115      	str	r5, [r2, #16]
    58a6:	462b      	mov	r3, r5
    58a8:	2202      	movs	r2, #2
    58aa:	4620      	mov	r0, r4
    58ac:	f7ff ff9c 	bl	57e8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    58b0:	2203      	movs	r2, #3
    58b2:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    58b4:	4620      	mov	r0, r4
}
    58b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    58ba:	f7ff bf95 	b.w	57e8 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    58be:	2202      	movs	r2, #2
    58c0:	4631      	mov	r1, r6
    58c2:	4620      	mov	r0, r4
    58c4:	f7ff ff85 	bl	57d2 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
    58c8:	2202      	movs	r2, #2
    58ca:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
    58cc:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    58ce:	4629      	mov	r1, r5
    58d0:	4620      	mov	r0, r4
    58d2:	f7ff ff89 	bl	57e8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    58d6:	4633      	mov	r3, r6
    58d8:	2203      	movs	r2, #3
    58da:	4629      	mov	r1, r5
    58dc:	4620      	mov	r0, r4
    58de:	f7ff ff83 	bl	57e8 <chunk_set>
    58e2:	2203      	movs	r2, #3
    58e4:	4639      	mov	r1, r7
    58e6:	462b      	mov	r3, r5
    58e8:	4620      	mov	r0, r4
    58ea:	f7ff ff7d 	bl	57e8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    58ee:	2202      	movs	r2, #2
    58f0:	4631      	mov	r1, r6
    58f2:	e7df      	b.n	58b4 <free_list_add+0x46>
    58f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000058f8 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    58f8:	4040      	eors	r0, r0
    58fa:	f380 8811 	msr	BASEPRI, r0
    58fe:	f04f 0004 	mov.w	r0, #4
    5902:	df02      	svc	2
}
    5904:	4770      	bx	lr

00005906 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5906:	4770      	bx	lr

00005908 <set_starting_state>:
{
    5908:	b510      	push	{r4, lr}
	__asm__ volatile(
    590a:	f04f 0320 	mov.w	r3, #32
    590e:	f3ef 8211 	mrs	r2, BASEPRI
    5912:	f383 8811 	msr	BASEPRI, r3
    5916:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    591a:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    591c:	f003 0407 	and.w	r4, r3, #7
    5920:	2c01      	cmp	r4, #1
    5922:	d106      	bne.n	5932 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5924:	6001      	str	r1, [r0, #0]
	int err = 0;
    5926:	2000      	movs	r0, #0
	__asm__ volatile(
    5928:	f382 8811 	msr	BASEPRI, r2
    592c:	f3bf 8f6f 	isb	sy
}
    5930:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5932:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    5936:	428b      	cmp	r3, r1
		err = -EBUSY;
    5938:	bf14      	ite	ne
    593a:	f04f 30ff 	movne.w	r0, #4294967295
    593e:	f06f 000f 	mvneq.w	r0, #15
    5942:	e7f1      	b.n	5928 <set_starting_state+0x20>

00005944 <set_on_state>:
	__asm__ volatile(
    5944:	f04f 0320 	mov.w	r3, #32
    5948:	f3ef 8211 	mrs	r2, BASEPRI
    594c:	f383 8811 	msr	BASEPRI, r3
    5950:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5954:	6803      	ldr	r3, [r0, #0]
    5956:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    595a:	f043 0302 	orr.w	r3, r3, #2
    595e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5960:	f382 8811 	msr	BASEPRI, r2
    5964:	f3bf 8f6f 	isb	sy
}
    5968:	4770      	bx	lr

0000596a <onoff_started_callback>:
	return &data->mgr[type];
    596a:	68c0      	ldr	r0, [r0, #12]
    596c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    596e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    5972:	2100      	movs	r1, #0
    5974:	4710      	bx	r2

00005976 <api_stop>:
	return stop(dev, subsys, CTX_API);
    5976:	2280      	movs	r2, #128	; 0x80
    5978:	f7fb bd90 	b.w	149c <stop>

0000597c <blocking_start_callback>:
{
    597c:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    597e:	f7ff b937 	b.w	4bf0 <z_impl_k_sem_give>

00005982 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5982:	2000      	movs	r0, #0
    5984:	f7fd bd98 	b.w	34b8 <nrfx_clock_stop>

00005988 <api_start>:
{
    5988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    598a:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
    598c:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    598e:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
    5990:	434c      	muls	r4, r1
{
    5992:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    5994:	f104 0048 	add.w	r0, r4, #72	; 0x48
    5998:	2180      	movs	r1, #128	; 0x80
    599a:	4428      	add	r0, r5
{
    599c:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
    599e:	f7ff ffb3 	bl	5908 <set_starting_state>
	if (err < 0) {
    59a2:	2800      	cmp	r0, #0
    59a4:	db08      	blt.n	59b8 <api_start+0x30>
	subdata->cb = data->cb;
    59a6:	4425      	add	r5, r4
    59a8:	687b      	ldr	r3, [r7, #4]
    59aa:	642b      	str	r3, [r5, #64]	; 0x40
	subdata->user_data = data->user_data;
    59ac:	68bb      	ldr	r3, [r7, #8]
    59ae:	646b      	str	r3, [r5, #68]	; 0x44
	 get_sub_config(dev, type)->start();
    59b0:	6873      	ldr	r3, [r6, #4]
    59b2:	591b      	ldr	r3, [r3, r4]
    59b4:	4798      	blx	r3
	return 0;
    59b6:	2000      	movs	r0, #0
}
    59b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000059ba <wdt_nrf_disable>:
}
    59ba:	f04f 30ff 	mov.w	r0, #4294967295
    59be:	4770      	bx	lr

000059c0 <wdt_nrf_feed>:
{
    59c0:	b508      	push	{r3, lr}
	if (channel_id > get_dev_data(dev)->m_allocated_channels) {
    59c2:	68c3      	ldr	r3, [r0, #12]
    59c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    59c8:	428b      	cmp	r3, r1
    59ca:	db05      	blt.n	59d8 <wdt_nrf_feed+0x18>
	nrfx_wdt_channel_feed(&get_dev_config(dev)->wdt,
    59cc:	6840      	ldr	r0, [r0, #4]
    59ce:	b2c9      	uxtb	r1, r1
    59d0:	f7fd feec 	bl	37ac <nrfx_wdt_channel_feed>
	return 0;
    59d4:	2000      	movs	r0, #0
}
    59d6:	bd08      	pop	{r3, pc}
		return -EINVAL;
    59d8:	f06f 0015 	mvn.w	r0, #21
    59dc:	e7fb      	b.n	59d6 <wdt_nrf_feed+0x16>

000059de <wdt_nrf_setup>:
{
    59de:	b538      	push	{r3, r4, r5, lr}
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
    59e0:	6844      	ldr	r4, [r0, #4]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
    59e2:	f001 0301 	and.w	r3, r1, #1
    59e6:	f1c3 0309 	rsb	r3, r3, #9
	if (options & WDT_OPT_PAUSE_HALTED_BY_DBG) {
    59ea:	078a      	lsls	r2, r1, #30
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
    59ec:	6825      	ldr	r5, [r4, #0]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
    59ee:	b2db      	uxtb	r3, r3
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_HALT;
    59f0:	bf48      	it	mi
    59f2:	f003 03f7 	andmi.w	r3, r3, #247	; 0xf7
    p_reg->CONFIG = behaviour;
    59f6:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
    59fa:	68c3      	ldr	r3, [r0, #12]
    59fc:	6a19      	ldr	r1, [r3, #32]
			   / 1000));
    59fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5a02:	2300      	movs	r3, #0
    5a04:	03c8      	lsls	r0, r1, #15
    5a06:	0c49      	lsrs	r1, r1, #17
    5a08:	f7fa fb68 	bl	dc <__aeabi_uldivmod>
    p_reg->CRV = reload_value;
    5a0c:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
	nrfx_wdt_enable(&get_dev_config(dev)->wdt);
    5a10:	4620      	mov	r0, r4
    5a12:	f7fd fe4d 	bl	36b0 <nrfx_wdt_enable>
}
    5a16:	2000      	movs	r0, #0
    5a18:	bd38      	pop	{r3, r4, r5, pc}

00005a1a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    5a1a:	4770      	bx	lr

00005a1c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    5a1c:	f7fc b90a 	b.w	1c34 <_DoInit>

00005a20 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    5a20:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    5a22:	f7ff fffb 	bl	5a1c <SEGGER_RTT_Init>

	return 0;
}
    5a26:	2000      	movs	r0, #0
    5a28:	bd08      	pop	{r3, pc}

00005a2a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5a2a:	2100      	movs	r1, #0
    5a2c:	2001      	movs	r0, #1
    5a2e:	f7fc b9ef 	b.w	1e10 <z_arm_fatal_error>

00005a32 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5a32:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5a34:	6800      	ldr	r0, [r0, #0]
    5a36:	f7fc b9eb 	b.w	1e10 <z_arm_fatal_error>

00005a3a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    5a3a:	b508      	push	{r3, lr}
	handler();
    5a3c:	f7fc fa92 	bl	1f64 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5a40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5a44:	f7fc bad4 	b.w	1ff0 <z_arm_exc_exit>

00005a48 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    5a48:	3901      	subs	r1, #1
    5a4a:	4603      	mov	r3, r0
    5a4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5a50:	b90a      	cbnz	r2, 5a56 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    5a52:	701a      	strb	r2, [r3, #0]

	return dest;
}
    5a54:	4770      	bx	lr
		*d = *s;
    5a56:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    5a5a:	e7f7      	b.n	5a4c <strcpy+0x4>

00005a5c <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    5a5c:	b570      	push	{r4, r5, r6, lr}
    5a5e:	3901      	subs	r1, #1
    5a60:	4605      	mov	r5, r0
    5a62:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    5a64:	b142      	cbz	r2, 5a78 <strncpy+0x1c>
    5a66:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    5a6a:	1e56      	subs	r6, r2, #1
    5a6c:	b92b      	cbnz	r3, 5a7a <strncpy+0x1e>
    5a6e:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    5a70:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    5a74:	42a2      	cmp	r2, r4
    5a76:	d1fb      	bne.n	5a70 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    5a78:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    5a7a:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    5a7e:	4632      	mov	r2, r6
    5a80:	e7ef      	b.n	5a62 <strncpy+0x6>

00005a82 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    5a82:	1e43      	subs	r3, r0, #1
    5a84:	3901      	subs	r1, #1
    5a86:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    5a8a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    5a8e:	4282      	cmp	r2, r0
    5a90:	d101      	bne.n	5a96 <strcmp+0x14>
    5a92:	2a00      	cmp	r2, #0
    5a94:	d1f7      	bne.n	5a86 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    5a96:	1a10      	subs	r0, r2, r0
    5a98:	4770      	bx	lr

00005a9a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    5a9a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    5a9c:	ea81 0400 	eor.w	r4, r1, r0
    5aa0:	07a5      	lsls	r5, r4, #30
    5aa2:	4603      	mov	r3, r0
    5aa4:	d00b      	beq.n	5abe <memcpy+0x24>
    5aa6:	3b01      	subs	r3, #1
    5aa8:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    5aaa:	4291      	cmp	r1, r2
    5aac:	d11b      	bne.n	5ae6 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    5ab0:	2a00      	cmp	r2, #0
    5ab2:	d0fc      	beq.n	5aae <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    5ab4:	f811 4b01 	ldrb.w	r4, [r1], #1
    5ab8:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    5abc:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    5abe:	079c      	lsls	r4, r3, #30
    5ac0:	d1f6      	bne.n	5ab0 <memcpy+0x16>
    5ac2:	f022 0403 	bic.w	r4, r2, #3
    5ac6:	1f1d      	subs	r5, r3, #4
    5ac8:	0896      	lsrs	r6, r2, #2
    5aca:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    5acc:	42b9      	cmp	r1, r7
    5ace:	d105      	bne.n	5adc <memcpy+0x42>
    5ad0:	f06f 0503 	mvn.w	r5, #3
    5ad4:	fb05 2206 	mla	r2, r5, r6, r2
    5ad8:	4423      	add	r3, r4
    5ada:	e7e4      	b.n	5aa6 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    5adc:	f851 cb04 	ldr.w	ip, [r1], #4
    5ae0:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    5ae4:	e7f2      	b.n	5acc <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    5ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
    5aea:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5aee:	e7dc      	b.n	5aaa <memcpy+0x10>

00005af0 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    5af0:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5af2:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    5af4:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5af6:	079c      	lsls	r4, r3, #30
    5af8:	d111      	bne.n	5b1e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    5afa:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    5afe:	f022 0603 	bic.w	r6, r2, #3
    5b02:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    5b06:	441e      	add	r6, r3
    5b08:	0894      	lsrs	r4, r2, #2
    5b0a:	42b3      	cmp	r3, r6
    5b0c:	d10d      	bne.n	5b2a <memset+0x3a>
    5b0e:	f06f 0503 	mvn.w	r5, #3
    5b12:	fb05 2204 	mla	r2, r5, r4, r2
    5b16:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    5b18:	4293      	cmp	r3, r2
    5b1a:	d109      	bne.n	5b30 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5b1c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    5b1e:	2a00      	cmp	r2, #0
    5b20:	d0fc      	beq.n	5b1c <memset+0x2c>
		*(d_byte++) = c_byte;
    5b22:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5b26:	3a01      	subs	r2, #1
    5b28:	e7e5      	b.n	5af6 <memset+0x6>
		*(d_word++) = c_word;
    5b2a:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    5b2e:	e7ec      	b.n	5b0a <memset+0x1a>
		*(d_byte++) = c_byte;
    5b30:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5b34:	e7f0      	b.n	5b18 <memset+0x28>

00005b36 <_stdout_hook_default>:
}
    5b36:	f04f 30ff 	mov.w	r0, #4294967295
    5b3a:	4770      	bx	lr

00005b3c <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    5b3c:	f7fd baa6 	b.w	308c <SystemInit>

00005b40 <main>:
#endif
#endif /* CONFIG_USERSPACE */

	z_init_mock();
//	test_main();
	end_report();
    5b40:	f7fc be0c 	b.w	275c <end_report>

00005b44 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5b44:	6843      	ldr	r3, [r0, #4]
    5b46:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5b48:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    5b4c:	600b      	str	r3, [r1, #0]
}
    5b4e:	2000      	movs	r0, #0
    5b50:	4770      	bx	lr

00005b52 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5b52:	6843      	ldr	r3, [r0, #4]
    5b54:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    5b56:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    5b5a:	4042      	eors	r2, r0
    5b5c:	400a      	ands	r2, r1
    5b5e:	4042      	eors	r2, r0
    p_reg->OUT = value;
    5b60:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    5b64:	2000      	movs	r0, #0
    5b66:	4770      	bx	lr

00005b68 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5b68:	6843      	ldr	r3, [r0, #4]
    5b6a:	685b      	ldr	r3, [r3, #4]
}
    5b6c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    5b6e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    5b72:	4770      	bx	lr

00005b74 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5b74:	6843      	ldr	r3, [r0, #4]
    5b76:	685b      	ldr	r3, [r3, #4]
}
    5b78:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    5b7a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    5b7e:	4770      	bx	lr

00005b80 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5b80:	6843      	ldr	r3, [r0, #4]
    5b82:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5b84:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    5b88:	404b      	eors	r3, r1
    p_reg->OUT = value;
    5b8a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    5b8e:	2000      	movs	r0, #0
    5b90:	4770      	bx	lr

00005b92 <nrf_gpio_cfg_sense_set>:
{
    5b92:	b513      	push	{r0, r1, r4, lr}
    5b94:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5b96:	a801      	add	r0, sp, #4
{
    5b98:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5b9a:	f7fc fe51 	bl	2840 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    5b9e:	9b01      	ldr	r3, [sp, #4]
    5ba0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5ba4:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    5ba8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    5bac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    5bb0:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    5bb4:	b002      	add	sp, #8
    5bb6:	bd10      	pop	{r4, pc}

00005bb8 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    5bb8:	68c2      	ldr	r2, [r0, #12]
{
    5bba:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    5bbc:	e892 0003 	ldmia.w	r2, {r0, r1}
    5bc0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5bc4:	2000      	movs	r0, #0
    5bc6:	4770      	bx	lr

00005bc8 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    5bc8:	4700      	bx	r0

00005bca <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    5bca:	f000 b840 	b.w	5c4e <z_impl_k_busy_wait>

00005bce <arch_system_halt>:
	__asm__ volatile(
    5bce:	f04f 0220 	mov.w	r2, #32
    5bd2:	f3ef 8311 	mrs	r3, BASEPRI
    5bd6:	f382 8811 	msr	BASEPRI, r2
    5bda:	f3bf 8f6f 	isb	sy
	for (;;) {
    5bde:	e7fe      	b.n	5bde <arch_system_halt+0x10>

00005be0 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    5be0:	f7ff bf1b 	b.w	5a1a <z_clock_idle_exit>

00005be4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5be4:	4603      	mov	r3, r0
    5be6:	b920      	cbnz	r0, 5bf2 <z_reschedule_irqlock+0xe>
    5be8:	f3ef 8205 	mrs	r2, IPSR
    5bec:	b90a      	cbnz	r2, 5bf2 <z_reschedule_irqlock+0xe>
    5bee:	f7fc b851 	b.w	1c94 <arch_swap>
	__asm__ volatile(
    5bf2:	f383 8811 	msr	BASEPRI, r3
    5bf6:	f3bf 8f6f 	isb	sy
}
    5bfa:	4770      	bx	lr

00005bfc <z_reschedule_unlocked>:
	__asm__ volatile(
    5bfc:	f04f 0320 	mov.w	r3, #32
    5c00:	f3ef 8011 	mrs	r0, BASEPRI
    5c04:	f383 8811 	msr	BASEPRI, r3
    5c08:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    5c0c:	f7ff bfea 	b.w	5be4 <z_reschedule_irqlock>

00005c10 <unpend_thread_no_timeout>:
{
    5c10:	b510      	push	{r4, lr}
    5c12:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    5c14:	3008      	adds	r0, #8
    5c16:	f7fd ffab 	bl	3b70 <pended_on.isra.0>
    5c1a:	4621      	mov	r1, r4
    5c1c:	f7fe f8f2 	bl	3e04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5c20:	7b63      	ldrb	r3, [r4, #13]
    5c22:	f023 0302 	bic.w	r3, r3, #2
    5c26:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5c28:	2300      	movs	r3, #0
    5c2a:	60a3      	str	r3, [r4, #8]
}
    5c2c:	bd10      	pop	{r4, pc}

00005c2e <z_priq_dumb_best>:
{
    5c2e:	4603      	mov	r3, r0
	return list->head == list;
    5c30:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c32:	4283      	cmp	r3, r0
    5c34:	d003      	beq.n	5c3e <z_priq_dumb_best+0x10>
	if (n != NULL) {
    5c36:	2800      	cmp	r0, #0
    5c38:	bf38      	it	cc
    5c3a:	2000      	movcc	r0, #0
    5c3c:	4770      	bx	lr
	struct k_thread *thread = NULL;
    5c3e:	2000      	movs	r0, #0
}
    5c40:	4770      	bx	lr

00005c42 <k_is_in_isr>:
    5c42:	f3ef 8005 	mrs	r0, IPSR
}
    5c46:	3800      	subs	r0, #0
    5c48:	bf18      	it	ne
    5c4a:	2001      	movne	r0, #1
    5c4c:	4770      	bx	lr

00005c4e <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    5c4e:	f7fc bd7b 	b.w	2748 <arch_busy_wait>

00005c52 <k_thread_name_get>:
}
    5c52:	3064      	adds	r0, #100	; 0x64
    5c54:	4770      	bx	lr

00005c56 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    5c56:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    5c58:	f7ff fc8e 	bl	5578 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    5c5c:	bd08      	pop	{r3, pc}

00005c5e <k_heap_init>:
{
    5c5e:	b410      	push	{r4}
    5c60:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    5c64:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    5c68:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    5c6a:	f7fb bb0d 	b.w	1288 <sys_heap_init>

00005c6e <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    5c6e:	4770      	bx	lr
